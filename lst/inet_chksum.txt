; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\inet_chksum.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\inet_chksum.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\inet_chksum.crf lwip-1.4.1\src\core\ipv4\inet_chksum.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  lwip_standard_chksum PROC
;;;134    static u16_t
;;;135    lwip_standard_chksum(void *dataptr, int len)
000000  e92d4008          PUSH     {r3,lr}
;;;136    {
;;;137      u8_t *pb = (u8_t *)dataptr;
;;;138      u16_t *ps, t = 0;
;;;139      u32_t sum = 0;
;;;140      int odd = ((mem_ptr_t)pb & 1);
000004  e2103001          ANDS     r3,r0,#1
000008  e3a02000          MOV      r2,#0                 ;138
;;;141    
;;;142      /* Get aligned to u16_t */
;;;143      if (odd && len > 0) {
00000c  13510000          CMPNE    r1,#0
000010  e1cd20b0          STRH     r2,[sp,#0]            ;138
000014  da000006          BLE      |L1.52|
;;;144        ((u8_t *)&t)[1] = *pb++;
000018  e4d0c001          LDRB     r12,[r0],#1
00001c  e2411001          SUB      r1,r1,#1
000020  e5cdc001          STRB     r12,[sp,#1]
;;;145        len--;
000024  ea000002          B        |L1.52|
                  |L1.40|
;;;146      }
;;;147    
;;;148      /* Add the bulk of the data */
;;;149      ps = (u16_t *)(void *)pb;
;;;150      while (len > 1) {
;;;151        sum += *ps++;
000028  e0d0c0b2          LDRH     r12,[r0],#2
00002c  e2411002          SUB      r1,r1,#2
000030  e082200c          ADD      r2,r2,r12
                  |L1.52|
000034  e3510001          CMP      r1,#1                 ;150
000038  cafffffa          BGT      |L1.40|
;;;152        len -= 2;
;;;153      }
;;;154    
;;;155      /* Consume left-over byte, if any */
;;;156      if (len > 0) {
00003c  e3510000          CMP      r1,#0
;;;157        ((u8_t *)&t)[0] = *(u8_t *)ps;
000040  c5d00000          LDRBGT   r0,[r0,#0]
000044  c5cd0000          STRBGT   r0,[sp,#0]
;;;158      }
;;;159    
;;;160      /* Add end bytes */
;;;161      sum += t;
000048  e1dd00b0          LDRH     r0,[sp,#0]
;;;162    
;;;163      /* Fold 32-bit sum to 16 bits
;;;164         calling this twice is propably faster than if statements... */
;;;165      sum = FOLD_U32T(sum);
;;;166      sum = FOLD_U32T(sum);
;;;167    
;;;168      /* Swap if alignment was odd */
;;;169      if (odd) {
00004c  e3530000          CMP      r3,#0
000050  e0800002          ADD      r0,r0,r2              ;161
000054  e1a01800          LSL      r1,r0,#16             ;165
000058  e1a01821          LSR      r1,r1,#16             ;165
00005c  e0810820          ADD      r0,r1,r0,LSR #16      ;165
000060  e3c01801          BIC      r1,r0,#0x10000        ;166
000064  e0810820          ADD      r0,r1,r0,LSR #16      ;166
000068  0a000003          BEQ      |L1.124|
;;;170        sum = SWAP_BYTES_IN_WORD(sum);
00006c  e1a01800          LSL      r1,r0,#16
000070  e1a01c21          LSR      r1,r1,#24
000074  e20000ff          AND      r0,r0,#0xff
000078  e1810400          ORR      r0,r1,r0,LSL #8
                  |L1.124|
;;;171      }
;;;172    
;;;173      return (u16_t)sum;
00007c  e3c00801          BIC      r0,r0,#0x10000
;;;174    }
000080  e8bd8008          POP      {r3,pc}
;;;175    #endif
                          ENDP

                  inet_chksum_pseudo PROC
;;;271    u16_t
;;;272    inet_chksum_pseudo(struct pbuf *p,
000084  e92d47f0          PUSH     {r4-r10,lr}
;;;273           ip_addr_t *src, ip_addr_t *dest,
;;;274           u8_t proto, u16_t proto_len)
;;;275    {
;;;276      u32_t acc;
;;;277      u32_t addr;
;;;278      struct pbuf *q;
;;;279      u8_t swapped;
;;;280    
;;;281      acc = 0;
000088  e3a04000          MOV      r4,#0
;;;282      swapped = 0;
00008c  e59da020          LDR      r10,[sp,#0x20]
000090  e1a09003          MOV      r9,r3                 ;275
000094  e1a07002          MOV      r7,r2                 ;275
000098  e1a08001          MOV      r8,r1                 ;275
00009c  e1a05000          MOV      r5,r0                 ;275
0000a0  e1a06004          MOV      r6,r4
0000a4  ea00000f          B        |L1.232|
                  |L1.168|
;;;283      /* iterate through all pbuf in chain */
;;;284      for(q = p; q != NULL; q = q->next) {
;;;285        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
;;;286          (void *)q, (void *)q->next));
;;;287        acc += LWIP_CHKSUM(q->payload, q->len);
0000a8  e1d510ba          LDRH     r1,[r5,#0xa]
0000ac  e5950004          LDR      r0,[r5,#4]
0000b0  ebfffffe          BL       lwip_standard_chksum
0000b4  e0800004          ADD      r0,r0,r4
;;;288        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;289        /* just executing this next line is probably faster that the if statement needed
;;;290           to check whether we really need to execute it, and does no harm */
;;;291        acc = FOLD_U32T(acc);
0000b8  e3c01803          BIC      r1,r0,#0x30000
0000bc  e0814820          ADD      r4,r1,r0,LSR #16
;;;292        if (q->len % 2 != 0) {
0000c0  e5d5000a          LDRB     r0,[r5,#0xa]
0000c4  e3100001          TST      r0,#1
0000c8  0a000005          BEQ      |L1.228|
;;;293          swapped = 1 - swapped;
0000cc  e2660001          RSB      r0,r6,#1
0000d0  e20060ff          AND      r6,r0,#0xff
;;;294          acc = SWAP_BYTES_IN_WORD(acc);
0000d4  e1a00804          LSL      r0,r4,#16
0000d8  e1a00c20          LSR      r0,r0,#24
0000dc  e20410ff          AND      r1,r4,#0xff
0000e0  e1804401          ORR      r4,r0,r1,LSL #8
                  |L1.228|
0000e4  e5955000          LDR      r5,[r5,#0]            ;284
                  |L1.232|
0000e8  e3550000          CMP      r5,#0                 ;284
0000ec  1affffed          BNE      |L1.168|
;;;295        }
;;;296        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;297      }
;;;298    
;;;299      if (swapped) {
0000f0  e3560000          CMP      r6,#0
0000f4  0a000003          BEQ      |L1.264|
;;;300        acc = SWAP_BYTES_IN_WORD(acc);
0000f8  e1a00804          LSL      r0,r4,#16
0000fc  e1a00c20          LSR      r0,r0,#24
000100  e20410ff          AND      r1,r4,#0xff
000104  e1804401          ORR      r4,r0,r1,LSL #8
                  |L1.264|
;;;301      }
;;;302      addr = ip4_addr_get_u32(src);
000108  e5980000          LDR      r0,[r8,#0]
;;;303      acc += (addr & 0xffffUL);
00010c  e1a01800          LSL      r1,r0,#16
000110  e1a01821          LSR      r1,r1,#16
000114  e0811004          ADD      r1,r1,r4
;;;304      acc += ((addr >> 16) & 0xffffUL);
000118  e0811820          ADD      r1,r1,r0,LSR #16
;;;305      addr = ip4_addr_get_u32(dest);
00011c  e5970000          LDR      r0,[r7,#0]
;;;306      acc += (addr & 0xffffUL);
000120  e1a02800          LSL      r2,r0,#16
000124  e1a02822          LSR      r2,r2,#16
000128  e0811002          ADD      r1,r1,r2
;;;307      acc += ((addr >> 16) & 0xffffUL);
00012c  e0814820          ADD      r4,r1,r0,LSR #16
;;;308      acc += (u32_t)htons((u16_t)proto);
000130  e1a00009          MOV      r0,r9
000134  ebfffffe          BL       lwip_htons
000138  e0844000          ADD      r4,r4,r0
;;;309      acc += (u32_t)htons(proto_len);
00013c  e1a0000a          MOV      r0,r10
000140  ebfffffe          BL       lwip_htons
000144  e0800004          ADD      r0,r0,r4
;;;310    
;;;311      /* Fold 32-bit sum to 16 bits
;;;312         calling this twice is propably faster than if statements... */
;;;313      acc = FOLD_U32T(acc);
000148  e3c0187f          BIC      r1,r0,#0x7f0000
00014c  e0810820          ADD      r0,r1,r0,LSR #16
;;;314      acc = FOLD_U32T(acc);
000150  e0800820          ADD      r0,r0,r0,LSR #16
;;;315      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
;;;316      return (u16_t)~(acc & 0xffffUL);
000154  e1e00000          MVN      r0,r0
000158  e1a00800          LSL      r0,r0,#16
00015c  e1a00820          LSR      r0,r0,#16
;;;317    }
000160  e8bd87f0          POP      {r4-r10,pc}
;;;318    
                          ENDP

                  inet_chksum_pseudo_partial PROC
;;;331    u16_t
;;;332    inet_chksum_pseudo_partial(struct pbuf *p,
000164  e92d5ff0          PUSH     {r4-r12,lr}
;;;333           ip_addr_t *src, ip_addr_t *dest,
;;;334           u8_t proto, u16_t proto_len, u16_t chksum_len)
;;;335    {
;;;336      u32_t acc;
;;;337      u32_t addr;
;;;338      struct pbuf *q;
;;;339      u8_t swapped;
;;;340      u16_t chklen;
;;;341    
;;;342      acc = 0;
000168  e3a04000          MOV      r4,#0
;;;343      swapped = 0;
00016c  e59d602c          LDR      r6,[sp,#0x2c]
000170  e1a0b003          MOV      r11,r3                ;335
000174  e1a09002          MOV      r9,r2                 ;335
000178  e1a0a001          MOV      r10,r1                ;335
00017c  e1a05000          MOV      r5,r0                 ;335
000180  e1a08004          MOV      r8,r4
000184  ea00001e          B        |L1.516|
                  |L1.392|
;;;344      /* iterate through all pbuf in chain */
;;;345      for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
;;;346        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
;;;347          (void *)q, (void *)q->next));
;;;348        chklen = q->len;
000188  e1d570ba          LDRH     r7,[r5,#0xa]
;;;349        if (chklen > chksum_len) {
;;;350          chklen = chksum_len;
;;;351        }
;;;352        acc += LWIP_CHKSUM(q->payload, chklen);
00018c  e5950004          LDR      r0,[r5,#4]
000190  e1570006          CMP      r7,r6                 ;349
000194  81a07006          MOVHI    r7,r6                 ;350
000198  e1a01007          MOV      r1,r7
00019c  ebfffffe          BL       lwip_standard_chksum
0001a0  e0844000          ADD      r4,r4,r0
;;;353        chksum_len -= chklen;
0001a4  e0460007          SUB      r0,r6,r7
0001a8  e1a06800          LSL      r6,r0,#16
;;;354        LWIP_ASSERT("delete me", chksum_len < 0x7fff);
0001ac  e59f016c          LDR      r0,|L1.800|
0001b0  e1a06826          LSR      r6,r6,#16             ;353
0001b4  e1560000          CMP      r6,r0
0001b8  3a000004          BCC      |L1.464|
0001bc  e59f2188          LDR      r2,|L1.844|
0001c0  e28f3f57          ADR      r3,|L1.804|
0001c4  e28f1f61          ADR      r1,|L1.848|
0001c8  e28f0f63          ADR      r0,|L1.860|
0001cc  ebfffffe          BL       sysprintf
                  |L1.464|
;;;355        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;356        /* fold the upper bit down */
;;;357        acc = FOLD_U32T(acc);
0001d0  e1a00804          LSL      r0,r4,#16
0001d4  e1a00820          LSR      r0,r0,#16
0001d8  e0804824          ADD      r4,r0,r4,LSR #16
;;;358        if (q->len % 2 != 0) {
0001dc  e5d5000a          LDRB     r0,[r5,#0xa]
0001e0  e3100001          TST      r0,#1
0001e4  0a000005          BEQ      |L1.512|
;;;359          swapped = 1 - swapped;
0001e8  e2680001          RSB      r0,r8,#1
0001ec  e20080ff          AND      r8,r0,#0xff
;;;360          acc = SWAP_BYTES_IN_WORD(acc);
0001f0  e1a00804          LSL      r0,r4,#16
0001f4  e1a00c20          LSR      r0,r0,#24
0001f8  e20410ff          AND      r1,r4,#0xff
0001fc  e1804401          ORR      r4,r0,r1,LSL #8
                  |L1.512|
000200  e5955000          LDR      r5,[r5,#0]            ;345
                  |L1.516|
000204  e3550000          CMP      r5,#0                 ;345
000208  13560000          CMPNE    r6,#0                 ;345
00020c  1affffdd          BNE      |L1.392|
;;;361        }
;;;362        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;363      }
;;;364    
;;;365      if (swapped) {
000210  e3580000          CMP      r8,#0
000214  0a000003          BEQ      |L1.552|
;;;366        acc = SWAP_BYTES_IN_WORD(acc);
000218  e1a00804          LSL      r0,r4,#16
00021c  e1a00c20          LSR      r0,r0,#24
000220  e20410ff          AND      r1,r4,#0xff
000224  e1804401          ORR      r4,r0,r1,LSL #8
                  |L1.552|
;;;367      }
;;;368      addr = ip4_addr_get_u32(src);
000228  e59a0000          LDR      r0,[r10,#0]
;;;369      acc += (addr & 0xffffUL);
00022c  e1a01800          LSL      r1,r0,#16
000230  e1a01821          LSR      r1,r1,#16
000234  e0811004          ADD      r1,r1,r4
;;;370      acc += ((addr >> 16) & 0xffffUL);
000238  e0811820          ADD      r1,r1,r0,LSR #16
;;;371      addr = ip4_addr_get_u32(dest);
00023c  e5990000          LDR      r0,[r9,#0]
;;;372      acc += (addr & 0xffffUL);
000240  e1a02800          LSL      r2,r0,#16
000244  e1a02822          LSR      r2,r2,#16
000248  e0811002          ADD      r1,r1,r2
;;;373      acc += ((addr >> 16) & 0xffffUL);
00024c  e0814820          ADD      r4,r1,r0,LSR #16
;;;374      acc += (u32_t)htons((u16_t)proto);
000250  e1a0000b          MOV      r0,r11
000254  ebfffffe          BL       lwip_htons
000258  e0844000          ADD      r4,r4,r0
;;;375      acc += (u32_t)htons(proto_len);
00025c  e59d0028          LDR      r0,[sp,#0x28]
000260  ebfffffe          BL       lwip_htons
000264  e0800004          ADD      r0,r0,r4
;;;376    
;;;377      /* Fold 32-bit sum to 16 bits
;;;378         calling this twice is propably faster than if statements... */
;;;379      acc = FOLD_U32T(acc);
000268  e3c0187f          BIC      r1,r0,#0x7f0000
00026c  e0810820          ADD      r0,r1,r0,LSR #16
;;;380      acc = FOLD_U32T(acc);
000270  e0800820          ADD      r0,r0,r0,LSR #16
;;;381      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
;;;382      return (u16_t)~(acc & 0xffffUL);
000274  e1e00000          MVN      r0,r0
000278  e1a00800          LSL      r0,r0,#16
00027c  e1a00820          LSR      r0,r0,#16
;;;383    }
000280  e8bd9ff0          POP      {r4-r12,pc}
;;;384    
                          ENDP

                  inet_chksum PROC
;;;395    u16_t
;;;396    inet_chksum(void *dataptr, u16_t len)
000284  e92d4010          PUSH     {r4,lr}
;;;397    {
;;;398      return ~LWIP_CHKSUM(dataptr, len);
000288  ebfffffe          BL       lwip_standard_chksum
00028c  e1e00000          MVN      r0,r0
000290  e1a00800          LSL      r0,r0,#16
000294  e1a00820          LSR      r0,r0,#16
;;;399    }
000298  e8bd8010          POP      {r4,pc}
;;;400    
                          ENDP

                  inet_chksum_pbuf PROC
;;;408    u16_t
;;;409    inet_chksum_pbuf(struct pbuf *p)
00029c  e92d4070          PUSH     {r4-r6,lr}
;;;410    {
;;;411      u32_t acc;
;;;412      struct pbuf *q;
;;;413      u8_t swapped;
;;;414    
;;;415      acc = 0;
0002a0  e3a04000          MOV      r4,#0
0002a4  e1a05000          MOV      r5,r0                 ;410
;;;416      swapped = 0;
0002a8  e1a06004          MOV      r6,r4
0002ac  ea00000f          B        |L1.752|
                  |L1.688|
;;;417      for(q = p; q != NULL; q = q->next) {
;;;418        acc += LWIP_CHKSUM(q->payload, q->len);
0002b0  e1d510ba          LDRH     r1,[r5,#0xa]
0002b4  e5950004          LDR      r0,[r5,#4]
0002b8  ebfffffe          BL       lwip_standard_chksum
0002bc  e0800004          ADD      r0,r0,r4
;;;419        acc = FOLD_U32T(acc);
0002c0  e3c01803          BIC      r1,r0,#0x30000
0002c4  e0814820          ADD      r4,r1,r0,LSR #16
;;;420        if (q->len % 2 != 0) {
0002c8  e5d5000a          LDRB     r0,[r5,#0xa]
0002cc  e3100001          TST      r0,#1
0002d0  0a000005          BEQ      |L1.748|
;;;421          swapped = 1 - swapped;
0002d4  e2660001          RSB      r0,r6,#1
0002d8  e20060ff          AND      r6,r0,#0xff
;;;422          acc = SWAP_BYTES_IN_WORD(acc);
0002dc  e1a00804          LSL      r0,r4,#16
0002e0  e1a00c20          LSR      r0,r0,#24
0002e4  e20410ff          AND      r1,r4,#0xff
0002e8  e1804401          ORR      r4,r0,r1,LSL #8
                  |L1.748|
0002ec  e5955000          LDR      r5,[r5,#0]            ;417
                  |L1.752|
0002f0  e3550000          CMP      r5,#0                 ;417
0002f4  1affffed          BNE      |L1.688|
;;;423        }
;;;424      }
;;;425    
;;;426      if (swapped) {
0002f8  e3560000          CMP      r6,#0
0002fc  0a000003          BEQ      |L1.784|
;;;427        acc = SWAP_BYTES_IN_WORD(acc);
000300  e1a00804          LSL      r0,r4,#16
000304  e1a00c20          LSR      r0,r0,#24
000308  e20410ff          AND      r1,r4,#0xff
00030c  e1804401          ORR      r4,r0,r1,LSL #8
                  |L1.784|
;;;428      }
;;;429      return (u16_t)~(acc & 0xffffUL);
000310  e1e00004          MVN      r0,r4
000314  e1a00800          LSL      r0,r0,#16
000318  e1a00820          LSR      r0,r0,#16
;;;430    }
00031c  e8bd8070          POP      {r4-r6,pc}
;;;431    
                          ENDP

                  |L1.800|
                          DCD      0x00007fff
                  |L1.804|
000324  6c776970          DCB      "lwip-1.4.1\\src\\core\\ipv4\\inet_chksum.c",0
000328  2d312e34
00032c  2e315c73
000330  72635c63
000334  6f72655c
000338  69707634
00033c  5c696e65
000340  745f6368
000344  6b73756d
000348  2e6300  
00034b  00                DCB      0
                  |L1.844|
                          DCD      0x00000162
                  |L1.848|
000350  64656c65          DCB      "delete me",0
000354  7465206d
000358  6500    
00035a  00                DCB      0
00035b  00                DCB      0
                  |L1.860|
00035c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000360  7274696f
000364  6e202225
000368  73222066
00036c  61696c65
000370  64206174
000374  206c696e
000378  65202564
00037c  20696e20
000380  25730a00
