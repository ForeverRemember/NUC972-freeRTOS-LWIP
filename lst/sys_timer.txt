; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sys_timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_timer.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\sys_timer.crf Driver\Source\sys_timer.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sysTimer0ISR PROC
                  |L1.0|
;;;69     /* Interrupt service routine */
;;;70     void sysTimer0ISR()
000000  e92d4038          PUSH     {r3-r5,lr}
;;;71     {
;;;72         int volatile i;
;;;73     
;;;74         /*----- check channel 0 -----*/
;;;75         if (inpw(REG_TMR_TISR) & 0x00000001)
000004  e59f17e8          LDR      r1,|L1.2036|
000008  e5910060          LDR      r0,[r1,#0x60]
00000c  e3100001          TST      r0,#1
000010  0a000023          BEQ      |L1.164|
;;;76         {
;;;77             _sys_uTimer0Count++;
000014  e59f07dc          LDR      r0,|L1.2040|
000018  e590200c          LDR      r2,[r0,#0xc]  ; _sys_uTimer0Count
00001c  e2822001          ADD      r2,r2,#1
000020  e580200c          STR      r2,[r0,#0xc]  ; _sys_uTimer0Count
;;;78             outpw(REG_TMR_TISR, 0x01); /* clear TIF0 */
000024  e3a02001          MOV      r2,#1
000028  e5812060          STR      r2,[r1,#0x60]
;;;79             if (_sys_uTimer0Count >= 0xfffffff)
00002c  e590200c          LDR      r2,[r0,#0xc]  ; _sys_uTimer0Count
000030  e3a01000          MOV      r1,#0
000034  e372021f          CMN      r2,#0xf0000001
;;;80                 _sys_uTimer0Count = 0;
000038  2580100c          STRCS    r1,[r0,#0xc]  ; _sys_uTimer0Count
;;;81     
;;;82             if (_sys_bIsSetTime0Event)
00003c  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime0Event
000040  e3500000          CMP      r0,#0
;;;83             {
;;;84                 for (i=0; i<TimerEventCount; i++)
;;;85                 {
;;;86                     if (tTime0Event[i].active)
000044  159f47b0          LDRNE    r4,|L1.2044|
000048  158d1000          STRNE    r1,[sp,#0]            ;84
00004c  0a000014          BEQ      |L1.164|
                  |L1.80|
000050  e59d0000          LDR      r0,[sp,#0]
000054  e7940200          LDR      r0,[r4,r0,LSL #4]
000058  e3500000          CMP      r0,#0
00005c  0a00000b          BEQ      |L1.144|
;;;87                     {
;;;88                         tTime0Event[i].curTick--;
000060  e59d0000          LDR      r0,[sp,#0]
000064  e0842200          ADD      r2,r4,r0,LSL #4
000068  e5921008          LDR      r1,[r2,#8]
00006c  e2511001          SUBS     r1,r1,#1
000070  e5821008          STR      r1,[r2,#8]
;;;89                         if (tTime0Event[i].curTick == 0)
000074  1a000005          BNE      |L1.144|
;;;90                         {
;;;91                             (*tTime0Event[i].funPtr)();
000078  e592000c          LDR      r0,[r2,#0xc]
00007c  e12fff30          BLX      r0
;;;92                             tTime0Event[i].curTick = tTime0Event[i].initTick;
000080  e59d0000          LDR      r0,[sp,#0]
000084  e0840200          ADD      r0,r4,r0,LSL #4
000088  e5901004          LDR      r1,[r0,#4]
00008c  e5801008          STR      r1,[r0,#8]
                  |L1.144|
000090  e59d0000          LDR      r0,[sp,#0]            ;84
000094  e2800001          ADD      r0,r0,#1              ;84
000098  e350000a          CMP      r0,#0xa               ;84
00009c  e58d0000          STR      r0,[sp,#0]            ;84
0000a0  baffffea          BLT      |L1.80|
                  |L1.164|
;;;93                         }
;;;94                     }
;;;95                 }
;;;96             }
;;;97         }
;;;98     }
0000a4  e8bd8038          POP      {r3-r5,pc}
;;;99     
                          ENDP

                  sysTimer1ISR PROC
                  |L1.168|
;;;100    void sysTimer1ISR()
0000a8  e92d4038          PUSH     {r3-r5,lr}
;;;101    {
;;;102        int volatile i;
;;;103    
;;;104        /*----- check channel 1 -----*/
;;;105        if (inpw(REG_TMR_TISR) & 0x00000002)
0000ac  e59f1740          LDR      r1,|L1.2036|
0000b0  e5910060          LDR      r0,[r1,#0x60]
0000b4  e3100002          TST      r0,#2
0000b8  0a000023          BEQ      |L1.332|
;;;106        {
;;;107            _sys_uTimer1Count++;
0000bc  e59f0734          LDR      r0,|L1.2040|
0000c0  e5902010          LDR      r2,[r0,#0x10]  ; _sys_uTimer1Count
0000c4  e2822001          ADD      r2,r2,#1
0000c8  e5802010          STR      r2,[r0,#0x10]  ; _sys_uTimer1Count
;;;108            outpw(REG_TMR_TISR, 0x02); /* clear TIF1 */
0000cc  e3a02002          MOV      r2,#2
0000d0  e5812060          STR      r2,[r1,#0x60]
;;;109            if (_sys_uTimer1Count >= 0xfffffff)
0000d4  e5902010          LDR      r2,[r0,#0x10]  ; _sys_uTimer1Count
0000d8  e3a01000          MOV      r1,#0
0000dc  e372021f          CMN      r2,#0xf0000001
;;;110                _sys_uTimer1Count = 0;
0000e0  25801010          STRCS    r1,[r0,#0x10]  ; _sys_uTimer1Count
;;;111    
;;;112            if (_sys_bIsSetTime1Event)
0000e4  e5d00001          LDRB     r0,[r0,#1]  ; _sys_bIsSetTime1Event
0000e8  e3500000          CMP      r0,#0
;;;113            {
;;;114                for (i=0; i<TimerEventCount; i++)
;;;115                {
;;;116                    if (tTime1Event[i].active)
0000ec  159f470c          LDRNE    r4,|L1.2048|
0000f0  158d1000          STRNE    r1,[sp,#0]            ;114
0000f4  0a000014          BEQ      |L1.332|
                  |L1.248|
0000f8  e59d0000          LDR      r0,[sp,#0]
0000fc  e7940200          LDR      r0,[r4,r0,LSL #4]
000100  e3500000          CMP      r0,#0
000104  0a00000b          BEQ      |L1.312|
;;;117                    {
;;;118                        tTime1Event[i].curTick--;
000108  e59d0000          LDR      r0,[sp,#0]
00010c  e0842200          ADD      r2,r4,r0,LSL #4
000110  e5921008          LDR      r1,[r2,#8]
000114  e2511001          SUBS     r1,r1,#1
000118  e5821008          STR      r1,[r2,#8]
;;;119                        if (tTime1Event[i].curTick == 0)
00011c  1a000005          BNE      |L1.312|
;;;120                        {
;;;121                            (*tTime1Event[i].funPtr)();
000120  e592000c          LDR      r0,[r2,#0xc]
000124  e12fff30          BLX      r0
;;;122                            tTime1Event[i].curTick = tTime1Event[i].initTick;
000128  e59d0000          LDR      r0,[sp,#0]
00012c  e0840200          ADD      r0,r4,r0,LSL #4
000130  e5901004          LDR      r1,[r0,#4]
000134  e5801008          STR      r1,[r0,#8]
                  |L1.312|
000138  e59d0000          LDR      r0,[sp,#0]            ;114
00013c  e2800001          ADD      r0,r0,#1              ;114
000140  e350000a          CMP      r0,#0xa               ;114
000144  e58d0000          STR      r0,[sp,#0]            ;114
000148  baffffea          BLT      |L1.248|
                  |L1.332|
;;;123                        }
;;;124                    }
;;;125                }
;;;126            }
;;;127        }
;;;128    }
00014c  e8bd8038          POP      {r3-r5,pc}
;;;129    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysGetTicks PROC
;;;140     */
;;;141    UINT32 sysGetTicks(INT32 nTimeNo)
000150  e59f16a0          LDR      r1,|L1.2040|
;;;142    {
;;;143        switch (nTimeNo)
000154  e3500000          CMP      r0,#0
;;;144        {
;;;145            case TIMER0:
;;;146                return _sys_uTimer0Count;
000158  0591000c          LDREQ    r0,[r1,#0xc]  ; _sys_uTimer0Count
;;;147    
;;;148            case TIMER1:
;;;149                return _sys_uTimer1Count;
;;;150    
;;;151            default:
;;;152                ;
;;;153        }
;;;154        return 0;
;;;155    }
00015c  012fff1e          BXEQ     lr
000160  e3500001          CMP      r0,#1                 ;143
000164  05910010          LDREQ    r0,[r1,#0x10]         ;149  ; _sys_uTimer1Count
000168  13a00000          MOVNE    r0,#0                 ;154
00016c  e12fff1e          BX       lr
;;;156    
                          ENDP

                  sysResetTicks PROC
;;;163     */
;;;164    INT32 sysResetTicks(INT32 nTimeNo)
000170  e59f1680          LDR      r1,|L1.2040|
;;;165    {
;;;166        switch (nTimeNo)
000174  e3500000          CMP      r0,#0
000178  e3a02000          MOV      r2,#0                 ;165
;;;167        {
;;;168            case TIMER0:
;;;169                _sys_uTimer0Count = 0;
00017c  0581200c          STREQ    r2,[r1,#0xc]  ; _sys_uTimer0Count
000180  0a000001          BEQ      |L1.396|
000184  e3500001          CMP      r0,#1                 ;166
;;;170                break;
;;;171    
;;;172            case TIMER1:
;;;173                _sys_uTimer1Count = 0;
000188  05812010          STREQ    r2,[r1,#0x10]  ; _sys_uTimer1Count
                  |L1.396|
;;;174                break;
;;;175    
;;;176            default:
;;;177                ;
;;;178        }
;;;179        return 0;
00018c  e3a00000          MOV      r0,#0
;;;180    }
000190  e12fff1e          BX       lr
;;;181    
                          ENDP

                  sysUpdateTickCount PROC
;;;189     */
;;;190    INT32 sysUpdateTickCount(INT32 nTimeNo, UINT32 uCount)
000194  e59f265c          LDR      r2,|L1.2040|
;;;191    {
;;;192        switch (nTimeNo)
000198  e3500000          CMP      r0,#0
;;;193        {
;;;194            case TIMER0:
;;;195                _sys_uTimer0Count = uCount;
00019c  0582100c          STREQ    r1,[r2,#0xc]  ; _sys_uTimer0Count
0001a0  0a000001          BEQ      |L1.428|
0001a4  e3500001          CMP      r0,#1                 ;192
;;;196                break;
;;;197    
;;;198            case TIMER1:
;;;199                _sys_uTimer1Count = uCount;
0001a8  05821010          STREQ    r1,[r2,#0x10]  ; _sys_uTimer1Count
                  |L1.428|
;;;200                break;
;;;201    
;;;202            default:
;;;203                ;
;;;204        }
;;;205        return 0;
0001ac  e3a00000          MOV      r0,#0
;;;206    }
0001b0  e12fff1e          BX       lr
;;;207    
                          ENDP

                  sysSetTimerReferenceClock PROC
;;;215     */
;;;216    INT32 sysSetTimerReferenceClock(INT32 nTimeNo, UINT32 uClockRate)
0001b4  e59f263c          LDR      r2,|L1.2040|
;;;217    {
;;;218        switch (nTimeNo)
0001b8  e3500000          CMP      r0,#0
;;;219        {
;;;220            case TIMER0:
;;;221                _sys_uTimer0ClockRate = uClockRate;
0001bc  05821004          STREQ    r1,[r2,#4]  ; _sys_uTimer0ClockRate
0001c0  0a000001          BEQ      |L1.460|
0001c4  e3500001          CMP      r0,#1                 ;218
;;;222                break;
;;;223    
;;;224            case TIMER1:
;;;225                _sys_uTimer1ClockRate = uClockRate;
0001c8  05821008          STREQ    r1,[r2,#8]  ; _sys_uTimer1ClockRate
                  |L1.460|
;;;226                break;
;;;227    
;;;228            default:
;;;229                ;
;;;230        }
;;;231        return 0;
0001cc  e3a00000          MOV      r0,#0
;;;232    }
0001d0  e12fff1e          BX       lr
;;;233    
                          ENDP

                  sysStartTimer PROC
;;;242     */
;;;243    INT32 sysStartTimer(INT32 nTimeNo, UINT32 uTicksPerSecond, INT32 nOpMode)
0001d4  e92d43f8          PUSH     {r3-r9,lr}
;;;244    {
0001d8  e1a06001          MOV      r6,r1
;;;245        int volatile i;
;;;246        UINT32 _mTicr, _mTcr;
;;;247    
;;;248        _mTcr = 0x60000000 | (nOpMode << 27);
0001dc  e3a01206          MOV      r1,#0x60000000
;;;249    
;;;250        switch (nTimeNo)
;;;251        {
;;;252            case TIMER0:
;;;253                outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x100);
;;;254                _sys_bIsTimer0Initial = TRUE;
0001e0  e59f8610          LDR      r8,|L1.2040|
;;;255                _sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;256    
;;;257                outpw(REG_TMR0_TCSR, 0);           /* disable timer */
0001e4  e59f7608          LDR      r7,|L1.2036|
0001e8  e1815d82          ORR      r5,r1,r2,LSL #27      ;248
0001ec  e3500000          CMP      r0,#0                 ;250
0001f0  e3a0120b          MOV      r1,#0xb0000000        ;253
0001f4  e3a04000          MOV      r4,#0
0001f8  0a000002          BEQ      |L1.520|
0001fc  e3500001          CMP      r0,#1                 ;250
000200  0a00001f          BEQ      |L1.644|
000204  ea00003a          B        |L1.756|
                  |L1.520|
000208  e5910218          LDR      r0,[r1,#0x218]        ;253
00020c  e3800c01          ORR      r0,r0,#0x100          ;253
000210  e5810218          STR      r0,[r1,#0x218]        ;253
000214  e3a00001          MOV      r0,#1                 ;254
000218  e5c80002          STRB     r0,[r8,#2]            ;254  ; _sys_bIsTimer0Initial
00021c  e5886028          STR      r6,[r8,#0x28]         ;255  ; _sys_uTimer0TickPerSecond
000220  e5874000          STR      r4,[r7,#0]
;;;258                outpw(REG_TMR_TISR, 1);           /* clear for safety */
000224  e5870060          STR      r0,[r7,#0x60]
;;;259    
;;;260                for (i=0; i<TimerEventCount; i++)
;;;261                    tTime0Event[i].active = FALSE;
000228  e59f05cc          LDR      r0,|L1.2044|
00022c  e58d4000          STR      r4,[sp,#0]
                  |L1.560|
000230  e59d1000          LDR      r1,[sp,#0]
000234  e7804201          STR      r4,[r0,r1,LSL #4]
000238  e59d1000          LDR      r1,[sp,#0]            ;260
00023c  e2811001          ADD      r1,r1,#1              ;260
000240  e351000a          CMP      r1,#0xa               ;260
000244  e58d1000          STR      r1,[sp,#0]            ;260
000248  bafffff8          BLT      |L1.560|
;;;262    
;;;263                _sys_pvOldTimer0Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, (PVOID)sysTimer0ISR);
00024c  e24f2f95          ADR      r2,|L1.0|
000250  e3a01010          MOV      r1,#0x10
000254  e3a00041          MOV      r0,#0x41
000258  ebfffffe          BL       sysInstallISR
00025c  e5880020          STR      r0,[r8,#0x20]  ; _sys_pvOldTimer0Vect
;;;264                sysEnableInterrupt(TMR0_IRQn);
000260  e3a00010          MOV      r0,#0x10
000264  ebfffffe          BL       sysEnableInterrupt
;;;265    
;;;266                _sys_uTimer0Count = 0;
000268  e588400c          STR      r4,[r8,#0xc]  ; _sys_uTimer0Count
;;;267                _mTicr = _sys_uTimer0ClockRate / uTicksPerSecond;
00026c  e5980004          LDR      r0,[r8,#4]  ; _sys_uTimer0ClockRate
000270  e1a01006          MOV      r1,r6
000274  ebfffffe          BL       __aeabi_uidivmod
;;;268                outpw(REG_TMR0_TICR, _mTicr);
000278  e5870004          STR      r0,[r7,#4]
;;;269                outpw(REG_TMR0_TCSR, _mTcr);
00027c  e5875000          STR      r5,[r7,#0]
;;;270                break;
000280  ea00001b          B        |L1.756|
                  |L1.644|
;;;271    
;;;272            case TIMER1:
;;;273                outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x200);
000284  e5910218          LDR      r0,[r1,#0x218]
000288  e3800c02          ORR      r0,r0,#0x200
00028c  e5810218          STR      r0,[r1,#0x218]
;;;274                outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000290  e5874010          STR      r4,[r7,#0x10]
;;;275                outpw(REG_TMR_TISR, 2);           /* clear for safety */
000294  e3a00002          MOV      r0,#2
000298  e5870060          STR      r0,[r7,#0x60]
;;;276    
;;;277                for (i=0; i<TimerEventCount; i++)
;;;278                    tTime1Event[i].active = FALSE;
00029c  e59f055c          LDR      r0,|L1.2048|
0002a0  e58d4000          STR      r4,[sp,#0]
                  |L1.676|
0002a4  e59d1000          LDR      r1,[sp,#0]
0002a8  e7804201          STR      r4,[r0,r1,LSL #4]
0002ac  e59d1000          LDR      r1,[sp,#0]            ;277
0002b0  e2811001          ADD      r1,r1,#1              ;277
0002b4  e351000a          CMP      r1,#0xa               ;277
0002b8  e58d1000          STR      r1,[sp,#0]            ;277
0002bc  bafffff8          BLT      |L1.676|
;;;279    
;;;280                _sys_pvOldTimer1Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR1_IRQn, (PVOID)sysTimer1ISR);
0002c0  e24f2e22          ADR      r2,|L1.168|
0002c4  e3a01011          MOV      r1,#0x11
0002c8  e3a00041          MOV      r0,#0x41
0002cc  ebfffffe          BL       sysInstallISR
0002d0  e5880024          STR      r0,[r8,#0x24]  ; _sys_pvOldTimer1Vect
;;;281                sysEnableInterrupt(TMR1_IRQn);
0002d4  e3a00011          MOV      r0,#0x11
0002d8  ebfffffe          BL       sysEnableInterrupt
;;;282    
;;;283                _sys_uTimer1Count = 0;
0002dc  e5884010          STR      r4,[r8,#0x10]  ; _sys_uTimer1Count
;;;284                _mTicr = _sys_uTimer1ClockRate / uTicksPerSecond;
0002e0  e5980008          LDR      r0,[r8,#8]  ; _sys_uTimer1ClockRate
0002e4  e1a01006          MOV      r1,r6
0002e8  ebfffffe          BL       __aeabi_uidivmod
;;;285                outpw(REG_TMR1_TICR, _mTicr);
0002ec  e5870014          STR      r0,[r7,#0x14]
;;;286                outpw(REG_TMR1_TCSR, _mTcr);
0002f0  e5875010          STR      r5,[r7,#0x10]
                  |L1.756|
;;;287                break;
;;;288    
;;;289            default:
;;;290                ;
;;;291        }
;;;292        sysSetLocalInterrupt(ENABLE_IRQ);
0002f4  e3a0007f          MOV      r0,#0x7f
0002f8  ebfffffe          BL       sysSetLocalInterrupt
;;;293        return 0;
0002fc  e3a00000          MOV      r0,#0
;;;294    }
000300  e8bd83f8          POP      {r3-r9,pc}
;;;295    
                          ENDP

                  sysStopTimer PROC
;;;302     */
;;;303    INT32 sysStopTimer(INT32 nTimeNo)
000304  e92d4070          PUSH     {r4-r6,lr}
;;;304    {
;;;305        switch (nTimeNo)
;;;306        {
;;;307            case TIMER0:
;;;308                _sys_bIsTimer0Initial = FALSE;
000308  e59f54e8          LDR      r5,|L1.2040|
;;;309                sysDisableInterrupt(TMR0_IRQn);
;;;310                sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, _sys_pvOldTimer0Vect);
;;;311    
;;;312                outpw(REG_TMR0_TCSR, 0);           /* disable timer */
00030c  e59f64e0          LDR      r6,|L1.2036|
000310  e3500000          CMP      r0,#0                 ;305
000314  e3a04000          MOV      r4,#0                 ;304
000318  0a000002          BEQ      |L1.808|
00031c  e3500001          CMP      r0,#1                 ;305
000320  0a00000d          BEQ      |L1.860|
000324  ea000017          B        |L1.904|
                  |L1.808|
000328  e5c54002          STRB     r4,[r5,#2]            ;308  ; _sys_bIsTimer0Initial
00032c  e3a00010          MOV      r0,#0x10              ;309
000330  ebfffffe          BL       sysDisableInterrupt
000334  e5952020          LDR      r2,[r5,#0x20]         ;310  ; _sys_pvOldTimer0Vect
000338  e3a01010          MOV      r1,#0x10              ;310
00033c  e3a00041          MOV      r0,#0x41              ;310
000340  ebfffffe          BL       sysInstallISR
000344  e5864000          STR      r4,[r6,#0]
;;;313                outpw(REG_TMR_TISR, 1);           /* clear for safety */
000348  e3a00001          MOV      r0,#1
00034c  e5860060          STR      r0,[r6,#0x60]
;;;314    
;;;315                _sys_uTime0EventCount = 0;
000350  e5854014          STR      r4,[r5,#0x14]  ; _sys_uTime0EventCount
;;;316                _sys_bIsSetTime0Event = FALSE;
000354  e5c54000          STRB     r4,[r5,#0]  ; _sys_bIsSetTime0Event
;;;317                break;
000358  ea00000a          B        |L1.904|
                  |L1.860|
;;;318    
;;;319            case TIMER1:
;;;320                sysDisableInterrupt(TMR1_IRQn);
00035c  e3a00011          MOV      r0,#0x11
000360  ebfffffe          BL       sysDisableInterrupt
;;;321                sysInstallISR(HIGH_LEVEL_SENSITIVE| IRQ_LEVEL_1, TMR1_IRQn, _sys_pvOldTimer1Vect);
000364  e5952024          LDR      r2,[r5,#0x24]  ; _sys_pvOldTimer1Vect
000368  e3a01011          MOV      r1,#0x11
00036c  e3a00041          MOV      r0,#0x41
000370  ebfffffe          BL       sysInstallISR
;;;322    
;;;323    
;;;324                outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000374  e5864010          STR      r4,[r6,#0x10]
;;;325                outpw(REG_TMR_TISR, 2);           /* clear for safety */
000378  e3a00002          MOV      r0,#2
00037c  e5860060          STR      r0,[r6,#0x60]
;;;326    
;;;327                _sys_uTime1EventCount = 0;
000380  e5854018          STR      r4,[r5,#0x18]  ; _sys_uTime1EventCount
;;;328                _sys_bIsSetTime1Event = FALSE;
000384  e5c54001          STRB     r4,[r5,#1]  ; _sys_bIsSetTime1Event
                  |L1.904|
;;;329                break;
;;;330    
;;;331            default:
;;;332                ;
;;;333        }
;;;334    
;;;335        return 0;
000388  e3a00000          MOV      r0,#0
;;;336    }
00038c  e8bd8070          POP      {r4-r6,pc}
;;;337    
                          ENDP

                  sysClearWatchDogTimerCount PROC
;;;342     */
;;;343    void sysClearWatchDogTimerCount(void)
000390  e59f046c          LDR      r0,|L1.2052|
;;;344    {
000394  e92d4008          PUSH     {r3,lr}
;;;345        UINT32 volatile _mWtcr;
;;;346    
;;;347        _mWtcr = inpw(REG_WDT_CTL);
000398  e5901000          LDR      r1,[r0,#0]
;;;348        _mWtcr |= 0x01;             /* write WTR */
00039c  e3811001          ORR      r1,r1,#1
;;;349        outpw(REG_WDT_CTL, _mWtcr);
0003a0  e58d1000          STR      r1,[sp,#0]
0003a4  e5801000          STR      r1,[r0,#0]
;;;350    }
0003a8  e8bd8008          POP      {r3,pc}
;;;351    
                          ENDP

                  sysClearWatchDogTimerInterruptStatus PROC
;;;356     */
;;;357    void sysClearWatchDogTimerInterruptStatus(void)
0003ac  e59f0450          LDR      r0,|L1.2052|
;;;358    {
0003b0  e92d4008          PUSH     {r3,lr}
;;;359        UINT32 volatile _mWtcr;
;;;360    
;;;361        _mWtcr = inpw(REG_WDT_CTL);
0003b4  e5901000          LDR      r1,[r0,#0]
;;;362        _mWtcr |= 0x08;       /* clear WTIF */
0003b8  e3811008          ORR      r1,r1,#8
;;;363        outpw(REG_WDT_CTL, _mWtcr);
0003bc  e58d1000          STR      r1,[sp,#0]
0003c0  e5801000          STR      r1,[r0,#0]
;;;364    }
0003c4  e8bd8008          POP      {r3,pc}
;;;365    
                          ENDP

                  sysDisableWatchDogTimer PROC
;;;370     */
;;;371    void sysDisableWatchDogTimer(void)
0003c8  e59f0434          LDR      r0,|L1.2052|
;;;372    {
0003cc  e92d4008          PUSH     {r3,lr}
;;;373        UINT32 volatile _mWtcr;
;;;374    
;;;375        _mWtcr = inpw(REG_WDT_CTL);
0003d0  e5901000          LDR      r1,[r0,#0]
;;;376        _mWtcr &= 0xFFFFFF7F;
0003d4  e3c11080          BIC      r1,r1,#0x80
;;;377        outpw(REG_WDT_CTL, _mWtcr);
0003d8  e58d1000          STR      r1,[sp,#0]
0003dc  e5801000          STR      r1,[r0,#0]
;;;378    }
0003e0  e8bd8008          POP      {r3,pc}
;;;379    
                          ENDP

                  sysDisableWatchDogTimerReset PROC
;;;384     */
;;;385    void sysDisableWatchDogTimerReset(void)
0003e4  e59f0418          LDR      r0,|L1.2052|
;;;386    {
0003e8  e92d4008          PUSH     {r3,lr}
;;;387        UINT32 volatile _mWtcr;
;;;388    
;;;389        _mWtcr = inpw(REG_WDT_CTL);
0003ec  e5901000          LDR      r1,[r0,#0]
;;;390        _mWtcr &= 0xFFFFFFFD;
0003f0  e3c11002          BIC      r1,r1,#2
;;;391        outpw(REG_WDT_CTL, _mWtcr);
0003f4  e58d1000          STR      r1,[sp,#0]
0003f8  e5801000          STR      r1,[r0,#0]
;;;392    }
0003fc  e8bd8008          POP      {r3,pc}
;;;393    
                          ENDP

                  sysEnableWatchDogTimer PROC
;;;398     */
;;;399    void sysEnableWatchDogTimer(void)
000400  e59f03fc          LDR      r0,|L1.2052|
;;;400    {
000404  e92d4008          PUSH     {r3,lr}
;;;401        UINT32 volatile _mWtcr;
;;;402    
;;;403        _mWtcr = inpw(REG_WDT_CTL);
000408  e5901000          LDR      r1,[r0,#0]
;;;404        _mWtcr |= 0x80;
00040c  e3811080          ORR      r1,r1,#0x80
;;;405        outpw(REG_WDT_CTL, _mWtcr);
000410  e58d1000          STR      r1,[sp,#0]
000414  e5801000          STR      r1,[r0,#0]
;;;406    }
000418  e8bd8008          POP      {r3,pc}
;;;407    
                          ENDP

                  sysEnableWatchDogTimerReset PROC
;;;412     */
;;;413    void sysEnableWatchDogTimerReset(void)
00041c  e59f03e0          LDR      r0,|L1.2052|
;;;414    {
000420  e92d4008          PUSH     {r3,lr}
;;;415        UINT32 volatile _mWtcr;
;;;416    
;;;417        _mWtcr = inpw(REG_WDT_CTL);
000424  e5901000          LDR      r1,[r0,#0]
;;;418        _mWtcr |= 0x02;
000428  e3811002          ORR      r1,r1,#2
;;;419        outpw(REG_WDT_CTL, _mWtcr);
00042c  e58d1000          STR      r1,[sp,#0]
000430  e5801000          STR      r1,[r0,#0]
;;;420    }
000434  e8bd8008          POP      {r3,pc}
;;;421    
                          ENDP

                  sysInstallWatchDogTimerISR PROC
;;;430     */
;;;431    PVOID sysInstallWatchDogTimerISR(INT32 nIntTypeLevel, PVOID pvNewISR)
000438  e92d4038          PUSH     {r3-r5,lr}
;;;432    {
;;;433        PVOID _mOldVect = NULL;
;;;434        UINT32 volatile _mWtcr;
;;;435    
;;;436        _mWtcr = inpw(REG_WDT_CTL);
00043c  e59f33c0          LDR      r3,|L1.2052|
000440  e593c000          LDR      r12,[r3,#0]
;;;437        _mWtcr |= 0x40;
000444  e38cc040          ORR      r12,r12,#0x40
;;;438        outpw(REG_WDT_CTL, _mWtcr);
000448  e58dc000          STR      r12,[sp,#0]
00044c  e583c000          STR      r12,[r3,#0]
;;;439        _mOldVect = sysInstallISR(nIntTypeLevel, WDT_IRQn, pvNewISR);
000450  e1a02001          MOV      r2,r1
000454  e3a01001          MOV      r1,#1
000458  ebfffffe          BL       sysInstallISR
00045c  e1a04000          MOV      r4,r0
;;;440        sysEnableInterrupt(WDT_IRQn);
000460  e3a00001          MOV      r0,#1
000464  ebfffffe          BL       sysEnableInterrupt
;;;441        sysSetLocalInterrupt(ENABLE_IRQ);
000468  e3a0007f          MOV      r0,#0x7f
00046c  ebfffffe          BL       sysSetLocalInterrupt
;;;442    
;;;443        return _mOldVect;
000470  e1a00004          MOV      r0,r4
;;;444    }
000474  e8bd8038          POP      {r3-r5,pc}
;;;445    
                          ENDP

                  sysSetWatchDogTimerInterval PROC
;;;452     */
;;;453    INT32 sysSetWatchDogTimerInterval(INT32 nWdtInterval)
000478  e59f1384          LDR      r1,|L1.2052|
;;;454    {
00047c  e92d4008          PUSH     {r3,lr}
;;;455        UINT32 volatile _mWtcr;
;;;456    
;;;457        _mWtcr = inpw(REG_WDT_CTL) & ~0x700;
000480  e5912000          LDR      r2,[r1,#0]
000484  e3c22c07          BIC      r2,r2,#0x700
;;;458        _mWtcr = _mWtcr | (nWdtInterval << 8);
000488  e1820400          ORR      r0,r2,r0,LSL #8
;;;459        outpw(REG_WDT_CTL, _mWtcr);
00048c  e58d0000          STR      r0,[sp,#0]
000490  e5810000          STR      r0,[r1,#0]
;;;460    
;;;461        return 0;
000494  e3a00000          MOV      r0,#0
;;;462    }
000498  e8bd8008          POP      {r3,pc}
;;;463    
                          ENDP

                  sysSetTimerEvent PROC
;;;472     */
;;;473    INT32 sysSetTimerEvent(INT32 nTimeNo, UINT32 uTimeTick, PVOID pvFun)
00049c  e92d4038          PUSH     {r3-r5,lr}
;;;474    {
0004a0  e1b03000          MOVS     r3,r0
;;;475        int volatile i;
;;;476        int val=0;
;;;477    
;;;478        switch (nTimeNo)
;;;479        {
;;;480            case TIMER0:
;;;481                _sys_bIsSetTime0Event = TRUE;
0004a4  e59fc34c          LDR      r12,|L1.2040|
0004a8  e3a00000          MOV      r0,#0                 ;476
0004ac  e1a05000          MOV      r5,r0                 ;476
0004b0  e3a04001          MOV      r4,#1                 ;474
0004b4  0a000011          BEQ      |L1.1280|
0004b8  e3530001          CMP      r3,#1                 ;478
0004bc  1a00000e          BNE      |L1.1276|
;;;482                _sys_uTime0EventCount++;
;;;483                for (i=0; i<TimerEventCount; i++)
;;;484                {
;;;485                    if (tTime0Event[i].active == FALSE)
;;;486                    {
;;;487                        tTime0Event[i].active = TRUE;
;;;488                        tTime0Event[i].initTick = uTimeTick;
;;;489                        tTime0Event[i].curTick = uTimeTick;
;;;490                        tTime0Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
;;;491                        val = i+1;
;;;492                        break;
;;;493                    }
;;;494                }
;;;495                break;
;;;496    
;;;497            case TIMER1:
;;;498                _sys_bIsSetTime1Event = TRUE;
0004c0  e5cc4001          STRB     r4,[r12,#1]  ; _sys_bIsSetTime1Event
;;;499                _sys_uTime1EventCount++;
0004c4  e59c3018          LDR      r3,[r12,#0x18]  ; _sys_uTime1EventCount
0004c8  e2833001          ADD      r3,r3,#1
0004cc  e58c3018          STR      r3,[r12,#0x18]  ; _sys_uTime1EventCount
;;;500                for (i=0; i<TimerEventCount; i++)
;;;501                {
;;;502                    if (tTime1Event[i].active == FALSE)
0004d0  e59f3328          LDR      r3,|L1.2048|
0004d4  e58d5000          STR      r5,[sp,#0]
                  |L1.1240|
0004d8  e59dc000          LDR      r12,[sp,#0]
0004dc  e793c20c          LDR      r12,[r3,r12,LSL #4]
0004e0  e35c0000          CMP      r12,#0
0004e4  0a000015          BEQ      |L1.1344|
0004e8  e59dc000          LDR      r12,[sp,#0]           ;500
0004ec  e28cc001          ADD      r12,r12,#1            ;500
0004f0  e35c000a          CMP      r12,#0xa              ;500
0004f4  e58dc000          STR      r12,[sp,#0]           ;500
0004f8  bafffff6          BLT      |L1.1240|
                  |L1.1276|
;;;503                    {
;;;504                        tTime1Event[i].active = TRUE;
;;;505                        tTime1Event[i].initTick = uTimeTick;
;;;506                        tTime1Event[i].curTick = uTimeTick;
;;;507                        tTime1Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
;;;508                        val = i+1;
;;;509                        break;
;;;510                    }
;;;511                }
;;;512                break;
;;;513    
;;;514            default:
;;;515                ;
;;;516        }
;;;517    
;;;518        return val;
;;;519    }
0004fc  e8bd8038          POP      {r3-r5,pc}
                  |L1.1280|
000500  e5cc4000          STRB     r4,[r12,#0]           ;481  ; _sys_bIsSetTime0Event
000504  e59c3014          LDR      r3,[r12,#0x14]        ;482  ; _sys_uTime0EventCount
000508  e2833001          ADD      r3,r3,#1              ;482
00050c  e58c3014          STR      r3,[r12,#0x14]        ;482  ; _sys_uTime0EventCount
000510  e59f32e4          LDR      r3,|L1.2044|
000514  e58d5000          STR      r5,[sp,#0]            ;485
                  |L1.1304|
000518  e59dc000          LDR      r12,[sp,#0]           ;485
00051c  e793c20c          LDR      r12,[r3,r12,LSL #4]   ;485
000520  e35c0000          CMP      r12,#0                ;485
000524  0a000005          BEQ      |L1.1344|
000528  e59dc000          LDR      r12,[sp,#0]           ;483
00052c  e28cc001          ADD      r12,r12,#1            ;483
000530  e35c000a          CMP      r12,#0xa              ;483
000534  e58dc000          STR      r12,[sp,#0]           ;483
000538  bafffff6          BLT      |L1.1304|
00053c  e8bd8038          POP      {r3-r5,pc}
                  |L1.1344|
000540  e59d0000          LDR      r0,[sp,#0]            ;487
000544  e7834200          STR      r4,[r3,r0,LSL #4]     ;487
000548  e59d0000          LDR      r0,[sp,#0]            ;488
00054c  e0830200          ADD      r0,r3,r0,LSL #4       ;488
000550  e5801004          STR      r1,[r0,#4]            ;489
000554  e5801008          STR      r1,[r0,#8]            ;491
000558  e580200c          STR      r2,[r0,#0xc]          ;491
00055c  e59d0000          LDR      r0,[sp,#0]            ;491
000560  e2800001          ADD      r0,r0,#1              ;491
000564  e8bd8038          POP      {r3-r5,pc}
;;;520    
                          ENDP

                  sysClearTimerEvent PROC
;;;528     */
;;;529    void sysClearTimerEvent(INT32 nTimeNo, UINT32 uTimeEventNo)
000568  e59f2288          LDR      r2,|L1.2040|
;;;530    {
;;;531        switch (nTimeNo)
00056c  e3500000          CMP      r0,#0
000570  e3a03000          MOV      r3,#0                 ;530
000574  0a00000b          BEQ      |L1.1448|
000578  e3500001          CMP      r0,#1
;;;532        {
;;;533            case TIMER0:
;;;534                tTime0Event[uTimeEventNo-1].active = FALSE;
;;;535                _sys_uTime0EventCount--;
;;;536                if (_sys_uTime0EventCount == 0)
;;;537                    _sys_bIsSetTime0Event = FALSE;
;;;538                break;
;;;539    
;;;540            case TIMER1:
;;;541                tTime1Event[uTimeEventNo-1].active = FALSE;
;;;542                _sys_uTime1EventCount--;
;;;543                if (_sys_uTime1EventCount == 0)
;;;544                    _sys_bIsSetTime1Event = FALSE;
;;;545                break;
;;;546    
;;;547            default:
;;;548                ;
;;;549        }
;;;550    }
00057c  112fff1e          BXNE     lr
000580  e59f0278          LDR      r0,|L1.2048|
000584  e0800201          ADD      r0,r0,r1,LSL #4       ;541
000588  e5003010          STR      r3,[r0,#-0x10]        ;542
00058c  e5920018          LDR      r0,[r2,#0x18]         ;542  ; _sys_uTime1EventCount
000590  e2400001          SUB      r0,r0,#1              ;542
000594  e5820018          STR      r0,[r2,#0x18]         ;542  ; _sys_uTime1EventCount
000598  e5920018          LDR      r0,[r2,#0x18]         ;543  ; _sys_uTime1EventCount
00059c  e3500000          CMP      r0,#0                 ;543
0005a0  05c23001          STRBEQ   r3,[r2,#1]            ;544  ; _sys_bIsSetTime1Event
0005a4  e12fff1e          BX       lr
                  |L1.1448|
0005a8  e59f024c          LDR      r0,|L1.2044|
0005ac  e0800201          ADD      r0,r0,r1,LSL #4       ;534
0005b0  e5003010          STR      r3,[r0,#-0x10]        ;535
0005b4  e5920014          LDR      r0,[r2,#0x14]         ;535  ; _sys_uTime0EventCount
0005b8  e2400001          SUB      r0,r0,#1              ;535
0005bc  e5820014          STR      r0,[r2,#0x14]         ;535  ; _sys_uTime0EventCount
0005c0  e5920014          LDR      r0,[r2,#0x14]         ;536  ; _sys_uTime0EventCount
0005c4  e3500000          CMP      r0,#0                 ;536
0005c8  05c23000          STRBEQ   r3,[r2,#0]            ;537  ; _sys_bIsSetTime0Event
0005cc  e12fff1e          BX       lr
;;;551    
                          ENDP

                  sysDOS_Time_To_UTC PROC
;;;561    
;;;562    UINT32 sysDOS_Time_To_UTC(DateTime_T ltime)
0005d0  e92d40f0          PUSH     {r4-r7,lr}
;;;563    {
;;;564        int     i, leap_year_cnt;
;;;565        UINT32  utc;
;;;566    
;;;567        if ((ltime.mon < 1) || (ltime.mon > 12) || (ltime.day < 1) || (ltime.day > 31) ||
0005d4  e59d5014          LDR      r5,[sp,#0x14]
0005d8  e59d6018          LDR      r6,[sp,#0x18]
0005dc  e2414001          SUB      r4,r1,#1
0005e0  e354000c          CMP      r4,#0xc
0005e4  2a000007          BCS      |L1.1544|
0005e8  e3520000          CMP      r2,#0
0005ec  0a000005          BEQ      |L1.1544|
0005f0  e352001f          CMP      r2,#0x1f
;;;568            (ltime.hour > 23) || (ltime.min > 59) || (ltime.sec > 59))
0005f4  93530017          CMPLS    r3,#0x17
0005f8  8a000002          BHI      |L1.1544|
0005fc  e355003b          CMP      r5,#0x3b
000600  9356003b          CMPLS    r6,#0x3b
000604  9a000001          BLS      |L1.1552|
                  |L1.1544|
;;;569        {
;;;570            //_debug_msg("DOS_Time_To_UTC - illegal time!! %d-%d-%d %d:%d:%d\n", year, month, day, hour, minute, second);
;;;571            return 1;
000608  e3a00001          MOV      r0,#1
;;;572        }
;;;573    
;;;574        ltime.year = ltime.year - 1970;     /* DOS is 1980 started, UTC is 1970 started */
;;;575    
;;;576        leap_year_cnt = (ltime.year + 1) / 4;
;;;577    
;;;578        utc = ltime.year * SECONDS_365_DAY + leap_year_cnt * SECONDS_PER_DAY;
;;;579    
;;;580        if ((ltime.year + 2) % 4 == 0)
;;;581            month_seconds[1] = 29 * SECONDS_PER_DAY;    /* leap year */
;;;582        else
;;;583            month_seconds[1] = 28 * SECONDS_PER_DAY;    /* non-leap year */
;;;584    
;;;585        for (i = 0; i < ltime.mon - 1; i++)
;;;586            utc += month_seconds[i];
;;;587    
;;;588        utc += (ltime.day - 1) * SECONDS_PER_DAY;
;;;589    
;;;590        utc += ltime.hour * SECONDS_PER_HOUR + ltime.min * 60 + ltime.sec;
;;;591    
;;;592        return utc;
;;;593    }
00060c  e8bd80f0          POP      {r4-r7,pc}
                  |L1.1552|
000610  e2400c07          SUB      r0,r0,#0x700          ;571
000614  e24000b2          SUB      r0,r0,#0xb2           ;571
000618  e59fc1e8          LDR      r12,|L1.2056|
00061c  e2801001          ADD      r1,r0,#1              ;576
000620  e00c0c90          MUL      r12,r0,r12            ;578
000624  e59f71e0          LDR      r7,|L1.2060|
000628  e1a01121          LSR      r1,r1,#2              ;576
00062c  e0010197          MUL      r1,r7,r1              ;578
000630  e2800002          ADD      r0,r0,#2              ;578
000634  e3100003          TST      r0,#3                 ;580
000638  e08c1381          ADD      r1,r12,r1,LSL #7      ;578
00063c  e59fc1cc          LDR      r12,|L1.2064|
000640  059f01cc          LDREQ    r0,|L1.2068|
000644  159f01cc          LDRNE    r0,|L1.2072|
000648  e58c0004          STR      r0,[r12,#4]           ;583  ; month_seconds
00064c  e3a00000          MOV      r0,#0                 ;585
                  |L1.1616|
000650  e1540000          CMP      r4,r0                 ;585
000654  879c7100          LDRHI    r7,[r12,r0,LSL #2]    ;586
000658  82800001          ADDHI    r0,r0,#1              ;586
00065c  80811007          ADDHI    r1,r1,r7              ;586
000660  8afffffa          BHI      |L1.1616|
000664  e59f01a0          LDR      r0,|L1.2060|
000668  e0000092          MUL      r0,r2,r0              ;588
00066c  e0652205          RSB      r2,r5,r5,LSL #4       ;590
000670  e0810380          ADD      r0,r1,r0,LSL #7       ;588
000674  e3a01ee1          MOV      r1,#0xe10             ;590
000678  e0010193          MUL      r1,r3,r1              ;590
00067c  e2400905          SUB      r0,r0,#0x14000        ;590
000680  e0811102          ADD      r1,r1,r2,LSL #2       ;590
000684  e0811006          ADD      r1,r1,r6              ;590
000688  e2400d46          SUB      r0,r0,#0x1180         ;590
00068c  e0800001          ADD      r0,r0,r1              ;590
000690  e8bd80f0          POP      {r4-r7,pc}
;;;594    
                          ENDP

                  sysUTC_To_DOS_Time PROC
;;;595    
;;;596    void  sysUTC_To_DOS_Time(UINT32 utc, DateTime_T *dos_tm)
000694  e92d4010          PUSH     {r4,lr}
;;;597    {
000698  e1a04001          MOV      r4,r1
;;;598        int     the_year = 1970;
00069c  e59f1178          LDR      r1,|L1.2076|
;;;599        int     i, seconds;
;;;600    
;;;601        while (1)
;;;602        {
;;;603            if (the_year % 4 == 0)
;;;604                seconds = SECONDS_366_DAY;
0006a0  e59f3178          LDR      r3,|L1.2080|
;;;605            else
;;;606                seconds = SECONDS_365_DAY;
0006a4  e59fc15c          LDR      r12,|L1.2056|
                  |L1.1704|
0006a8  e3110003          TST      r1,#3                 ;603
0006ac  01a02003          MOVEQ    r2,r3                 ;604
0006b0  11a0200c          MOVNE    r2,r12
;;;607            if (utc >= seconds)
0006b4  e1500002          CMP      r0,r2
;;;608            {
;;;609                utc -= seconds;
0006b8  20400002          SUBCS    r0,r0,r2
0006bc  22811001          ADDCS    r1,r1,#1
0006c0  2afffff8          BCS      |L1.1704|
;;;610                the_year++;
;;;611            }
;;;612            else
;;;613                break;
;;;614        }
;;;615    
;;;616        dos_tm->year = the_year;
;;;617    
;;;618        if (the_year % 4 == 0)
0006c4  e3110003          TST      r1,#3
0006c8  e5841000          STR      r1,[r4,#0]            ;616
;;;619            month_seconds[1] = 29 * SECONDS_PER_DAY;
0006cc  e59f313c          LDR      r3,|L1.2064|
0006d0  059f113c          LDREQ    r1,|L1.2068|
;;;620        else
;;;621            month_seconds[1] = 28 * SECONDS_PER_DAY;
0006d4  159f113c          LDRNE    r1,|L1.2072|
0006d8  e5831004          STR      r1,[r3,#4]  ; month_seconds
;;;622    
;;;623        dos_tm->mon = 1;
0006dc  e3a01001          MOV      r1,#1
0006e0  e5841004          STR      r1,[r4,#4]
;;;624        for (i = 0; i < 11; i++)
0006e4  e3a01000          MOV      r1,#0
                  |L1.1768|
;;;625        {
;;;626            if (utc >= month_seconds[i])
0006e8  e7932101          LDR      r2,[r3,r1,LSL #2]
0006ec  e1520000          CMP      r2,r0
0006f0  8a000006          BHI      |L1.1808|
;;;627            {
;;;628                utc -= month_seconds[i];
0006f4  e0400002          SUB      r0,r0,r2
;;;629                dos_tm->mon++;
0006f8  e5942004          LDR      r2,[r4,#4]
0006fc  e2811001          ADD      r1,r1,#1
000700  e2822001          ADD      r2,r2,#1
000704  e351000b          CMP      r1,#0xb               ;624
000708  e5842004          STR      r2,[r4,#4]            ;624
00070c  bafffff5          BLT      |L1.1768|
                  |L1.1808|
;;;630            }
;;;631            else
;;;632                break;
;;;633        }
;;;634    
;;;635        dos_tm->day = 1 + (utc / SECONDS_PER_DAY);
000710  e59f110c          LDR      r1,|L1.2084|
000714  ebfffffe          BL       __aeabi_uidivmod
000718  e2800001          ADD      r0,r0,#1
00071c  e5840008          STR      r0,[r4,#8]
;;;636        utc %= SECONDS_PER_DAY;
000720  e1a00001          MOV      r0,r1
;;;637    
;;;638        dos_tm->hour = utc / SECONDS_PER_HOUR;
000724  e3a01ee1          MOV      r1,#0xe10
000728  ebfffffe          BL       __aeabi_uidivmod
00072c  e584000c          STR      r0,[r4,#0xc]
;;;639        utc %= SECONDS_PER_HOUR;
000730  e1a00001          MOV      r0,r1
;;;640    
;;;641        dos_tm->min = utc / 60;
000734  e3a0103c          MOV      r1,#0x3c
000738  ebfffffe          BL       __aeabi_uidivmod
;;;642        dos_tm->sec = utc % 60;
00073c  e5840010          STR      r0,[r4,#0x10]
000740  e5841014          STR      r1,[r4,#0x14]
;;;643    }
000744  e8bd8010          POP      {r4,pc}
;;;644    
                          ENDP

                  sysSetLocalTime PROC
;;;645    
;;;646    void sysSetLocalTime(DateTime_T ltime)
000748  e92d407c          PUSH     {r2-r6,lr}
;;;647    {
;;;648        _sys_ReferenceTime_Clock = _sys_uTimer0Count;
00074c  e59f40a4          LDR      r4,|L1.2040|
000750  e59d5018          LDR      r5,[sp,#0x18]
000754  e59dc01c          LDR      r12,[sp,#0x1c]
000758  e594600c          LDR      r6,[r4,#0xc]  ; _sys_uTimer0Count
00075c  e584601c          STR      r6,[r4,#0x1c]  ; _sys_ReferenceTime_Clock
000760  e88d1020          STM      sp,{r5,r12}
;;;649        _sys_ReferenceTime_UTC = sysDOS_Time_To_UTC(ltime);
000764  ebfffffe          BL       sysDOS_Time_To_UTC
000768  e584002c          STR      r0,[r4,#0x2c]  ; _sys_ReferenceTime_UTC
;;;650    }
00076c  e8bd807c          POP      {r2-r6,pc}
;;;651    
                          ENDP

                  sysGetCurrentTime PROC
;;;652    void sysGetCurrentTime(DateTime_T *curTime)
000770  e92d4070          PUSH     {r4-r6,lr}
;;;653    {
;;;654        UINT32 clock, utc_time;
;;;655    
;;;656        clock = _sys_uTimer0Count;
000774  e59f407c          LDR      r4,|L1.2040|
000778  e1a05000          MOV      r5,r0                 ;653
00077c  e594000c          LDR      r0,[r4,#0xc]  ; _sys_uTimer0Count
;;;657        utc_time = _sys_ReferenceTime_UTC + (clock - _sys_ReferenceTime_Clock) / _sys_uTimer0TickPerSecond;
000780  e594101c          LDR      r1,[r4,#0x1c]  ; _sys_ReferenceTime_Clock
000784  e0400001          SUB      r0,r0,r1
000788  e5941028          LDR      r1,[r4,#0x28]  ; _sys_uTimer0TickPerSecond
00078c  ebfffffe          BL       __aeabi_uidivmod
000790  e594102c          LDR      r1,[r4,#0x2c]  ; _sys_ReferenceTime_UTC
000794  e0800001          ADD      r0,r0,r1
;;;658    
;;;659        sysUTC_To_DOS_Time(utc_time, curTime);
000798  e1a01005          MOV      r1,r5
00079c  e8bd4070          POP      {r4-r6,lr}
0007a0  eafffffe          B        sysUTC_To_DOS_Time
;;;660    }
;;;661    
                          ENDP

                  sysDelay PROC
;;;670     */
;;;671    void sysDelay(UINT32 uTicks)
0007a4  e92d4038          PUSH     {r3-r5,lr}
;;;672    {
0007a8  e1a04000          MOV      r4,r0
;;;673        UINT32 volatile btime;
;;;674    
;;;675        if(!_sys_bIsTimer0Initial)
0007ac  e59f0044          LDR      r0,|L1.2040|
0007b0  e5d00002          LDRB     r0,[r0,#2]  ; _sys_bIsTimer0Initial
0007b4  e3500000          CMP      r0,#0
0007b8  1a000003          BNE      |L1.1996|
;;;676        {
;;;677            sysStartTimer(TIMER0, 100, PERIODIC_MODE);
0007bc  e3a02001          MOV      r2,#1
0007c0  e3a01064          MOV      r1,#0x64
0007c4  e3a00000          MOV      r0,#0
0007c8  ebfffffe          BL       sysStartTimer
                  |L1.1996|
;;;678        }
;;;679    
;;;680        btime = sysGetTicks(TIMER0);
0007cc  e3a00000          MOV      r0,#0
0007d0  ebfffffe          BL       sysGetTicks
0007d4  e58d0000          STR      r0,[sp,#0]
                  |L1.2008|
;;;681        while(1)
;;;682        {
;;;683            if((sysGetTicks(TIMER0) - btime) > uTicks)
0007d8  e3a00000          MOV      r0,#0
0007dc  ebfffffe          BL       sysGetTicks
0007e0  e59d1000          LDR      r1,[sp,#0]
0007e4  e0400001          SUB      r0,r0,r1
0007e8  e1500004          CMP      r0,r4
0007ec  9afffff9          BLS      |L1.2008|
;;;684            {
;;;685                break;
;;;686            }
;;;687        }
;;;688    }
0007f0  e8bd8038          POP      {r3-r5,pc}
;;;689    
                          ENDP

                  |L1.2036|
                          DCD      0xb8001000
                  |L1.2040|
                          DCD      ||.data||
                  |L1.2044|
                          DCD      ||.bss||
                  |L1.2048|
                          DCD      ||.bss||+0xa0
                  |L1.2052|
                          DCD      0xb8001800
                  |L1.2056|
                          DCD      0x01e13380
                  |L1.2060|
                          DCD      0x000002a3
                  |L1.2064|
                          DCD      ||.data||+0x30
                  |L1.2068|
                          DCD      0x00263b80
                  |L1.2072|
                          DCD      0x0024ea00
                  |L1.2076|
                          DCD      0x000007b2
                  |L1.2080|
                          DCD      0x01e28500
                  |L1.2084|
                          DCD      0x00015180

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        160
                  tTime1Event
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsSetTime0Event
000000  00                DCB      0x00
                  _sys_bIsSetTime1Event
000001  00                DCB      0x00
                  _sys_bIsTimer0Initial
000002  0000              DCB      0x00,0x00
                  _sys_uTimer0ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer1ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer0Count
                          DCD      0x00000000
                  _sys_uTimer1Count
                          DCD      0x00000000
                  _sys_uTime0EventCount
                          DCD      0x00000000
                  _sys_uTime1EventCount
                          DCD      0x00000000
                  _sys_ReferenceTime_Clock
                          DCD      0x00000000
                  _sys_pvOldTimer0Vect
                          DCD      0x00000000
                  _sys_pvOldTimer1Vect
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_ReferenceTime_UTC
                          DCD      0x00000000
                  month_seconds
                          DCD      0x0028de80
                          DCD      0x0024ea00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
