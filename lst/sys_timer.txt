; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys_timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_timer.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -D__UVISION_VERSION=524 --omf_browse=.\obj\sys_timer.crf Driver\Source\sys_timer.c]
                          ARM

                          AREA ||i.sysClearTimerEvent||, CODE, READONLY, ALIGN=2

                  sysClearTimerEvent PROC
;;;528     */
;;;529    void sysClearTimerEvent(INT32 nTimeNo, UINT32 uTimeEventNo)
000000  e3500000          CMP      r0,#0
;;;530    {
;;;531        switch (nTimeNo)
000004  0a000002          BEQ      |L1.20|
000008  e3500001          CMP      r0,#1
00000c  1a000024          BNE      |L1.164|
000010  ea000011          B        |L1.92|
                  |L1.20|
;;;532        {
;;;533            case TIMER0:
000014  e1a00000          MOV      r0,r0
;;;534                tTime0Event[uTimeEventNo-1].active = FALSE;
000018  e3a02000          MOV      r2,#0
00001c  e2413001          SUB      r3,r1,#1
000020  e59fc08c          LDR      r12,|L1.180|
000024  e78c2203          STR      r2,[r12,r3,LSL #4]
;;;535                _sys_uTime0EventCount--;
000028  e59f2088          LDR      r2,|L1.184|
00002c  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime0EventCount
000030  e2422001          SUB      r2,r2,#1
000034  e59f307c          LDR      r3,|L1.184|
000038  e5832000          STR      r2,[r3,#0]  ; _sys_uTime0EventCount
;;;536                if (_sys_uTime0EventCount == 0)
00003c  e2832000          ADD      r2,r3,#0
000040  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime0EventCount
000044  e3520000          CMP      r2,#0
000048  1a000002          BNE      |L1.88|
;;;537                    _sys_bIsSetTime0Event = FALSE;
00004c  e3a02000          MOV      r2,#0
000050  e59f3064          LDR      r3,|L1.188|
000054  e5c32000          STRB     r2,[r3,#0]  ; _sys_bIsSetTime0Event
                  |L1.88|
;;;538                break;
000058  ea000013          B        |L1.172|
                  |L1.92|
;;;539    
;;;540            case TIMER1:
00005c  e1a00000          MOV      r0,r0
;;;541                tTime1Event[uTimeEventNo-1].active = FALSE;
000060  e3a02000          MOV      r2,#0
000064  e2413001          SUB      r3,r1,#1
000068  e59fc050          LDR      r12,|L1.192|
00006c  e78c2203          STR      r2,[r12,r3,LSL #4]
;;;542                _sys_uTime1EventCount--;
000070  e59f204c          LDR      r2,|L1.196|
000074  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime1EventCount
000078  e2422001          SUB      r2,r2,#1
00007c  e59f3040          LDR      r3,|L1.196|
000080  e5832000          STR      r2,[r3,#0]  ; _sys_uTime1EventCount
;;;543                if (_sys_uTime1EventCount == 0)
000084  e2832000          ADD      r2,r3,#0
000088  e5922000          LDR      r2,[r2,#0]  ; _sys_uTime1EventCount
00008c  e3520000          CMP      r2,#0
000090  1a000002          BNE      |L1.160|
;;;544                    _sys_bIsSetTime1Event = FALSE;
000094  e3a02000          MOV      r2,#0
000098  e59f3028          LDR      r3,|L1.200|
00009c  e5c32000          STRB     r2,[r3,#0]  ; _sys_bIsSetTime1Event
                  |L1.160|
;;;545                break;
0000a0  ea000001          B        |L1.172|
                  |L1.164|
;;;546    
;;;547            default:
0000a4  e1a00000          MOV      r0,r0
0000a8  e1a00000          MOV      r0,r0                 ;531
                  |L1.172|
0000ac  e1a00000          MOV      r0,r0                 ;538
;;;548                ;
;;;549        }
;;;550    }
0000b0  e12fff1e          BX       lr
;;;551    
                          ENDP

                  |L1.180|
                          DCD      tTime0Event
                  |L1.184|
                          DCD      _sys_uTime0EventCount
                  |L1.188|
                          DCD      _sys_bIsSetTime0Event
                  |L1.192|
                          DCD      tTime1Event
                  |L1.196|
                          DCD      _sys_uTime1EventCount
                  |L1.200|
                          DCD      _sys_bIsSetTime1Event

                          AREA ||i.sysClearWatchDogTimerCount||, CODE, READONLY, ALIGN=2

                  sysClearWatchDogTimerCount PROC
;;;342     */
;;;343    void sysClearWatchDogTimerCount(void)
000000  e92d4008          PUSH     {r3,lr}
;;;344    {
;;;345        UINT32 volatile _mWtcr;
;;;346    
;;;347        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f0020          LDR      r0,|L2.44|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e58d0000          STR      r0,[sp,#0]
;;;348        _mWtcr |= 0x01;             /* write WTR */
000010  e59d0000          LDR      r0,[sp,#0]
000014  e3800001          ORR      r0,r0,#1
000018  e58d0000          STR      r0,[sp,#0]
;;;349        outpw(REG_WDT_CTL, _mWtcr);
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e59f1004          LDR      r1,|L2.44|
000024  e5810000          STR      r0,[r1,#0]
;;;350    }
000028  e8bd8008          POP      {r3,pc}
;;;351    
                          ENDP

                  |L2.44|
                          DCD      0xb8001800

                          AREA ||i.sysClearWatchDogTimerInterruptStatus||, CODE, READONLY, ALIGN=2

                  sysClearWatchDogTimerInterruptStatus PROC
;;;356     */
;;;357    void sysClearWatchDogTimerInterruptStatus(void)
000000  e92d4008          PUSH     {r3,lr}
;;;358    {
;;;359        UINT32 volatile _mWtcr;
;;;360    
;;;361        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f0020          LDR      r0,|L3.44|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e58d0000          STR      r0,[sp,#0]
;;;362        _mWtcr |= 0x08;       /* clear WTIF */
000010  e59d0000          LDR      r0,[sp,#0]
000014  e3800008          ORR      r0,r0,#8
000018  e58d0000          STR      r0,[sp,#0]
;;;363        outpw(REG_WDT_CTL, _mWtcr);
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e59f1004          LDR      r1,|L3.44|
000024  e5810000          STR      r0,[r1,#0]
;;;364    }
000028  e8bd8008          POP      {r3,pc}
;;;365    
                          ENDP

                  |L3.44|
                          DCD      0xb8001800

                          AREA ||i.sysDOS_Time_To_UTC||, CODE, READONLY, ALIGN=2

                  sysDOS_Time_To_UTC PROC
;;;561    
;;;562    UINT32 sysDOS_Time_To_UTC(DateTime_T ltime)
000000  e92d000f          PUSH     {r0-r3}
;;;563    {
;;;564        int     i, leap_year_cnt;
;;;565        UINT32  utc;
;;;566    
;;;567        if ((ltime.mon < 1) || (ltime.mon > 12) || (ltime.day < 1) || (ltime.day > 31) ||
000004  e59d0004          LDR      r0,[sp,#4]
000008  e3500000          CMP      r0,#0
00000c  0a000011          BEQ      |L4.88|
000010  e59d0004          LDR      r0,[sp,#4]
000014  e350000c          CMP      r0,#0xc
000018  8a00000e          BHI      |L4.88|
00001c  e59d0008          LDR      r0,[sp,#8]
000020  e3500000          CMP      r0,#0
000024  0a00000b          BEQ      |L4.88|
000028  e59d0008          LDR      r0,[sp,#8]
00002c  e350001f          CMP      r0,#0x1f
000030  8a000008          BHI      |L4.88|
;;;568            (ltime.hour > 23) || (ltime.min > 59) || (ltime.sec > 59))
000034  e59d000c          LDR      r0,[sp,#0xc]
000038  e3500017          CMP      r0,#0x17
00003c  8a000005          BHI      |L4.88|
000040  e59d0010          LDR      r0,[sp,#0x10]
000044  e350003b          CMP      r0,#0x3b
000048  8a000002          BHI      |L4.88|
00004c  e59d0014          LDR      r0,[sp,#0x14]
000050  e350003b          CMP      r0,#0x3b
000054  9a000002          BLS      |L4.100|
                  |L4.88|
;;;569        {
;;;570            //_debug_msg("DOS_Time_To_UTC - illegal time!! %d-%d-%d %d:%d:%d\n", year, month, day, hour, minute, second);
;;;571            return 1;
000058  e3a00001          MOV      r0,#1
                  |L4.92|
00005c  e28dd010          ADD      sp,sp,#0x10
;;;572        }
;;;573    
;;;574        ltime.year = ltime.year - 1970;     /* DOS is 1980 started, UTC is 1970 started */
;;;575    
;;;576        leap_year_cnt = (ltime.year + 1) / 4;
;;;577    
;;;578        utc = ltime.year * SECONDS_365_DAY + leap_year_cnt * SECONDS_PER_DAY;
;;;579    
;;;580        if ((ltime.year + 2) % 4 == 0)
;;;581            month_seconds[1] = 29 * SECONDS_PER_DAY;    /* leap year */
;;;582        else
;;;583            month_seconds[1] = 28 * SECONDS_PER_DAY;    /* non-leap year */
;;;584    
;;;585        for (i = 0; i < ltime.mon - 1; i++)
;;;586            utc += month_seconds[i];
;;;587    
;;;588        utc += (ltime.day - 1) * SECONDS_PER_DAY;
;;;589    
;;;590        utc += ltime.hour * SECONDS_PER_HOUR + ltime.min * 60 + ltime.sec;
;;;591    
;;;592        return utc;
;;;593    }
000060  e12fff1e          BX       lr
                  |L4.100|
000064  e59d0000          LDR      r0,[sp,#0]            ;574
000068  e2400c07          SUB      r0,r0,#0x700          ;574
00006c  e24000b2          SUB      r0,r0,#0xb2           ;574
000070  e58d0000          STR      r0,[sp,#0]            ;574
000074  e59d0000          LDR      r0,[sp,#0]            ;576
000078  e2800001          ADD      r0,r0,#1              ;576
00007c  e1a03120          LSR      r3,r0,#2              ;576
000080  e59d0000          LDR      r0,[sp,#0]            ;578
000084  e59fc0a4          LDR      r12,|L4.304|
000088  e000009c          MUL      r0,r12,r0             ;578
00008c  e59fc0a0          LDR      r12,|L4.308|
000090  e00c0c93          MUL      r12,r3,r12            ;578
000094  e080138c          ADD      r1,r0,r12,LSL #7      ;578
000098  e59d0000          LDR      r0,[sp,#0]            ;580
00009c  e2800002          ADD      r0,r0,#2              ;580
0000a0  e2000003          AND      r0,r0,#3              ;580
0000a4  e3500000          CMP      r0,#0                 ;580
0000a8  1a000003          BNE      |L4.188|
0000ac  e59f0084          LDR      r0,|L4.312|
0000b0  e59fc084          LDR      r12,|L4.316|
0000b4  e58c0004          STR      r0,[r12,#4]           ;581  ; month_seconds
0000b8  ea000002          B        |L4.200|
                  |L4.188|
0000bc  e59f007c          LDR      r0,|L4.320|
0000c0  e59fc074          LDR      r12,|L4.316|
0000c4  e58c0004          STR      r0,[r12,#4]           ;583  ; month_seconds
                  |L4.200|
0000c8  e3a02000          MOV      r2,#0                 ;585
0000cc  ea000003          B        |L4.224|
                  |L4.208|
0000d0  e59f0064          LDR      r0,|L4.316|
0000d4  e7900102          LDR      r0,[r0,r2,LSL #2]     ;586
0000d8  e0811000          ADD      r1,r1,r0              ;586
0000dc  e2822001          ADD      r2,r2,#1              ;585
                  |L4.224|
0000e0  e59d0004          LDR      r0,[sp,#4]            ;585
0000e4  e2400001          SUB      r0,r0,#1              ;585
0000e8  e1500002          CMP      r0,r2                 ;585
0000ec  8afffff7          BHI      |L4.208|
0000f0  e59d0008          LDR      r0,[sp,#8]            ;588
0000f4  e2400001          SUB      r0,r0,#1              ;588
0000f8  e59fc034          LDR      r12,|L4.308|
0000fc  e000009c          MUL      r0,r12,r0             ;588
000100  e0811380          ADD      r1,r1,r0,LSL #7       ;588
000104  e3a0cee1          MOV      r12,#0xe10            ;590
000108  e59d000c          LDR      r0,[sp,#0xc]          ;590
00010c  e000009c          MUL      r0,r12,r0             ;590
000110  e59dc010          LDR      r12,[sp,#0x10]        ;590
000114  e06cc20c          RSB      r12,r12,r12,LSL #4    ;590
000118  e080010c          ADD      r0,r0,r12,LSL #2      ;590
00011c  e59dc014          LDR      r12,[sp,#0x14]        ;590
000120  e080000c          ADD      r0,r0,r12             ;590
000124  e0811000          ADD      r1,r1,r0              ;590
000128  e1a00001          MOV      r0,r1                 ;592
00012c  eaffffca          B        |L4.92|
;;;594    
                          ENDP

                  |L4.304|
                          DCD      0x01e13380
                  |L4.308|
                          DCD      0x000002a3
                  |L4.312|
                          DCD      0x00263b80
                  |L4.316|
                          DCD      month_seconds
                  |L4.320|
                          DCD      0x0024ea00

                          AREA ||i.sysDelay||, CODE, READONLY, ALIGN=2

                  sysDelay PROC
;;;670     */
;;;671    void sysDelay(UINT32 uTicks)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;672    {
000004  e1a04000          MOV      r4,r0
;;;673        UINT32 volatile btime;
;;;674    
;;;675        if(!_sys_bIsTimer0Initial)
000008  e59f0050          LDR      r0,|L5.96|
00000c  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsTimer0Initial
000010  e3500000          CMP      r0,#0
000014  1a000003          BNE      |L5.40|
;;;676        {
;;;677            sysStartTimer(TIMER0, 100, PERIODIC_MODE);
000018  e3a02001          MOV      r2,#1
00001c  e3a01064          MOV      r1,#0x64
000020  e3a00000          MOV      r0,#0
000024  ebfffffe          BL       sysStartTimer
                  |L5.40|
;;;678        }
;;;679    
;;;680        btime = sysGetTicks(TIMER0);
000028  e3a00000          MOV      r0,#0
00002c  ebfffffe          BL       sysGetTicks
000030  e58d0000          STR      r0,[sp,#0]
;;;681        while(1)
000034  ea000006          B        |L5.84|
                  |L5.56|
;;;682        {
;;;683            if((sysGetTicks(TIMER0) - btime) > uTicks)
000038  e3a00000          MOV      r0,#0
00003c  ebfffffe          BL       sysGetTicks
000040  e59d1000          LDR      r1,[sp,#0]
000044  e0400001          SUB      r0,r0,r1
000048  e1500004          CMP      r0,r4
00004c  9a000000          BLS      |L5.84|
;;;684            {
;;;685                break;
000050  ea000000          B        |L5.88|
                  |L5.84|
000054  eafffff7          B        |L5.56|
                  |L5.88|
000058  e1a00000          MOV      r0,r0
;;;686            }
;;;687        }
;;;688    }
00005c  e8bd8038          POP      {r3-r5,pc}
;;;689    
                          ENDP

                  |L5.96|
                          DCD      _sys_bIsTimer0Initial

                          AREA ||i.sysDisableWatchDogTimer||, CODE, READONLY, ALIGN=2

                  sysDisableWatchDogTimer PROC
;;;370     */
;;;371    void sysDisableWatchDogTimer(void)
000000  e92d4008          PUSH     {r3,lr}
;;;372    {
;;;373        UINT32 volatile _mWtcr;
;;;374    
;;;375        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f0020          LDR      r0,|L6.44|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e58d0000          STR      r0,[sp,#0]
;;;376        _mWtcr &= 0xFFFFFF7F;
000010  e59d0000          LDR      r0,[sp,#0]
000014  e3c00080          BIC      r0,r0,#0x80
000018  e58d0000          STR      r0,[sp,#0]
;;;377        outpw(REG_WDT_CTL, _mWtcr);
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e59f1004          LDR      r1,|L6.44|
000024  e5810000          STR      r0,[r1,#0]
;;;378    }
000028  e8bd8008          POP      {r3,pc}
;;;379    
                          ENDP

                  |L6.44|
                          DCD      0xb8001800

                          AREA ||i.sysDisableWatchDogTimerReset||, CODE, READONLY, ALIGN=2

                  sysDisableWatchDogTimerReset PROC
;;;384     */
;;;385    void sysDisableWatchDogTimerReset(void)
000000  e92d4008          PUSH     {r3,lr}
;;;386    {
;;;387        UINT32 volatile _mWtcr;
;;;388    
;;;389        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f0020          LDR      r0,|L7.44|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e58d0000          STR      r0,[sp,#0]
;;;390        _mWtcr &= 0xFFFFFFFD;
000010  e59d0000          LDR      r0,[sp,#0]
000014  e3c00002          BIC      r0,r0,#2
000018  e58d0000          STR      r0,[sp,#0]
;;;391        outpw(REG_WDT_CTL, _mWtcr);
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e59f1004          LDR      r1,|L7.44|
000024  e5810000          STR      r0,[r1,#0]
;;;392    }
000028  e8bd8008          POP      {r3,pc}
;;;393    
                          ENDP

                  |L7.44|
                          DCD      0xb8001800

                          AREA ||i.sysEnableWatchDogTimer||, CODE, READONLY, ALIGN=2

                  sysEnableWatchDogTimer PROC
;;;398     */
;;;399    void sysEnableWatchDogTimer(void)
000000  e92d4008          PUSH     {r3,lr}
;;;400    {
;;;401        UINT32 volatile _mWtcr;
;;;402    
;;;403        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f0020          LDR      r0,|L8.44|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e58d0000          STR      r0,[sp,#0]
;;;404        _mWtcr |= 0x80;
000010  e59d0000          LDR      r0,[sp,#0]
000014  e3800080          ORR      r0,r0,#0x80
000018  e58d0000          STR      r0,[sp,#0]
;;;405        outpw(REG_WDT_CTL, _mWtcr);
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e59f1004          LDR      r1,|L8.44|
000024  e5810000          STR      r0,[r1,#0]
;;;406    }
000028  e8bd8008          POP      {r3,pc}
;;;407    
                          ENDP

                  |L8.44|
                          DCD      0xb8001800

                          AREA ||i.sysEnableWatchDogTimerReset||, CODE, READONLY, ALIGN=2

                  sysEnableWatchDogTimerReset PROC
;;;412     */
;;;413    void sysEnableWatchDogTimerReset(void)
000000  e92d4008          PUSH     {r3,lr}
;;;414    {
;;;415        UINT32 volatile _mWtcr;
;;;416    
;;;417        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f0020          LDR      r0,|L9.44|
000008  e5900000          LDR      r0,[r0,#0]
00000c  e58d0000          STR      r0,[sp,#0]
;;;418        _mWtcr |= 0x02;
000010  e59d0000          LDR      r0,[sp,#0]
000014  e3800002          ORR      r0,r0,#2
000018  e58d0000          STR      r0,[sp,#0]
;;;419        outpw(REG_WDT_CTL, _mWtcr);
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e59f1004          LDR      r1,|L9.44|
000024  e5810000          STR      r0,[r1,#0]
;;;420    }
000028  e8bd8008          POP      {r3,pc}
;;;421    
                          ENDP

                  |L9.44|
                          DCD      0xb8001800

                          AREA ||i.sysGetCurrentTime||, CODE, READONLY, ALIGN=2

                  sysGetCurrentTime PROC
;;;651    
;;;652    void sysGetCurrentTime(DateTime_T *curTime)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;653    {
000004  e1a04000          MOV      r4,r0
;;;654        UINT32 clock, utc_time;
;;;655    
;;;656        clock = _sys_uTimer0Count;
000008  e59f0034          LDR      r0,|L10.68|
00000c  e5905000          LDR      r5,[r0,#0]  ; _sys_uTimer0Count
;;;657        utc_time = _sys_ReferenceTime_UTC + (clock - _sys_ReferenceTime_Clock) / _sys_uTimer0TickPerSecond;
000010  e59f1030          LDR      r1,|L10.72|
000014  e5911000          LDR      r1,[r1,#0]  ; _sys_ReferenceTime_Clock
000018  e0450001          SUB      r0,r5,r1
00001c  e59f1028          LDR      r1,|L10.76|
000020  e5911000          LDR      r1,[r1,#0]  ; _sys_uTimer0TickPerSecond
000024  ebfffffe          BL       __aeabi_uidivmod
000028  e59f1020          LDR      r1,|L10.80|
00002c  e5911000          LDR      r1,[r1,#0]  ; _sys_ReferenceTime_UTC
000030  e0806001          ADD      r6,r0,r1
;;;658    
;;;659        sysUTC_To_DOS_Time(utc_time, curTime);
000034  e1a01004          MOV      r1,r4
000038  e1a00006          MOV      r0,r6
00003c  ebfffffe          BL       sysUTC_To_DOS_Time
;;;660    }
000040  e8bd8070          POP      {r4-r6,pc}
;;;661    
                          ENDP

                  |L10.68|
                          DCD      _sys_uTimer0Count
                  |L10.72|
                          DCD      _sys_ReferenceTime_Clock
                  |L10.76|
                          DCD      _sys_uTimer0TickPerSecond
                  |L10.80|
                          DCD      _sys_ReferenceTime_UTC

                          AREA ||i.sysGetTicks||, CODE, READONLY, ALIGN=2

                  sysGetTicks PROC
;;;140     */
;;;141    UINT32 sysGetTicks(INT32 nTimeNo)
000000  e1a01000          MOV      r1,r0
;;;142    {
;;;143        switch (nTimeNo)
000004  e3510000          CMP      r1,#0
000008  0a000002          BEQ      |L11.24|
00000c  e3510001          CMP      r1,#1
000010  1a000008          BNE      |L11.56|
000014  ea000003          B        |L11.40|
                  |L11.24|
;;;144        {
;;;145            case TIMER0:
000018  e1a00000          MOV      r0,r0
;;;146                return _sys_uTimer0Count;
00001c  e59f0028          LDR      r0,|L11.76|
000020  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
                  |L11.36|
;;;147    
;;;148            case TIMER1:
;;;149                return _sys_uTimer1Count;
;;;150    
;;;151            default:
;;;152                ;
;;;153        }
;;;154        return 0;
;;;155    }
000024  e12fff1e          BX       lr
                  |L11.40|
000028  e1a00000          MOV      r0,r0                 ;148
00002c  e59f001c          LDR      r0,|L11.80|
000030  e5900000          LDR      r0,[r0,#0]            ;149  ; _sys_uTimer1Count
000034  eafffffa          B        |L11.36|
                  |L11.56|
000038  e1a00000          MOV      r0,r0                 ;151
00003c  e1a00000          MOV      r0,r0                 ;143
000040  e1a00000          MOV      r0,r0                 ;143
000044  e3a00000          MOV      r0,#0                 ;154
000048  eafffff5          B        |L11.36|
;;;156    
                          ENDP

                  |L11.76|
                          DCD      _sys_uTimer0Count
                  |L11.80|
                          DCD      _sys_uTimer1Count

                          AREA ||i.sysInstallWatchDogTimerISR||, CODE, READONLY, ALIGN=2

                  sysInstallWatchDogTimerISR PROC
;;;430     */
;;;431    PVOID sysInstallWatchDogTimerISR(INT32 nIntTypeLevel, PVOID pvNewISR)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;432    {
000004  e1a05000          MOV      r5,r0
000008  e1a04001          MOV      r4,r1
;;;433        PVOID _mOldVect = NULL;
00000c  e3a06000          MOV      r6,#0
;;;434        UINT32 volatile _mWtcr;
;;;435    
;;;436        _mWtcr = inpw(REG_WDT_CTL);
000010  e59f0048          LDR      r0,|L12.96|
000014  e5900000          LDR      r0,[r0,#0]
000018  e58d0000          STR      r0,[sp,#0]
;;;437        _mWtcr |= 0x40;
00001c  e59d0000          LDR      r0,[sp,#0]
000020  e3800040          ORR      r0,r0,#0x40
000024  e58d0000          STR      r0,[sp,#0]
;;;438        outpw(REG_WDT_CTL, _mWtcr);
000028  e59d0000          LDR      r0,[sp,#0]
00002c  e59f102c          LDR      r1,|L12.96|
000030  e5810000          STR      r0,[r1,#0]
;;;439        _mOldVect = sysInstallISR(nIntTypeLevel, WDT_IRQn, pvNewISR);
000034  e1a02004          MOV      r2,r4
000038  e3a01001          MOV      r1,#1
00003c  e1a00005          MOV      r0,r5
000040  ebfffffe          BL       sysInstallISR
000044  e1a06000          MOV      r6,r0
;;;440        sysEnableInterrupt(WDT_IRQn);
000048  e3a00001          MOV      r0,#1
00004c  ebfffffe          BL       sysEnableInterrupt
;;;441        sysSetLocalInterrupt(ENABLE_IRQ);
000050  e3a0007f          MOV      r0,#0x7f
000054  ebfffffe          BL       sysSetLocalInterrupt
;;;442    
;;;443        return _mOldVect;
000058  e1a00006          MOV      r0,r6
;;;444    }
00005c  e8bd80f8          POP      {r3-r7,pc}
;;;445    
                          ENDP

                  |L12.96|
                          DCD      0xb8001800

                          AREA ||i.sysResetTicks||, CODE, READONLY, ALIGN=2

                  sysResetTicks PROC
;;;163     */
;;;164    INT32 sysResetTicks(INT32 nTimeNo)
000000  e1a01000          MOV      r1,r0
;;;165    {
;;;166        switch (nTimeNo)
000004  e3510000          CMP      r1,#0
000008  0a000002          BEQ      |L13.24|
00000c  e3510001          CMP      r1,#1
000010  1a00000a          BNE      |L13.64|
000014  ea000004          B        |L13.44|
                  |L13.24|
;;;167        {
;;;168            case TIMER0:
000018  e1a00000          MOV      r0,r0
;;;169                _sys_uTimer0Count = 0;
00001c  e3a00000          MOV      r0,#0
000020  e59f202c          LDR      r2,|L13.84|
000024  e5820000          STR      r0,[r2,#0]  ; _sys_uTimer0Count
;;;170                break;
000028  ea000006          B        |L13.72|
                  |L13.44|
;;;171    
;;;172            case TIMER1:
00002c  e1a00000          MOV      r0,r0
;;;173                _sys_uTimer1Count = 0;
000030  e3a00000          MOV      r0,#0
000034  e59f201c          LDR      r2,|L13.88|
000038  e5820000          STR      r0,[r2,#0]  ; _sys_uTimer1Count
;;;174                break;
00003c  ea000001          B        |L13.72|
                  |L13.64|
;;;175    
;;;176            default:
000040  e1a00000          MOV      r0,r0
000044  e1a00000          MOV      r0,r0                 ;166
                  |L13.72|
000048  e1a00000          MOV      r0,r0                 ;170
;;;177                ;
;;;178        }
;;;179        return 0;
00004c  e3a00000          MOV      r0,#0
;;;180    }
000050  e12fff1e          BX       lr
;;;181    
                          ENDP

                  |L13.84|
                          DCD      _sys_uTimer0Count
                  |L13.88|
                          DCD      _sys_uTimer1Count

                          AREA ||i.sysSetLocalTime||, CODE, READONLY, ALIGN=2

                  sysSetLocalTime PROC
;;;645    
;;;646    void sysSetLocalTime(DateTime_T ltime)
000000  e92d000f          PUSH     {r0-r3}
;;;647    {
000004  e92d400c          PUSH     {r2,r3,lr}
;;;648        _sys_ReferenceTime_Clock = _sys_uTimer0Count;
000008  e59f0030          LDR      r0,|L14.64|
00000c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
000010  e59f102c          LDR      r1,|L14.68|
000014  e5810000          STR      r0,[r1,#0]  ; _sys_ReferenceTime_Clock
;;;649        _sys_ReferenceTime_UTC = sysDOS_Time_To_UTC(ltime);
000018  e59d001c          LDR      r0,[sp,#0x1c]
00001c  e59d1020          LDR      r1,[sp,#0x20]
000020  e88d0003          STM      sp,{r0,r1}
000024  e28d300c          ADD      r3,sp,#0xc
000028  e893000f          LDM      r3,{r0-r3}
00002c  ebfffffe          BL       sysDOS_Time_To_UTC
000030  e59f1010          LDR      r1,|L14.72|
000034  e5810000          STR      r0,[r1,#0]  ; _sys_ReferenceTime_UTC
;;;650    }
000038  e28dd008          ADD      sp,sp,#8
00003c  e49df014          LDR      pc,[sp],#0x14
;;;651    
                          ENDP

                  |L14.64|
                          DCD      _sys_uTimer0Count
                  |L14.68|
                          DCD      _sys_ReferenceTime_Clock
                  |L14.72|
                          DCD      _sys_ReferenceTime_UTC

                          AREA ||i.sysSetTimerEvent||, CODE, READONLY, ALIGN=2

                  sysSetTimerEvent PROC
;;;472     */
;;;473    INT32 sysSetTimerEvent(INT32 nTimeNo, UINT32 uTimeTick, PVOID pvFun)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;474    {
000004  e1a03000          MOV      r3,r0
;;;475        int volatile i;
;;;476        int val=0;
000008  e3a00000          MOV      r0,#0
;;;477    
;;;478        switch (nTimeNo)
00000c  e3530000          CMP      r3,#0
000010  0a000002          BEQ      |L15.32|
000014  e3530001          CMP      r3,#1
000018  1a000058          BNE      |L15.384|
00001c  ea00002b          B        |L15.208|
                  |L15.32|
;;;479        {
;;;480            case TIMER0:
000020  e1a00000          MOV      r0,r0
;;;481                _sys_bIsSetTime0Event = TRUE;
000024  e3a0c001          MOV      r12,#1
000028  e59f4160          LDR      r4,|L15.400|
00002c  e5c4c000          STRB     r12,[r4,#0]  ; _sys_bIsSetTime0Event
;;;482                _sys_uTime0EventCount++;
000030  e59fc15c          LDR      r12,|L15.404|
000034  e59cc000          LDR      r12,[r12,#0]  ; _sys_uTime0EventCount
000038  e28cc001          ADD      r12,r12,#1
00003c  e59f4150          LDR      r4,|L15.404|
000040  e584c000          STR      r12,[r4,#0]  ; _sys_uTime0EventCount
;;;483                for (i=0; i<TimerEventCount; i++)
000044  e3a0c000          MOV      r12,#0
000048  e58dc000          STR      r12,[sp,#0]
00004c  ea00001a          B        |L15.188|
                  |L15.80|
;;;484                {
;;;485                    if (tTime0Event[i].active == FALSE)
000050  e59fc140          LDR      r12,|L15.408|
000054  e59d4000          LDR      r4,[sp,#0]
000058  e79cc204          LDR      r12,[r12,r4,LSL #4]
00005c  e35c0000          CMP      r12,#0
000060  1a000012          BNE      |L15.176|
;;;486                    {
;;;487                        tTime0Event[i].active = TRUE;
000064  e3a0c001          MOV      r12,#1
000068  e59f4128          LDR      r4,|L15.408|
00006c  e59d5000          LDR      r5,[sp,#0]
000070  e784c205          STR      r12,[r4,r5,LSL #4]
;;;488                        tTime0Event[i].initTick = uTimeTick;
000074  e284c000          ADD      r12,r4,#0
000078  e59d4000          LDR      r4,[sp,#0]
00007c  e08cc204          ADD      r12,r12,r4,LSL #4
000080  e58c1004          STR      r1,[r12,#4]
;;;489                        tTime0Event[i].curTick = uTimeTick;
000084  e59fc10c          LDR      r12,|L15.408|
000088  e59d4000          LDR      r4,[sp,#0]
00008c  e08cc204          ADD      r12,r12,r4,LSL #4
000090  e58c1008          STR      r1,[r12,#8]
;;;490                        tTime0Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
000094  e59fc0fc          LDR      r12,|L15.408|
000098  e59d4000          LDR      r4,[sp,#0]
00009c  e08cc204          ADD      r12,r12,r4,LSL #4
0000a0  e58c200c          STR      r2,[r12,#0xc]
;;;491                        val = i+1;
0000a4  e59dc000          LDR      r12,[sp,#0]
0000a8  e28c0001          ADD      r0,r12,#1
;;;492                        break;
0000ac  ea000005          B        |L15.200|
                  |L15.176|
0000b0  e59dc000          LDR      r12,[sp,#0]           ;483
0000b4  e28cc001          ADD      r12,r12,#1            ;483
0000b8  e58dc000          STR      r12,[sp,#0]           ;483
                  |L15.188|
0000bc  e59dc000          LDR      r12,[sp,#0]           ;483
0000c0  e35c000a          CMP      r12,#0xa              ;483
0000c4  baffffe1          BLT      |L15.80|
                  |L15.200|
0000c8  e1a00000          MOV      r0,r0
;;;493                    }
;;;494                }
;;;495                break;
0000cc  ea00002d          B        |L15.392|
                  |L15.208|
;;;496    
;;;497            case TIMER1:
0000d0  e1a00000          MOV      r0,r0
;;;498                _sys_bIsSetTime1Event = TRUE;
0000d4  e3a0c001          MOV      r12,#1
0000d8  e59f40bc          LDR      r4,|L15.412|
0000dc  e5c4c000          STRB     r12,[r4,#0]  ; _sys_bIsSetTime1Event
;;;499                _sys_uTime1EventCount++;
0000e0  e59fc0b8          LDR      r12,|L15.416|
0000e4  e59cc000          LDR      r12,[r12,#0]  ; _sys_uTime1EventCount
0000e8  e28cc001          ADD      r12,r12,#1
0000ec  e59f40ac          LDR      r4,|L15.416|
0000f0  e584c000          STR      r12,[r4,#0]  ; _sys_uTime1EventCount
;;;500                for (i=0; i<TimerEventCount; i++)
0000f4  e3a0c000          MOV      r12,#0
0000f8  e58dc000          STR      r12,[sp,#0]
0000fc  ea00001a          B        |L15.364|
                  |L15.256|
;;;501                {
;;;502                    if (tTime1Event[i].active == FALSE)
000100  e59fc09c          LDR      r12,|L15.420|
000104  e59d4000          LDR      r4,[sp,#0]
000108  e79cc204          LDR      r12,[r12,r4,LSL #4]
00010c  e35c0000          CMP      r12,#0
000110  1a000012          BNE      |L15.352|
;;;503                    {
;;;504                        tTime1Event[i].active = TRUE;
000114  e3a0c001          MOV      r12,#1
000118  e59f4084          LDR      r4,|L15.420|
00011c  e59d5000          LDR      r5,[sp,#0]
000120  e784c205          STR      r12,[r4,r5,LSL #4]
;;;505                        tTime1Event[i].initTick = uTimeTick;
000124  e284c000          ADD      r12,r4,#0
000128  e59d4000          LDR      r4,[sp,#0]
00012c  e08cc204          ADD      r12,r12,r4,LSL #4
000130  e58c1004          STR      r1,[r12,#4]
;;;506                        tTime1Event[i].curTick = uTimeTick;
000134  e59fc068          LDR      r12,|L15.420|
000138  e59d4000          LDR      r4,[sp,#0]
00013c  e08cc204          ADD      r12,r12,r4,LSL #4
000140  e58c1008          STR      r1,[r12,#8]
;;;507                        tTime1Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
000144  e59fc058          LDR      r12,|L15.420|
000148  e59d4000          LDR      r4,[sp,#0]
00014c  e08cc204          ADD      r12,r12,r4,LSL #4
000150  e58c200c          STR      r2,[r12,#0xc]
;;;508                        val = i+1;
000154  e59dc000          LDR      r12,[sp,#0]
000158  e28c0001          ADD      r0,r12,#1
;;;509                        break;
00015c  ea000005          B        |L15.376|
                  |L15.352|
000160  e59dc000          LDR      r12,[sp,#0]           ;500
000164  e28cc001          ADD      r12,r12,#1            ;500
000168  e58dc000          STR      r12,[sp,#0]           ;500
                  |L15.364|
00016c  e59dc000          LDR      r12,[sp,#0]           ;500
000170  e35c000a          CMP      r12,#0xa              ;500
000174  baffffe1          BLT      |L15.256|
                  |L15.376|
000178  e1a00000          MOV      r0,r0
;;;510                    }
;;;511                }
;;;512                break;
00017c  ea000001          B        |L15.392|
                  |L15.384|
;;;513    
;;;514            default:
000180  e1a00000          MOV      r0,r0
000184  e1a00000          MOV      r0,r0                 ;478
                  |L15.392|
000188  e1a00000          MOV      r0,r0                 ;495
;;;515                ;
;;;516        }
;;;517    
;;;518        return val;
;;;519    }
00018c  e8bd8038          POP      {r3-r5,pc}
;;;520    
                          ENDP

                  |L15.400|
                          DCD      _sys_bIsSetTime0Event
                  |L15.404|
                          DCD      _sys_uTime0EventCount
                  |L15.408|
                          DCD      tTime0Event
                  |L15.412|
                          DCD      _sys_bIsSetTime1Event
                  |L15.416|
                          DCD      _sys_uTime1EventCount
                  |L15.420|
                          DCD      tTime1Event

                          AREA ||i.sysSetTimerReferenceClock||, CODE, READONLY, ALIGN=2

                  sysSetTimerReferenceClock PROC
;;;215     */
;;;216    INT32 sysSetTimerReferenceClock(INT32 nTimeNo, UINT32 uClockRate)
000000  e1a02000          MOV      r2,r0
;;;217    {
;;;218        switch (nTimeNo)
000004  e3520000          CMP      r2,#0
000008  0a000002          BEQ      |L16.24|
00000c  e3520001          CMP      r2,#1
000010  1a000008          BNE      |L16.56|
000014  ea000003          B        |L16.40|
                  |L16.24|
;;;219        {
;;;220            case TIMER0:
000018  e1a00000          MOV      r0,r0
;;;221                _sys_uTimer0ClockRate = uClockRate;
00001c  e59f0028          LDR      r0,|L16.76|
000020  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer0ClockRate
;;;222                break;
000024  ea000005          B        |L16.64|
                  |L16.40|
;;;223    
;;;224            case TIMER1:
000028  e1a00000          MOV      r0,r0
;;;225                _sys_uTimer1ClockRate = uClockRate;
00002c  e59f001c          LDR      r0,|L16.80|
000030  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer1ClockRate
;;;226                break;
000034  ea000001          B        |L16.64|
                  |L16.56|
;;;227    
;;;228            default:
000038  e1a00000          MOV      r0,r0
00003c  e1a00000          MOV      r0,r0                 ;218
                  |L16.64|
000040  e1a00000          MOV      r0,r0                 ;222
;;;229                ;
;;;230        }
;;;231        return 0;
000044  e3a00000          MOV      r0,#0
;;;232    }
000048  e12fff1e          BX       lr
;;;233    
                          ENDP

                  |L16.76|
                          DCD      _sys_uTimer0ClockRate
                  |L16.80|
                          DCD      _sys_uTimer1ClockRate

                          AREA ||i.sysSetWatchDogTimerInterval||, CODE, READONLY, ALIGN=2

                  sysSetWatchDogTimerInterval PROC
;;;452     */
;;;453    INT32 sysSetWatchDogTimerInterval(INT32 nWdtInterval)
000000  e92d4008          PUSH     {r3,lr}
;;;454    {
000004  e1a01000          MOV      r1,r0
;;;455        UINT32 volatile _mWtcr;
;;;456    
;;;457        _mWtcr = inpw(REG_WDT_CTL) & ~0x700;
000008  e59f0028          LDR      r0,|L17.56|
00000c  e5900000          LDR      r0,[r0,#0]
000010  e3c00c07          BIC      r0,r0,#0x700
000014  e58d0000          STR      r0,[sp,#0]
;;;458        _mWtcr = _mWtcr | (nWdtInterval << 8);
000018  e59d0000          LDR      r0,[sp,#0]
00001c  e1800401          ORR      r0,r0,r1,LSL #8
000020  e58d0000          STR      r0,[sp,#0]
;;;459        outpw(REG_WDT_CTL, _mWtcr);
000024  e59d0000          LDR      r0,[sp,#0]
000028  e59f2008          LDR      r2,|L17.56|
00002c  e5820000          STR      r0,[r2,#0]
;;;460    
;;;461        return 0;
000030  e3a00000          MOV      r0,#0
;;;462    }
000034  e8bd8008          POP      {r3,pc}
;;;463    
                          ENDP

                  |L17.56|
                          DCD      0xb8001800

                          AREA ||i.sysStartTimer||, CODE, READONLY, ALIGN=2

                  sysStartTimer PROC
;;;242     */
;;;243    INT32 sysStartTimer(INT32 nTimeNo, UINT32 uTicksPerSecond, INT32 nOpMode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;244    {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
00000c  e1a07002          MOV      r7,r2
;;;245        int volatile i;
;;;246        UINT32 _mTicr, _mTcr;
;;;247    
;;;248        _mTcr = 0x60000000 | (nOpMode << 27);
000010  e3a00206          MOV      r0,#0x60000000
000014  e1808d87          ORR      r8,r0,r7,LSL #27
;;;249    
;;;250        switch (nTimeNo)
000018  e3550000          CMP      r5,#0
00001c  0a000002          BEQ      |L18.44|
000020  e3550001          CMP      r5,#1
000024  1a00005d          BNE      |L18.416|
000028  ea000030          B        |L18.240|
                  |L18.44|
;;;251        {
;;;252            case TIMER0:
00002c  e1a00000          MOV      r0,r0
;;;253                outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x100);
000030  e3a0020b          MOV      r0,#0xb0000000
000034  e5900218          LDR      r0,[r0,#0x218]
000038  e3800c01          ORR      r0,r0,#0x100
00003c  e3a0120b          MOV      r1,#0xb0000000
000040  e5810218          STR      r0,[r1,#0x218]
;;;254                _sys_bIsTimer0Initial = TRUE;
000044  e3a00001          MOV      r0,#1
000048  e59f116c          LDR      r1,|L18.444|
00004c  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsTimer0Initial
;;;255                _sys_uTimer0TickPerSecond = uTicksPerSecond;
000050  e59f0168          LDR      r0,|L18.448|
000054  e5806000          STR      r6,[r0,#0]  ; _sys_uTimer0TickPerSecond
;;;256    
;;;257                outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000058  e3a00000          MOV      r0,#0
00005c  e59f1160          LDR      r1,|L18.452|
000060  e5810000          STR      r0,[r1,#0]
;;;258                outpw(REG_TMR_TISR, 1);           /* clear for safety */
000064  e3a00001          MOV      r0,#1
000068  e5810060          STR      r0,[r1,#0x60]
;;;259    
;;;260                for (i=0; i<TimerEventCount; i++)
00006c  e3a00000          MOV      r0,#0
000070  e58d0000          STR      r0,[sp,#0]
000074  ea000006          B        |L18.148|
                  |L18.120|
;;;261                    tTime0Event[i].active = FALSE;
000078  e3a00000          MOV      r0,#0
00007c  e59f1144          LDR      r1,|L18.456|
000080  e59d2000          LDR      r2,[sp,#0]
000084  e7810202          STR      r0,[r1,r2,LSL #4]
000088  e59d0000          LDR      r0,[sp,#0]            ;260
00008c  e2800001          ADD      r0,r0,#1              ;260
000090  e58d0000          STR      r0,[sp,#0]            ;260
                  |L18.148|
000094  e59d0000          LDR      r0,[sp,#0]            ;260
000098  e350000a          CMP      r0,#0xa               ;260
00009c  bafffff5          BLT      |L18.120|
;;;262    
;;;263                _sys_pvOldTimer0Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, (PVOID)sysTimer0ISR);
0000a0  e59f2124          LDR      r2,|L18.460|
0000a4  e3a01010          MOV      r1,#0x10
0000a8  e3a00041          MOV      r0,#0x41
0000ac  ebfffffe          BL       sysInstallISR
0000b0  e59f1118          LDR      r1,|L18.464|
0000b4  e5810000          STR      r0,[r1,#0]  ; _sys_pvOldTimer0Vect
;;;264                sysEnableInterrupt(TMR0_IRQn);
0000b8  e3a00010          MOV      r0,#0x10
0000bc  ebfffffe          BL       sysEnableInterrupt
;;;265    
;;;266                _sys_uTimer0Count = 0;
0000c0  e3a00000          MOV      r0,#0
0000c4  e59f1108          LDR      r1,|L18.468|
0000c8  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer0Count
;;;267                _mTicr = _sys_uTimer0ClockRate / uTicksPerSecond;
0000cc  e1a01006          MOV      r1,r6
0000d0  e59f0100          LDR      r0,|L18.472|
0000d4  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0ClockRate
0000d8  ebfffffe          BL       __aeabi_uidivmod
0000dc  e1a04000          MOV      r4,r0
;;;268                outpw(REG_TMR0_TICR, _mTicr);
0000e0  e59f00dc          LDR      r0,|L18.452|
0000e4  e5804004          STR      r4,[r0,#4]
;;;269                outpw(REG_TMR0_TCSR, _mTcr);
0000e8  e5808000          STR      r8,[r0,#0]
;;;270                break;
0000ec  ea00002d          B        |L18.424|
                  |L18.240|
;;;271    
;;;272            case TIMER1:
0000f0  e1a00000          MOV      r0,r0
;;;273                outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x200);
0000f4  e3a0020b          MOV      r0,#0xb0000000
0000f8  e5900218          LDR      r0,[r0,#0x218]
0000fc  e3800c02          ORR      r0,r0,#0x200
000100  e3a0120b          MOV      r1,#0xb0000000
000104  e5810218          STR      r0,[r1,#0x218]
;;;274                outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000108  e3a00000          MOV      r0,#0
00010c  e59f10b0          LDR      r1,|L18.452|
000110  e5810010          STR      r0,[r1,#0x10]
;;;275                outpw(REG_TMR_TISR, 2);           /* clear for safety */
000114  e3a00002          MOV      r0,#2
000118  e5810060          STR      r0,[r1,#0x60]
;;;276    
;;;277                for (i=0; i<TimerEventCount; i++)
00011c  e3a00000          MOV      r0,#0
000120  e58d0000          STR      r0,[sp,#0]
000124  ea000006          B        |L18.324|
                  |L18.296|
;;;278                    tTime1Event[i].active = FALSE;
000128  e3a00000          MOV      r0,#0
00012c  e59f10a8          LDR      r1,|L18.476|
000130  e59d2000          LDR      r2,[sp,#0]
000134  e7810202          STR      r0,[r1,r2,LSL #4]
000138  e59d0000          LDR      r0,[sp,#0]            ;277
00013c  e2800001          ADD      r0,r0,#1              ;277
000140  e58d0000          STR      r0,[sp,#0]            ;277
                  |L18.324|
000144  e59d0000          LDR      r0,[sp,#0]            ;277
000148  e350000a          CMP      r0,#0xa               ;277
00014c  bafffff5          BLT      |L18.296|
;;;279    
;;;280                _sys_pvOldTimer1Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR1_IRQn, (PVOID)sysTimer1ISR);
000150  e59f2088          LDR      r2,|L18.480|
000154  e3a01011          MOV      r1,#0x11
000158  e3a00041          MOV      r0,#0x41
00015c  ebfffffe          BL       sysInstallISR
000160  e59f107c          LDR      r1,|L18.484|
000164  e5810000          STR      r0,[r1,#0]  ; _sys_pvOldTimer1Vect
;;;281                sysEnableInterrupt(TMR1_IRQn);
000168  e3a00011          MOV      r0,#0x11
00016c  ebfffffe          BL       sysEnableInterrupt
;;;282    
;;;283                _sys_uTimer1Count = 0;
000170  e3a00000          MOV      r0,#0
000174  e59f106c          LDR      r1,|L18.488|
000178  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer1Count
;;;284                _mTicr = _sys_uTimer1ClockRate / uTicksPerSecond;
00017c  e1a01006          MOV      r1,r6
000180  e59f0064          LDR      r0,|L18.492|
000184  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer1ClockRate
000188  ebfffffe          BL       __aeabi_uidivmod
00018c  e1a04000          MOV      r4,r0
;;;285                outpw(REG_TMR1_TICR, _mTicr);
000190  e59f002c          LDR      r0,|L18.452|
000194  e5804014          STR      r4,[r0,#0x14]
;;;286                outpw(REG_TMR1_TCSR, _mTcr);
000198  e5808010          STR      r8,[r0,#0x10]
;;;287                break;
00019c  ea000001          B        |L18.424|
                  |L18.416|
;;;288    
;;;289            default:
0001a0  e1a00000          MOV      r0,r0
0001a4  e1a00000          MOV      r0,r0                 ;250
                  |L18.424|
0001a8  e1a00000          MOV      r0,r0                 ;270
;;;290                ;
;;;291        }
;;;292        sysSetLocalInterrupt(ENABLE_IRQ);
0001ac  e3a0007f          MOV      r0,#0x7f
0001b0  ebfffffe          BL       sysSetLocalInterrupt
;;;293        return 0;
0001b4  e3a00000          MOV      r0,#0
;;;294    }
0001b8  e8bd83f8          POP      {r3-r9,pc}
;;;295    
                          ENDP

                  |L18.444|
                          DCD      _sys_bIsTimer0Initial
                  |L18.448|
                          DCD      _sys_uTimer0TickPerSecond
                  |L18.452|
                          DCD      0xb8001000
                  |L18.456|
                          DCD      tTime0Event
                  |L18.460|
                          DCD      sysTimer0ISR
                  |L18.464|
                          DCD      _sys_pvOldTimer0Vect
                  |L18.468|
                          DCD      _sys_uTimer0Count
                  |L18.472|
                          DCD      _sys_uTimer0ClockRate
                  |L18.476|
                          DCD      tTime1Event
                  |L18.480|
                          DCD      sysTimer1ISR
                  |L18.484|
                          DCD      _sys_pvOldTimer1Vect
                  |L18.488|
                          DCD      _sys_uTimer1Count
                  |L18.492|
                          DCD      _sys_uTimer1ClockRate

                          AREA ||i.sysStopTimer||, CODE, READONLY, ALIGN=2

                  sysStopTimer PROC
;;;302     */
;;;303    INT32 sysStopTimer(INT32 nTimeNo)
000000  e92d4010          PUSH     {r4,lr}
;;;304    {
000004  e1a04000          MOV      r4,r0
;;;305        switch (nTimeNo)
000008  e3540000          CMP      r4,#0
00000c  0a000002          BEQ      |L19.28|
000010  e3540001          CMP      r4,#1
000014  1a000029          BNE      |L19.192|
000018  ea000015          B        |L19.116|
                  |L19.28|
;;;306        {
;;;307            case TIMER0:
00001c  e1a00000          MOV      r0,r0
;;;308                _sys_bIsTimer0Initial = FALSE;
000020  e3a00000          MOV      r0,#0
000024  e59f10a8          LDR      r1,|L19.212|
000028  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsTimer0Initial
;;;309                sysDisableInterrupt(TMR0_IRQn);
00002c  e3a00010          MOV      r0,#0x10
000030  ebfffffe          BL       sysDisableInterrupt
;;;310                sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, _sys_pvOldTimer0Vect);
000034  e59f009c          LDR      r0,|L19.216|
000038  e3a01010          MOV      r1,#0x10
00003c  e5902000          LDR      r2,[r0,#0]  ; _sys_pvOldTimer0Vect
000040  e3a00041          MOV      r0,#0x41
000044  ebfffffe          BL       sysInstallISR
;;;311    
;;;312                outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000048  e3a00000          MOV      r0,#0
00004c  e59f1088          LDR      r1,|L19.220|
000050  e5810000          STR      r0,[r1,#0]
;;;313                outpw(REG_TMR_TISR, 1);           /* clear for safety */
000054  e3a00001          MOV      r0,#1
000058  e5810060          STR      r0,[r1,#0x60]
;;;314    
;;;315                _sys_uTime0EventCount = 0;
00005c  e3a00000          MOV      r0,#0
000060  e59f1078          LDR      r1,|L19.224|
000064  e5810000          STR      r0,[r1,#0]  ; _sys_uTime0EventCount
;;;316                _sys_bIsSetTime0Event = FALSE;
000068  e59f1074          LDR      r1,|L19.228|
00006c  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsSetTime0Event
;;;317                break;
000070  ea000014          B        |L19.200|
                  |L19.116|
;;;318    
;;;319            case TIMER1:
000074  e1a00000          MOV      r0,r0
;;;320                sysDisableInterrupt(TMR1_IRQn);
000078  e3a00011          MOV      r0,#0x11
00007c  ebfffffe          BL       sysDisableInterrupt
;;;321                sysInstallISR(HIGH_LEVEL_SENSITIVE| IRQ_LEVEL_1, TMR1_IRQn, _sys_pvOldTimer1Vect);
000080  e59f0060          LDR      r0,|L19.232|
000084  e3a01011          MOV      r1,#0x11
000088  e5902000          LDR      r2,[r0,#0]  ; _sys_pvOldTimer1Vect
00008c  e3a00041          MOV      r0,#0x41
000090  ebfffffe          BL       sysInstallISR
;;;322    
;;;323    
;;;324                outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000094  e3a00000          MOV      r0,#0
000098  e59f103c          LDR      r1,|L19.220|
00009c  e5810010          STR      r0,[r1,#0x10]
;;;325                outpw(REG_TMR_TISR, 2);           /* clear for safety */
0000a0  e3a00002          MOV      r0,#2
0000a4  e5810060          STR      r0,[r1,#0x60]
;;;326    
;;;327                _sys_uTime1EventCount = 0;
0000a8  e3a00000          MOV      r0,#0
0000ac  e59f1038          LDR      r1,|L19.236|
0000b0  e5810000          STR      r0,[r1,#0]  ; _sys_uTime1EventCount
;;;328                _sys_bIsSetTime1Event = FALSE;
0000b4  e59f1034          LDR      r1,|L19.240|
0000b8  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsSetTime1Event
;;;329                break;
0000bc  ea000001          B        |L19.200|
                  |L19.192|
;;;330    
;;;331            default:
0000c0  e1a00000          MOV      r0,r0
0000c4  e1a00000          MOV      r0,r0                 ;305
                  |L19.200|
0000c8  e1a00000          MOV      r0,r0                 ;317
;;;332                ;
;;;333        }
;;;334    
;;;335        return 0;
0000cc  e3a00000          MOV      r0,#0
;;;336    }
0000d0  e8bd8010          POP      {r4,pc}
;;;337    
                          ENDP

                  |L19.212|
                          DCD      _sys_bIsTimer0Initial
                  |L19.216|
                          DCD      _sys_pvOldTimer0Vect
                  |L19.220|
                          DCD      0xb8001000
                  |L19.224|
                          DCD      _sys_uTime0EventCount
                  |L19.228|
                          DCD      _sys_bIsSetTime0Event
                  |L19.232|
                          DCD      _sys_pvOldTimer1Vect
                  |L19.236|
                          DCD      _sys_uTime1EventCount
                  |L19.240|
                          DCD      _sys_bIsSetTime1Event

                          AREA ||i.sysTimer0ISR||, CODE, READONLY, ALIGN=2

                  sysTimer0ISR PROC
;;;69     /* Interrupt service routine */
;;;70     void sysTimer0ISR()
000000  e92d4008          PUSH     {r3,lr}
;;;71     {
;;;72         int volatile i;
;;;73     
;;;74         /*----- check channel 0 -----*/
;;;75         if (inpw(REG_TMR_TISR) & 0x00000001)
000004  e59f00fc          LDR      r0,|L20.264|
000008  e5900060          LDR      r0,[r0,#0x60]
00000c  e2000001          AND      r0,r0,#1
000010  e3500000          CMP      r0,#0
000014  0a00003a          BEQ      |L20.260|
;;;76         {
;;;77             _sys_uTimer0Count++;
000018  e59f00ec          LDR      r0,|L20.268|
00001c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
000020  e2800001          ADD      r0,r0,#1
000024  e59f10e0          LDR      r1,|L20.268|
000028  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer0Count
;;;78             outpw(REG_TMR_TISR, 0x01); /* clear TIF0 */
00002c  e3a00001          MOV      r0,#1
000030  e59f10d0          LDR      r1,|L20.264|
000034  e5810060          STR      r0,[r1,#0x60]
;;;79             if (_sys_uTimer0Count >= 0xfffffff)
000038  e59f00cc          LDR      r0,|L20.268|
00003c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer0Count
000040  e370021f          CMN      r0,#0xf0000001
000044  3a000002          BCC      |L20.84|
;;;80                 _sys_uTimer0Count = 0;
000048  e3a00000          MOV      r0,#0
00004c  e59f10b8          LDR      r1,|L20.268|
000050  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer0Count
                  |L20.84|
;;;81     
;;;82             if (_sys_bIsSetTime0Event)
000054  e59f00b4          LDR      r0,|L20.272|
000058  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime0Event
00005c  e3500000          CMP      r0,#0
000060  0a000027          BEQ      |L20.260|
;;;83             {
;;;84                 for (i=0; i<TimerEventCount; i++)
000064  e3a00000          MOV      r0,#0
000068  e58d0000          STR      r0,[sp,#0]
00006c  ea000021          B        |L20.248|
                  |L20.112|
;;;85                 {
;;;86                     if (tTime0Event[i].active)
000070  e59f009c          LDR      r0,|L20.276|
000074  e59d1000          LDR      r1,[sp,#0]
000078  e7900201          LDR      r0,[r0,r1,LSL #4]
00007c  e3500000          CMP      r0,#0
000080  0a000019          BEQ      |L20.236|
;;;87                     {
;;;88                         tTime0Event[i].curTick--;
000084  e59f1088          LDR      r1,|L20.276|
000088  e59d2000          LDR      r2,[sp,#0]
00008c  e0811202          ADD      r1,r1,r2,LSL #4
000090  e2810008          ADD      r0,r1,#8
000094  e5911008          LDR      r1,[r1,#8]
000098  e2411001          SUB      r1,r1,#1
00009c  e5801000          STR      r1,[r0,#0]
;;;89                         if (tTime0Event[i].curTick == 0)
0000a0  e59f006c          LDR      r0,|L20.276|
0000a4  e59d1000          LDR      r1,[sp,#0]
0000a8  e0800201          ADD      r0,r0,r1,LSL #4
0000ac  e5900008          LDR      r0,[r0,#8]
0000b0  e3500000          CMP      r0,#0
0000b4  1a00000c          BNE      |L20.236|
;;;90                         {
;;;91                             (*tTime0Event[i].funPtr)();
0000b8  e59f1054          LDR      r1,|L20.276|
0000bc  e59d2000          LDR      r2,[sp,#0]
0000c0  e0811202          ADD      r1,r1,r2,LSL #4
0000c4  e591000c          LDR      r0,[r1,#0xc]
0000c8  e12fff30          BLX      r0
;;;92                             tTime0Event[i].curTick = tTime0Event[i].initTick;
0000cc  e59f0040          LDR      r0,|L20.276|
0000d0  e59d1000          LDR      r1,[sp,#0]
0000d4  e0800201          ADD      r0,r0,r1,LSL #4
0000d8  e5900004          LDR      r0,[r0,#4]
0000dc  e59f1030          LDR      r1,|L20.276|
0000e0  e59d2000          LDR      r2,[sp,#0]
0000e4  e0811202          ADD      r1,r1,r2,LSL #4
0000e8  e5810008          STR      r0,[r1,#8]
                  |L20.236|
0000ec  e59d0000          LDR      r0,[sp,#0]            ;84
0000f0  e2800001          ADD      r0,r0,#1              ;84
0000f4  e58d0000          STR      r0,[sp,#0]            ;84
                  |L20.248|
0000f8  e59d0000          LDR      r0,[sp,#0]            ;84
0000fc  e350000a          CMP      r0,#0xa               ;84
000100  baffffda          BLT      |L20.112|
                  |L20.260|
;;;93                         }
;;;94                     }
;;;95                 }
;;;96             }
;;;97         }
;;;98     }
000104  e8bd8008          POP      {r3,pc}
;;;99     
                          ENDP

                  |L20.264|
                          DCD      0xb8001000
                  |L20.268|
                          DCD      _sys_uTimer0Count
                  |L20.272|
                          DCD      _sys_bIsSetTime0Event
                  |L20.276|
                          DCD      tTime0Event

                          AREA ||i.sysTimer1ISR||, CODE, READONLY, ALIGN=2

                  sysTimer1ISR PROC
;;;99     
;;;100    void sysTimer1ISR()
000000  e92d4008          PUSH     {r3,lr}
;;;101    {
;;;102        int volatile i;
;;;103    
;;;104        /*----- check channel 1 -----*/
;;;105        if (inpw(REG_TMR_TISR) & 0x00000002)
000004  e59f00fc          LDR      r0,|L21.264|
000008  e5900060          LDR      r0,[r0,#0x60]
00000c  e2000002          AND      r0,r0,#2
000010  e3500000          CMP      r0,#0
000014  0a00003a          BEQ      |L21.260|
;;;106        {
;;;107            _sys_uTimer1Count++;
000018  e59f00ec          LDR      r0,|L21.268|
00001c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer1Count
000020  e2800001          ADD      r0,r0,#1
000024  e59f10e0          LDR      r1,|L21.268|
000028  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer1Count
;;;108            outpw(REG_TMR_TISR, 0x02); /* clear TIF1 */
00002c  e3a00002          MOV      r0,#2
000030  e59f10d0          LDR      r1,|L21.264|
000034  e5810060          STR      r0,[r1,#0x60]
;;;109            if (_sys_uTimer1Count >= 0xfffffff)
000038  e59f00cc          LDR      r0,|L21.268|
00003c  e5900000          LDR      r0,[r0,#0]  ; _sys_uTimer1Count
000040  e370021f          CMN      r0,#0xf0000001
000044  3a000002          BCC      |L21.84|
;;;110                _sys_uTimer1Count = 0;
000048  e3a00000          MOV      r0,#0
00004c  e59f10b8          LDR      r1,|L21.268|
000050  e5810000          STR      r0,[r1,#0]  ; _sys_uTimer1Count
                  |L21.84|
;;;111    
;;;112            if (_sys_bIsSetTime1Event)
000054  e59f00b4          LDR      r0,|L21.272|
000058  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime1Event
00005c  e3500000          CMP      r0,#0
000060  0a000027          BEQ      |L21.260|
;;;113            {
;;;114                for (i=0; i<TimerEventCount; i++)
000064  e3a00000          MOV      r0,#0
000068  e58d0000          STR      r0,[sp,#0]
00006c  ea000021          B        |L21.248|
                  |L21.112|
;;;115                {
;;;116                    if (tTime1Event[i].active)
000070  e59f009c          LDR      r0,|L21.276|
000074  e59d1000          LDR      r1,[sp,#0]
000078  e7900201          LDR      r0,[r0,r1,LSL #4]
00007c  e3500000          CMP      r0,#0
000080  0a000019          BEQ      |L21.236|
;;;117                    {
;;;118                        tTime1Event[i].curTick--;
000084  e59f1088          LDR      r1,|L21.276|
000088  e59d2000          LDR      r2,[sp,#0]
00008c  e0811202          ADD      r1,r1,r2,LSL #4
000090  e2810008          ADD      r0,r1,#8
000094  e5911008          LDR      r1,[r1,#8]
000098  e2411001          SUB      r1,r1,#1
00009c  e5801000          STR      r1,[r0,#0]
;;;119                        if (tTime1Event[i].curTick == 0)
0000a0  e59f006c          LDR      r0,|L21.276|
0000a4  e59d1000          LDR      r1,[sp,#0]
0000a8  e0800201          ADD      r0,r0,r1,LSL #4
0000ac  e5900008          LDR      r0,[r0,#8]
0000b0  e3500000          CMP      r0,#0
0000b4  1a00000c          BNE      |L21.236|
;;;120                        {
;;;121                            (*tTime1Event[i].funPtr)();
0000b8  e59f1054          LDR      r1,|L21.276|
0000bc  e59d2000          LDR      r2,[sp,#0]
0000c0  e0811202          ADD      r1,r1,r2,LSL #4
0000c4  e591000c          LDR      r0,[r1,#0xc]
0000c8  e12fff30          BLX      r0
;;;122                            tTime1Event[i].curTick = tTime1Event[i].initTick;
0000cc  e59f0040          LDR      r0,|L21.276|
0000d0  e59d1000          LDR      r1,[sp,#0]
0000d4  e0800201          ADD      r0,r0,r1,LSL #4
0000d8  e5900004          LDR      r0,[r0,#4]
0000dc  e59f1030          LDR      r1,|L21.276|
0000e0  e59d2000          LDR      r2,[sp,#0]
0000e4  e0811202          ADD      r1,r1,r2,LSL #4
0000e8  e5810008          STR      r0,[r1,#8]
                  |L21.236|
0000ec  e59d0000          LDR      r0,[sp,#0]            ;114
0000f0  e2800001          ADD      r0,r0,#1              ;114
0000f4  e58d0000          STR      r0,[sp,#0]            ;114
                  |L21.248|
0000f8  e59d0000          LDR      r0,[sp,#0]            ;114
0000fc  e350000a          CMP      r0,#0xa               ;114
000100  baffffda          BLT      |L21.112|
                  |L21.260|
;;;123                        }
;;;124                    }
;;;125                }
;;;126            }
;;;127        }
;;;128    }
000104  e8bd8008          POP      {r3,pc}
;;;129    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  |L21.264|
                          DCD      0xb8001000
                  |L21.268|
                          DCD      _sys_uTimer1Count
                  |L21.272|
                          DCD      _sys_bIsSetTime1Event
                  |L21.276|
                          DCD      tTime1Event

                          AREA ||i.sysUTC_To_DOS_Time||, CODE, READONLY, ALIGN=2

                  sysUTC_To_DOS_Time PROC
;;;595    
;;;596    void  sysUTC_To_DOS_Time(UINT32 utc, DateTime_T *dos_tm)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;597    {
000004  e1a06000          MOV      r6,r0
000008  e1a05001          MOV      r5,r1
;;;598        int     the_year = 1970;
00000c  e59f4134          LDR      r4,|L22.328|
;;;599        int     i, seconds;
;;;600    
;;;601        while (1)
000010  ea00000e          B        |L22.80|
                  |L22.20|
;;;602        {
;;;603            if (the_year % 4 == 0)
000014  e1a01fc4          ASR      r1,r4,#31
000018  e0841f21          ADD      r1,r4,r1,LSR #30
00001c  e1a01141          ASR      r1,r1,#2
000020  e0441101          SUB      r1,r4,r1,LSL #2
000024  e3510000          CMP      r1,#0
000028  1a000001          BNE      |L22.52|
;;;604                seconds = SECONDS_366_DAY;
00002c  e59f8118          LDR      r8,|L22.332|
000030  ea000000          B        |L22.56|
                  |L22.52|
;;;605            else
;;;606                seconds = SECONDS_365_DAY;
000034  e59f8114          LDR      r8,|L22.336|
                  |L22.56|
;;;607            if (utc >= seconds)
000038  e1560008          CMP      r6,r8
00003c  3a000002          BCC      |L22.76|
;;;608            {
;;;609                utc -= seconds;
000040  e0466008          SUB      r6,r6,r8
;;;610                the_year++;
000044  e2844001          ADD      r4,r4,#1
000048  ea000000          B        |L22.80|
                  |L22.76|
;;;611            }
;;;612            else
;;;613                break;
00004c  ea000000          B        |L22.84|
                  |L22.80|
000050  eaffffef          B        |L22.20|
                  |L22.84|
000054  e1a00000          MOV      r0,r0
;;;614        }
;;;615    
;;;616        dos_tm->year = the_year;
000058  e5854000          STR      r4,[r5,#0]
;;;617    
;;;618        if (the_year % 4 == 0)
00005c  e1a01fc4          ASR      r1,r4,#31
000060  e0841f21          ADD      r1,r4,r1,LSR #30
000064  e1a01141          ASR      r1,r1,#2
000068  e0441101          SUB      r1,r4,r1,LSL #2
00006c  e3510000          CMP      r1,#0
000070  1a000003          BNE      |L22.132|
;;;619            month_seconds[1] = 29 * SECONDS_PER_DAY;
000074  e59f00d8          LDR      r0,|L22.340|
000078  e59f10d8          LDR      r1,|L22.344|
00007c  e5810004          STR      r0,[r1,#4]  ; month_seconds
000080  ea000002          B        |L22.144|
                  |L22.132|
;;;620        else
;;;621            month_seconds[1] = 28 * SECONDS_PER_DAY;
000084  e59f00d0          LDR      r0,|L22.348|
000088  e59f10c8          LDR      r1,|L22.344|
00008c  e5810004          STR      r0,[r1,#4]  ; month_seconds
                  |L22.144|
;;;622    
;;;623        dos_tm->mon = 1;
000090  e3a00001          MOV      r0,#1
000094  e5850004          STR      r0,[r5,#4]
;;;624        for (i = 0; i < 11; i++)
000098  e3a07000          MOV      r7,#0
00009c  ea00000c          B        |L22.212|
                  |L22.160|
;;;625        {
;;;626            if (utc >= month_seconds[i])
0000a0  e59f00b0          LDR      r0,|L22.344|
0000a4  e7900107          LDR      r0,[r0,r7,LSL #2]
0000a8  e1500006          CMP      r0,r6
0000ac  8a000006          BHI      |L22.204|
;;;627            {
;;;628                utc -= month_seconds[i];
0000b0  e59f00a0          LDR      r0,|L22.344|
0000b4  e7900107          LDR      r0,[r0,r7,LSL #2]
0000b8  e0466000          SUB      r6,r6,r0
;;;629                dos_tm->mon++;
0000bc  e5950004          LDR      r0,[r5,#4]
0000c0  e2800001          ADD      r0,r0,#1
0000c4  e5850004          STR      r0,[r5,#4]
0000c8  ea000000          B        |L22.208|
                  |L22.204|
;;;630            }
;;;631            else
;;;632                break;
0000cc  ea000002          B        |L22.220|
                  |L22.208|
0000d0  e2877001          ADD      r7,r7,#1              ;624
                  |L22.212|
0000d4  e357000b          CMP      r7,#0xb               ;624
0000d8  bafffff0          BLT      |L22.160|
                  |L22.220|
0000dc  e1a00000          MOV      r0,r0
;;;633        }
;;;634    
;;;635        dos_tm->day = 1 + (utc / SECONDS_PER_DAY);
0000e0  e59f1078          LDR      r1,|L22.352|
0000e4  e1a00006          MOV      r0,r6
0000e8  ebfffffe          BL       __aeabi_uidivmod
0000ec  e2800001          ADD      r0,r0,#1
0000f0  e5850008          STR      r0,[r5,#8]
;;;636        utc %= SECONDS_PER_DAY;
0000f4  e59f1064          LDR      r1,|L22.352|
0000f8  e1a00006          MOV      r0,r6
0000fc  ebfffffe          BL       __aeabi_uidivmod
000100  e1a06001          MOV      r6,r1
;;;637    
;;;638        dos_tm->hour = utc / SECONDS_PER_HOUR;
000104  e3a01ee1          MOV      r1,#0xe10
000108  e1a00006          MOV      r0,r6
00010c  ebfffffe          BL       __aeabi_uidivmod
000110  e585000c          STR      r0,[r5,#0xc]
;;;639        utc %= SECONDS_PER_HOUR;
000114  e3a01ee1          MOV      r1,#0xe10
000118  e1a00006          MOV      r0,r6
00011c  ebfffffe          BL       __aeabi_uidivmod
000120  e1a06001          MOV      r6,r1
;;;640    
;;;641        dos_tm->min = utc / 60;
000124  e3a0103c          MOV      r1,#0x3c
000128  e1a00006          MOV      r0,r6
00012c  ebfffffe          BL       __aeabi_uidivmod
000130  e5850010          STR      r0,[r5,#0x10]
;;;642        dos_tm->sec = utc % 60;
000134  e3a0103c          MOV      r1,#0x3c
000138  e1a00006          MOV      r0,r6
00013c  ebfffffe          BL       __aeabi_uidivmod
000140  e5851014          STR      r1,[r5,#0x14]
;;;643    }
000144  e8bd81f0          POP      {r4-r8,pc}
;;;644    
                          ENDP

                  |L22.328|
                          DCD      0x000007b2
                  |L22.332|
                          DCD      0x01e28500
                  |L22.336|
                          DCD      0x01e13380
                  |L22.340|
                          DCD      0x00263b80
                  |L22.344|
                          DCD      month_seconds
                  |L22.348|
                          DCD      0x0024ea00
                  |L22.352|
                          DCD      0x00015180

                          AREA ||i.sysUpdateTickCount||, CODE, READONLY, ALIGN=2

                  sysUpdateTickCount PROC
;;;189     */
;;;190    INT32 sysUpdateTickCount(INT32 nTimeNo, UINT32 uCount)
000000  e1a02000          MOV      r2,r0
;;;191    {
;;;192        switch (nTimeNo)
000004  e3520000          CMP      r2,#0
000008  0a000002          BEQ      |L23.24|
00000c  e3520001          CMP      r2,#1
000010  1a000008          BNE      |L23.56|
000014  ea000003          B        |L23.40|
                  |L23.24|
;;;193        {
;;;194            case TIMER0:
000018  e1a00000          MOV      r0,r0
;;;195                _sys_uTimer0Count = uCount;
00001c  e59f0028          LDR      r0,|L23.76|
000020  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer0Count
;;;196                break;
000024  ea000005          B        |L23.64|
                  |L23.40|
;;;197    
;;;198            case TIMER1:
000028  e1a00000          MOV      r0,r0
;;;199                _sys_uTimer1Count = uCount;
00002c  e59f001c          LDR      r0,|L23.80|
000030  e5801000          STR      r1,[r0,#0]  ; _sys_uTimer1Count
;;;200                break;
000034  ea000001          B        |L23.64|
                  |L23.56|
;;;201    
;;;202            default:
000038  e1a00000          MOV      r0,r0
00003c  e1a00000          MOV      r0,r0                 ;192
                  |L23.64|
000040  e1a00000          MOV      r0,r0                 ;196
;;;203                ;
;;;204        }
;;;205        return 0;
000044  e3a00000          MOV      r0,#0
;;;206    }
000048  e12fff1e          BX       lr
;;;207    
                          ENDP

                  |L23.76|
                          DCD      _sys_uTimer0Count
                  |L23.80|
                          DCD      _sys_uTimer1Count

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        160
                  tTime1Event
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_pvOldTimer0Vect
                          DCD      0x00000000
                  _sys_pvOldTimer1Vect
                          DCD      0x00000000
                  _sys_uTimer0ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer1ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer0Count
                          DCD      0x00000000
                  _sys_uTimer1Count
                          DCD      0x00000000
                  _sys_uTime0EventCount
                          DCD      0x00000000
                  _sys_uTime1EventCount
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_bIsSetTime0Event
000024  00                DCB      0x00
                  _sys_bIsSetTime1Event
000025  00                DCB      0x00
                  _sys_bIsTimer0Initial
000026  0000              DCB      0x00,0x00
                  _sys_ReferenceTime_Clock
                          DCD      0x00000000
                  _sys_ReferenceTime_UTC
                          DCD      0x00000000
                  month_seconds
                          DCD      0x0028de80
                          DCD      0x0024ea00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
