; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\nuc970_eth1.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\nuc970_eth1.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=1295,177,550 -I..\..\Driver\Include -I.\lwip-1.4.1\include -I..\..\ThirdParty\lwip-1.4.1\src\include\ipv4 -I..\..\ThirdParty\lwip-1.4.1\src\include\ -IE:\Keil\Keil_v4\ARM\RV31\INC -IE:\Keil\Keil_v4\ARM\CMSIS\Include -IE:\Keil\Keil_v4\ARM\Inc\Toshiba --omf_browse=.\obj\nuc970_eth1.crf lwip-1.4.1\netif\nuc970_eth1.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  reset_phy PROC
;;;73     
;;;74     static int reset_phy(void)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;75     {
;;;76     
;;;77         u16_t reg;
;;;78         u32_t delay;
;;;79     
;;;80     
;;;81         mdio_write(CONFIG_PHY_ADDR, MII_BMCR, BMCR_RESET);
000004  e3a01000          MOV      r1,#0
000008  e3a02902          MOV      r2,#0x8000
00000c  e1a00001          MOV      r0,r1
000010  ebfffffe          BL       mdio_write
;;;82     
;;;83         delay = 2000;
000014  e3a04e7d          MOV      r4,#0x7d0
;;;84         while(delay-- > 0) {
000018  ea000004          B        |L1.48|
                  |L1.28|
;;;85             if((mdio_read(CONFIG_PHY_ADDR, MII_BMCR) & BMCR_RESET) == 0)
00001c  e3a01000          MOV      r1,#0
000020  e1a00001          MOV      r0,r1
000024  ebfffffe          BL       mdio_read
000028  e3100902          TST      r0,#0x8000
00002c  0a000002          BEQ      |L1.60|
                  |L1.48|
000030  e2544001          SUBS     r4,r4,#1              ;84
000034  2afffff8          BCS      |L1.28|
000038  ea000001          B        |L1.68|
                  |L1.60|
;;;86                 break;
;;;87     
;;;88         }
;;;89     
;;;90         if(delay == 0) {
00003c  e3540000          CMP      r4,#0
000040  0a00000e          BEQ      |L1.128|
                  |L1.68|
;;;91             sysprintf("Reset phy failed\n");
;;;92             return(-1);
;;;93         }
;;;94     
;;;95         mdio_write(CONFIG_PHY_ADDR, MII_ADVERTISE, ADVERTISE_CSMA |
000044  e59f2234          LDR      r2,|L1.640|
000048  e3a01004          MOV      r1,#4
00004c  e3a00000          MOV      r0,#0
000050  ebfffffe          BL       mdio_write
;;;96                    ADVERTISE_10HALF |
;;;97                    ADVERTISE_10FULL |
;;;98                    ADVERTISE_100HALF |
;;;99                    ADVERTISE_100FULL);
;;;100    
;;;101        reg = mdio_read(CONFIG_PHY_ADDR, MII_BMCR);
000054  e3a01000          MOV      r1,#0
000058  e1a00001          MOV      r0,r1
00005c  ebfffffe          BL       mdio_read
;;;102        mdio_write(CONFIG_PHY_ADDR, MII_BMCR, reg | BMCR_ANRESTART);
000060  e3802c02          ORR      r2,r0,#0x200
000064  e3a01000          MOV      r1,#0
000068  e1a00001          MOV      r0,r1
00006c  ebfffffe          BL       mdio_write
;;;103    
;;;104        delay = 200000;
000070  e59f420c          LDR      r4,|L1.644|
;;;105        while(delay-- > 0) {
;;;106            if((mdio_read(CONFIG_PHY_ADDR, MII_BMSR) & (BMSR_ANEGCOMPLETE | BMSR_LSTATUS))
;;;107                    == (BMSR_ANEGCOMPLETE | BMSR_LSTATUS))
;;;108                break;
;;;109        }
;;;110    
;;;111        if(delay == 0) {
;;;112            sysprintf("AN failed. Set to 100 FULL\n");
;;;113            outpw(REG_EMAC1_MCMDR, inpw(REG_EMAC1_MCMDR) | 0x140000);
000074  e59f620c          LDR      r6,|L1.648|
000078  e3a05024          MOV      r5,#0x24              ;106
00007c  ea000007          B        |L1.160|
                  |L1.128|
000080  e28f0f81          ADR      r0,|L1.652|
000084  ebfffffe          BL       sysprintf
000088  ea00001b          B        |L1.252|
                  |L1.140|
00008c  e3a01001          MOV      r1,#1                 ;106
000090  e3a00000          MOV      r0,#0                 ;106
000094  ebfffffe          BL       mdio_read
000098  e1d50000          BICS     r0,r5,r0              ;106
00009c  0a000002          BEQ      |L1.172|
                  |L1.160|
0000a0  e2544001          SUBS     r4,r4,#1              ;105
0000a4  2afffff8          BCS      |L1.140|
0000a8  ea000001          B        |L1.180|
                  |L1.172|
0000ac  e3540000          CMP      r4,#0                 ;111
0000b0  0a000009          BEQ      |L1.220|
                  |L1.180|
;;;114            plugged = 0;
;;;115            return(-1);
;;;116        } else {
;;;117            reg = mdio_read(CONFIG_PHY_ADDR, MII_LPA);
0000b4  e3a01005          MOV      r1,#5
0000b8  e3a00000          MOV      r0,#0
0000bc  ebfffffe          BL       mdio_read
;;;118    
;;;119            if(reg & ADVERTISE_100FULL) {
0000c0  e3100c01          TST      r0,#0x100
0000c4  0a00000e          BEQ      |L1.260|
;;;120                sysprintf("100 full\n");
0000c8  e28f0e1d          ADR      r0,|L1.672|
0000cc  ebfffffe          BL       sysprintf
;;;121                outpw(REG_EMAC1_MCMDR, inpw(REG_EMAC1_MCMDR) | 0x140000);
0000d0  e5960090          LDR      r0,[r6,#0x90]
0000d4  e3800705          ORR      r0,r0,#0x140000
0000d8  ea00001d          B        |L1.340|
                  |L1.220|
0000dc  e28f0f72          ADR      r0,|L1.684|
0000e0  ebfffffe          BL       sysprintf
0000e4  e5960090          LDR      r0,[r6,#0x90]         ;113
0000e8  e3800705          ORR      r0,r0,#0x140000       ;113
0000ec  e5860090          STR      r0,[r6,#0x90]         ;113
0000f0  e59f11d0          LDR      r1,|L1.712|
0000f4  e3a00000          MOV      r0,#0                 ;114
0000f8  e5810000          STR      r0,[r1,#0]            ;114  ; plugged
                  |L1.252|
0000fc  e3e00000          MVN      r0,#0                 ;115
;;;122            } else if(reg & ADVERTISE_100HALF) {
;;;123                sysprintf("100 half\n");
;;;124                outpw(REG_EMAC1_MCMDR, (inpw(REG_EMAC1_MCMDR) & ~0x40000) | 0x100000);
;;;125            } else if(reg & ADVERTISE_10FULL) {
;;;126                sysprintf("10 full\n");
;;;127                outpw(REG_EMAC1_MCMDR, (inpw(REG_EMAC1_MCMDR) & ~0x100000) | 0x40000);
;;;128            } else {
;;;129                sysprintf("10 half\n");
;;;130                outpw(REG_EMAC1_MCMDR, inpw(REG_EMAC1_MCMDR) & ~0x140000);
;;;131            }
;;;132        }
;;;133    
;;;134        return(0);
;;;135    }
000100  e8bd8070          POP      {r4-r6,pc}
                  |L1.260|
000104  e3100080          TST      r0,#0x80              ;122
000108  0a000005          BEQ      |L1.292|
00010c  e28f0f6e          ADR      r0,|L1.716|
000110  ebfffffe          BL       sysprintf
000114  e5960090          LDR      r0,[r6,#0x90]         ;124
000118  e3c00701          BIC      r0,r0,#0x40000        ;124
00011c  e3800601          ORR      r0,r0,#0x100000       ;124
000120  ea00000b          B        |L1.340|
                  |L1.292|
000124  e3100040          TST      r0,#0x40              ;125
000128  0a000005          BEQ      |L1.324|
00012c  e28f0f69          ADR      r0,|L1.728|
000130  ebfffffe          BL       sysprintf
000134  e5960090          LDR      r0,[r6,#0x90]         ;127
000138  e3c00601          BIC      r0,r0,#0x100000       ;127
00013c  e3800701          ORR      r0,r0,#0x40000        ;127
000140  ea000003          B        |L1.340|
                  |L1.324|
000144  e28f0f66          ADR      r0,|L1.740|
000148  ebfffffe          BL       sysprintf
00014c  e5960090          LDR      r0,[r6,#0x90]         ;130
000150  e3c00705          BIC      r0,r0,#0x140000       ;130
                  |L1.340|
000154  e5860090          STR      r0,[r6,#0x90]         ;127
000158  e3a00000          MOV      r0,#0                 ;134
00015c  e8bd8070          POP      {r4-r6,pc}
;;;136    
                          ENDP

                  ETH1_halt PROC
;;;186    
;;;187    void ETH1_halt(void)
000160  e59f0120          LDR      r0,|L1.648|
;;;188    {
;;;189    
;;;190        outpw(REG_EMAC1_MCMDR, inpw(REG_EMAC1_MCMDR) & ~0x101); // disable tx/rx on
000164  e5901090          LDR      r1,[r0,#0x90]
000168  e3c11c01          BIC      r1,r1,#0x100
00016c  e3c11001          BIC      r1,r1,#1
000170  e5801090          STR      r1,[r0,#0x90]
;;;191    
;;;192    }
000174  e12fff1e          BX       lr
;;;193    
                          ENDP

                  ETH1_RX_IRQHandler PROC
                  |L1.376|
;;;194    void ETH1_RX_IRQHandler(void)
000178  e92d4070          PUSH     {r4-r6,lr}
;;;195    {
;;;196        unsigned int status;
;;;197    
;;;198        status = inpw(REG_EMAC1_MISTA) & 0xFFFF;
00017c  e59f5104          LDR      r5,|L1.648|
000180  e59500b0          LDR      r0,[r5,#0xb0]
000184  e1a00800          LSL      r0,r0,#16
000188  e1a00820          LSR      r0,r0,#16
;;;199        outpw(REG_EMAC1_MISTA, status);
00018c  e58500b0          STR      r0,[r5,#0xb0]
;;;200    
;;;201        if (status & 0x800) {
;;;202            // Shouldn't goes here, unless descriptor corrupted
;;;203        }
;;;204    
;;;205        do {
;;;206            status = cur_rx_desc_ptr->status1;
000190  e59f4130          LDR      r4,|L1.712|
;;;207    
;;;208            if(status & OWNERSHIP_EMAC)
;;;209                break;
;;;210    
;;;211            if (status & RXFD_RXGD) {
;;;212    
;;;213                ethernetif_input1(status & 0xFFFF, cur_rx_desc_ptr->buf);
;;;214    
;;;215    
;;;216            }
;;;217    
;;;218            cur_rx_desc_ptr->status1 = OWNERSHIP_EMAC;
000194  e3a06102          MOV      r6,#0x80000000
                  |L1.408|
000198  e5941008          LDR      r1,[r4,#8]            ;206  ; cur_rx_desc_ptr
00019c  e5910000          LDR      r0,[r1,#0]            ;206
0001a0  e3100102          TST      r0,#0x80000000        ;208
;;;219            cur_rx_desc_ptr = cur_rx_desc_ptr->next;
;;;220    
;;;221        } while (1);
;;;222    
;;;223        ETH1_TRIGGER_RX();
0001a4  13a00000          MOVNE    r0,#0
0001a8  158500a4          STRNE    r0,[r5,#0xa4]
;;;224    
;;;225    }
0001ac  18bd8070          POPNE    {r4-r6,pc}
0001b0  e3100601          TST      r0,#0x100000          ;211
0001b4  15911004          LDRNE    r1,[r1,#4]            ;213
0001b8  11a00800          LSLNE    r0,r0,#16             ;213
0001bc  11a00820          LSRNE    r0,r0,#16             ;213
0001c0  1bfffffe          BLNE     ethernetif_input1
0001c4  e5940008          LDR      r0,[r4,#8]            ;218  ; cur_rx_desc_ptr
0001c8  e5806000          STR      r6,[r0,#0]            ;218
0001cc  e590000c          LDR      r0,[r0,#0xc]          ;219
0001d0  e5840008          STR      r0,[r4,#8]            ;219  ; cur_rx_desc_ptr
0001d4  eaffffef          B        |L1.408|
;;;226    
                          ENDP

                  ETH1_TX_IRQHandler PROC
                  |L1.472|
;;;227    void ETH1_TX_IRQHandler(void)
0001d8  e59f10a8          LDR      r1,|L1.648|
;;;228    {
;;;229        unsigned int cur_entry, status;
;;;230    
;;;231        status = inpw(REG_EMAC1_MISTA) & 0xFFFF0000;
0001dc  e59100b0          LDR      r0,[r1,#0xb0]
0001e0  e1a00820          LSR      r0,r0,#16
0001e4  e1a00800          LSL      r0,r0,#16
;;;232        outpw(REG_EMAC1_MISTA, status);
0001e8  e58100b0          STR      r0,[r1,#0xb0]
;;;233    
;;;234        if(status & 0x1000000) {
0001ec  e3100401          TST      r0,#0x1000000
;;;235            // Shouldn't goes here, unless descriptor corrupted
;;;236            return;
;;;237        }
;;;238    
;;;239        cur_entry = inpw(REG_EMAC1_CTXDSA);
0001f0  059110cc          LDREQ    r1,[r1,#0xcc]
;;;240    
;;;241        while (cur_entry != (u32_t)fin_tx_desc_ptr) {
;;;242    
;;;243            fin_tx_desc_ptr = fin_tx_desc_ptr->next;
0001f4  059f20cc          LDREQ    r2,|L1.712|
0001f8  0592000c          LDREQ    r0,[r2,#0xc]          ;241  ; fin_tx_desc_ptr
;;;244        }
;;;245    
;;;246    }
0001fc  112fff1e          BXNE     lr
                  |L1.512|
000200  e1510000          CMP      r1,r0                 ;241
000204  1590000c          LDRNE    r0,[r0,#0xc]          ;243
000208  1582000c          STRNE    r0,[r2,#0xc]          ;243  ; fin_tx_desc_ptr
00020c  1afffffb          BNE      |L1.512|
000210  e12fff1e          BX       lr
;;;247    
                          ENDP

                  chk_link PROC
;;;248    static void chk_link(void)
000214  e92d4010          PUSH     {r4,lr}
;;;249    {
;;;250        unsigned int reg;
;;;251    
;;;252        reg = mdio_read(CONFIG_PHY_ADDR, MII_BMSR);
000218  e3a01001          MOV      r1,#1
00021c  e3a00000          MOV      r0,#0
000220  ebfffffe          BL       mdio_read
;;;253    
;;;254        if (reg & BMSR_LSTATUS) {
000224  e3100004          TST      r0,#4
;;;255            if (!plugged) {
000228  e59f0098          LDR      r0,|L1.712|
;;;256                plugged = 1;
;;;257                reset_phy();
;;;258                outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) | 0x101);
00022c  e59f40bc          LDR      r4,|L1.752|
;;;259            }
;;;260        } else {
;;;261            if (plugged) {
000230  e5901000          LDR      r1,[r0,#0]  ; plugged
000234  0a000008          BEQ      |L1.604|
000238  e3510000          CMP      r1,#0                 ;255
;;;262                plugged = 0;
;;;263                outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) & ~0x101);
;;;264            }
;;;265        }
;;;266    }
00023c  18bd8010          POPNE    {r4,pc}
000240  e3a01001          MOV      r1,#1                 ;256
000244  e5801000          STR      r1,[r0,#0]            ;256  ; plugged
000248  ebfffffe          BL       reset_phy
00024c  e5940090          LDR      r0,[r4,#0x90]         ;258
000250  e3800c01          ORR      r0,r0,#0x100          ;258
000254  e3800001          ORR      r0,r0,#1              ;258
000258  ea000006          B        |L1.632|
                  |L1.604|
00025c  e3510000          CMP      r1,#0                 ;261
000260  08bd8010          POPEQ    {r4,pc}
000264  e3a01000          MOV      r1,#0                 ;262
000268  e5801000          STR      r1,[r0,#0]            ;263  ; plugged
00026c  e5940090          LDR      r0,[r4,#0x90]         ;263
000270  e3c00c01          BIC      r0,r0,#0x100          ;263
000274  e3c00001          BIC      r0,r0,#1              ;263
                  |L1.632|
000278  e5840090          STR      r0,[r4,#0x90]         ;258
00027c  e8bd8010          POP      {r4,pc}
                  |L1.640|
                          DCD      0x000001e1
                  |L1.644|
                          DCD      0x00030d40
                  |L1.648|
                          DCD      0xb0003000
                  |L1.652|
00028c  52657365          DCB      "Reset phy failed\n",0
000290  74207068
000294  79206661
000298  696c6564
00029c  0a00    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L1.672|
0002a0  31303020          DCB      "100 full\n",0
0002a4  66756c6c
0002a8  0a00    
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L1.684|
0002ac  414e2066          DCB      "AN failed. Set to 100 FULL\n",0
0002b0  61696c65
0002b4  642e2053
0002b8  65742074
0002bc  6f203130
0002c0  30204655
0002c4  4c4c0a00
                  |L1.712|
                          DCD      ||.data||
                  |L1.716|
0002cc  31303020          DCB      "100 half\n",0
0002d0  68616c66
0002d4  0a00    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L1.728|
0002d8  31302066          DCB      "10 full\n",0
0002dc  756c6c0a
0002e0  00      
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L1.740|
0002e4  31302068          DCB      "10 half\n",0
0002e8  616c660a
0002ec  00      
0002ed  00                DCB      0
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L1.752|
                          DCD      0xb0002000
                          ENDP

                  ETH1_init PROC
;;;267    
;;;268    void ETH1_init(u8_t *mac_addr)
0002f4  e92d47f0          PUSH     {r4-r10,lr}
;;;269    {
;;;270    
;;;271        outpw(REG_CLK_HCLKEN, inpw(REG_CLK_HCLKEN) | (1 << 17));             // EMAC1 clk
0002f8  e3a0120b          MOV      r1,#0xb0000000
0002fc  e5912210          LDR      r2,[r1,#0x210]
000300  e3822802          ORR      r2,r2,#0x20000
000304  e5812210          STR      r2,[r1,#0x210]
;;;272        outpw(REG_CLK_DIVCTL8, (inpw(REG_CLK_DIVCTL8) & ~0xFF) | 0xA0);     // MDC clk divider
000308  e5912240          LDR      r2,[r1,#0x240]
00030c  e3c220ff          BIC      r2,r2,#0xff
000310  e38220a0          ORR      r2,r2,#0xa0
000314  e5812240          STR      r2,[r1,#0x240]
;;;273    
;;;274        // Multi function pin setting
;;;275        outpw(REG_SYS_GPE_MFPL, (inpw(REG_SYS_GPE_MFPL) & ~0xFFFFFF00) | 0x11111100);
000318  e5912090          LDR      r2,[r1,#0x90]
00031c  e59f3244          LDR      r3,|L1.1384|
000320  e20220ff          AND      r2,r2,#0xff
000324  e1822003          ORR      r2,r2,r3
000328  e5812090          STR      r2,[r1,#0x90]
;;;276        outpw(REG_SYS_GPE_MFPH, (inpw(REG_SYS_GPE_MFPH) & ~0xFFFF) | 0x1111);
00032c  e5912094          LDR      r2,[r1,#0x94]
000330  e1a02822          LSR      r2,r2,#16
000334  e1a02802          LSL      r2,r2,#16
000338  e1822843          ORR      r2,r2,r3,ASR #16
00033c  e5812094          STR      r2,[r1,#0x94]
;;;277    
;;;278        // Reset MAC
;;;279        outpw(REG_EMAC1_MCMDR, 0x1000000);
000340  e51f40c0          LDR      r4,|L1.648|
000344  e3a01401          MOV      r1,#0x1000000
000348  e5841090          STR      r1,[r4,#0x90]
00034c  e59f1218          LDR      r1,|L1.1388|
000350  e51f6090          LDR      r6,|L1.712|
000354  e381c102          ORR      r12,r1,#0x80000000
000358  e59f320c          LDR      r3,|L1.1388|
00035c  e3a01000          MOV      r1,#0
000360  e586c00c          STR      r12,[r6,#0xc]  ; fin_tx_desc_ptr
000364  e3a07007          MOV      r7,#7
000368  e2838b06          ADD      r8,r3,#0x1800
00036c  e1a05001          MOV      r5,r1
000370  e586c004          STR      r12,[r6,#4]  ; cur_tx_desc_ptr
                  |L1.884|
000374  e0612281          RSB      r2,r1,r1,LSL #5
000378  e0822301          ADD      r2,r2,r1,LSL #6
00037c  e0882202          ADD      r2,r8,r2,LSL #4
000380  e3829102          ORR      r9,r2,#0x80000000
000384  e7837201          STR      r7,[r3,r1,LSL #4]
000388  e0832201          ADD      r2,r3,r1,LSL #4
00038c  e5829004          STR      r9,[r2,#4]
000390  e2819001          ADD      r9,r1,#1
000394  e2099003          AND      r9,r9,#3
000398  e0839209          ADD      r9,r3,r9,LSL #4
00039c  e3899102          ORR      r9,r9,#0x80000000
0003a0  e2822008          ADD      r2,r2,#8
0003a4  e2811001          ADD      r1,r1,#1
0003a8  e8820220          STM      r2,{r5,r9}
0003ac  e3510004          CMP      r1,#4
0003b0  3affffef          BCC      |L1.884|
0003b4  e584c088          STR      r12,[r4,#0x88]
0003b8  e59f11b0          LDR      r1,|L1.1392|
0003bc  e59f31ac          LDR      r3,|L1.1392|
0003c0  e381c102          ORR      r12,r1,#0x80000000
0003c4  e586c008          STR      r12,[r6,#8]  ; cur_rx_desc_ptr
0003c8  e3a01000          MOV      r1,#0
0003cc  e3a06102          MOV      r6,#0x80000000
0003d0  e2837080          ADD      r7,r3,#0x80
                  |L1.980|
0003d4  e0612281          RSB      r2,r1,r1,LSL #5
0003d8  e0822301          ADD      r2,r2,r1,LSL #6
0003dc  e0872202          ADD      r2,r7,r2,LSL #4
0003e0  e3828102          ORR      r8,r2,#0x80000000
0003e4  e7836201          STR      r6,[r3,r1,LSL #4]
0003e8  e0832201          ADD      r2,r3,r1,LSL #4
0003ec  e5828004          STR      r8,[r2,#4]
0003f0  e2818001          ADD      r8,r1,#1
0003f4  e2088003          AND      r8,r8,#3
0003f8  e0838208          ADD      r8,r3,r8,LSL #4
0003fc  e3888102          ORR      r8,r8,#0x80000000
000400  e2822008          ADD      r2,r2,#8
000404  e2811001          ADD      r1,r1,#1
000408  e8820120          STM      r2,{r5,r8}
00040c  e3510004          CMP      r1,#4
000410  3affffef          BCC      |L1.980|
000414  e584c08c          STR      r12,[r4,#0x8c]
000418  e5d01000          LDRB     r1,[r0,#0]
00041c  e5d02001          LDRB     r2,[r0,#1]
000420  e1a01c01          LSL      r1,r1,#24
000424  e1811802          ORR      r1,r1,r2,LSL #16
000428  e5d02002          LDRB     r2,[r0,#2]
00042c  e1811402          ORR      r1,r1,r2,LSL #8
000430  e5d02003          LDRB     r2,[r0,#3]
000434  e1811002          ORR      r1,r1,r2
000438  e5841008          STR      r1,[r4,#8]
00043c  e5d01004          LDRB     r1,[r0,#4]
000440  e5d00005          LDRB     r0,[r0,#5]
000444  e1a01c01          LSL      r1,r1,#24
000448  e1810800          ORR      r0,r1,r0,LSL #16
00044c  e584000c          STR      r0,[r4,#0xc]
000450  e3a00016          MOV      r0,#0x16
000454  e5840000          STR      r0,[r4,#0]
000458  e3a00001          MOV      r0,#1
00045c  e5840004          STR      r0,[r4,#4]
;;;280    
;;;281        init_tx_desc();
;;;282        init_rx_desc();
;;;283    
;;;284        set_mac_addr(mac_addr);  // need to reconfigure hardware address 'cos we just RESET emc...
;;;285        reset_phy();
000460  ebfffffe          BL       reset_phy
;;;286    
;;;287        outpw(REG_EMAC1_MCMDR, inpw(REG_EMAC1_MCMDR) | 0x121); // strip CRC, TX on, Rx on
000464  e5940090          LDR      r0,[r4,#0x90]
000468  e3800c01          ORR      r0,r0,#0x100
00046c  e3800021          ORR      r0,r0,#0x21
000470  e5840090          STR      r0,[r4,#0x90]
;;;288        outpw(REG_EMAC1_MIEN, inpw(REG_EMAC1_MIEN) | 0x01250C11);  // Except tx/rx ok, enable rdu, txabt, tx/rx bus error.
000474  e59400ac          LDR      r0,[r4,#0xac]
000478  e59f10f4          LDR      r1,|L1.1396|
00047c  e1800001          ORR      r0,r0,r1
000480  e58400ac          STR      r0,[r4,#0xac]
;;;289    
;;;290        sysInstallISR(IRQ_LEVEL_1, EMC1_TX_IRQn, (PVOID)ETH1_TX_IRQHandler);
000484  e24f2fad          ADR      r2,|L1.472|
000488  e3a01016          MOV      r1,#0x16
00048c  e3a00001          MOV      r0,#1
000490  ebfffffe          BL       sysInstallISR
;;;291        sysInstallISR(IRQ_LEVEL_1, EMC1_RX_IRQn, (PVOID)ETH1_RX_IRQHandler);
000494  e24f2fc9          ADR      r2,|L1.376|
000498  e3a01014          MOV      r1,#0x14
00049c  e3a00001          MOV      r0,#1
0004a0  ebfffffe          BL       sysInstallISR
;;;292        sysEnableInterrupt(EMC1_TX_IRQn);
0004a4  e3a00016          MOV      r0,#0x16
0004a8  ebfffffe          BL       sysEnableInterrupt
;;;293        sysEnableInterrupt(EMC1_RX_IRQn);
0004ac  e3a00014          MOV      r0,#0x14
0004b0  ebfffffe          BL       sysEnableInterrupt
;;;294    
;;;295        ETH1_TRIGGER_RX();
0004b4  e58450a4          STR      r5,[r4,#0xa4]
;;;296    
;;;297        sysSetTimerEvent(TIMER0, 200, (PVOID)chk_link);  // check link status every 2 sec
0004b8  e8bd47f0          POP      {r4-r10,lr}
0004bc  e59f20b4          LDR      r2,|L1.1400|
0004c0  e3a010c8          MOV      r1,#0xc8
0004c4  e3a00000          MOV      r0,#0
0004c8  eafffffe          B        sysSetTimerEvent
;;;298    }
;;;299    
                          ENDP

                  ETH1_get_tx_buf PROC
;;;300    
;;;301    u8_t *ETH1_get_tx_buf(void)
0004cc  e51f020c          LDR      r0,|L1.712|
;;;302    {
;;;303        if(cur_tx_desc_ptr->status1 & OWNERSHIP_EMAC)
0004d0  e5900004          LDR      r0,[r0,#4]  ; cur_tx_desc_ptr
0004d4  e5901000          LDR      r1,[r0,#0]
0004d8  e3110102          TST      r1,#0x80000000
;;;304            return(NULL);
;;;305        else
;;;306            return(cur_tx_desc_ptr->buf);
0004dc  05900004          LDREQ    r0,[r0,#4]
0004e0  13a00000          MOVNE    r0,#0                 ;304
;;;307    }
0004e4  e12fff1e          BX       lr
;;;308    
                          ENDP

                  ETH1_trigger_tx PROC
;;;309    void ETH1_trigger_tx(u16_t length, struct pbuf *p)
0004e8  e51f2228          LDR      r2,|L1.712|
;;;310    {
;;;311        struct eth_descriptor volatile *desc;
;;;312        cur_tx_desc_ptr->status2 = (unsigned int)length;
0004ec  e5921004          LDR      r1,[r2,#4]  ; cur_tx_desc_ptr
0004f0  e5810008          STR      r0,[r1,#8]
;;;313        desc = cur_tx_desc_ptr->next;    // in case TX is transmitting and overwrite next pointer before we can update cur_tx_desc_ptr
0004f4  e591000c          LDR      r0,[r1,#0xc]
;;;314        cur_tx_desc_ptr->status1 |= OWNERSHIP_EMAC;
0004f8  e5913000          LDR      r3,[r1,#0]
0004fc  e3833102          ORR      r3,r3,#0x80000000
000500  e5813000          STR      r3,[r1,#0]
;;;315        cur_tx_desc_ptr = desc;
;;;316    
;;;317        ETH1_TRIGGER_TX();
000504  e51f1284          LDR      r1,|L1.648|
000508  e5820004          STR      r0,[r2,#4]            ;315  ; cur_tx_desc_ptr
00050c  e3a00000          MOV      r0,#0
000510  e58100a0          STR      r0,[r1,#0xa0]
;;;318    
;;;319    }
000514  e12fff1e          BX       lr
;;;320    
                          ENDP

                  mdio_write PROC
;;;54     
;;;55     static void mdio_write(u8_t addr, u8_t reg, u16_t val)
000518  e51f3298          LDR      r3,|L1.648|
;;;56     {
;;;57     
;;;58         outpw(REG_EMAC1_MIID, val);
00051c  e5832094          STR      r2,[r3,#0x94]
;;;59         outpw(REG_EMAC1_MIIDA, (addr << 8) | reg | 0xB0000);
000520  e1810400          ORR      r0,r1,r0,LSL #8
000524  e380080b          ORR      r0,r0,#0xb0000
000528  e5830098          STR      r0,[r3,#0x98]
                  |L1.1324|
;;;60     
;;;61         while (inpw(REG_EMAC1_MIIDA) & 0x20000);    // wait busy flag clear
00052c  e5930098          LDR      r0,[r3,#0x98]
000530  e3100802          TST      r0,#0x20000
000534  1afffffc          BNE      |L1.1324|
;;;62     
;;;63     }
000538  e12fff1e          BX       lr
;;;64     
                          ENDP

                  mdio_read PROC
;;;65     
;;;66     static u16_t mdio_read(u8_t addr, u8_t reg)
00053c  e1810400          ORR      r0,r1,r0,LSL #8
;;;67     {
;;;68         outpw(REG_EMAC1_MIIDA, (addr << 8) | reg | 0xA0000);
000540  e380180a          ORR      r1,r0,#0xa0000
000544  e51f02c4          LDR      r0,|L1.648|
000548  e5801098          STR      r1,[r0,#0x98]
                  |L1.1356|
;;;69         while (inpw(REG_EMAC1_MIIDA) & 0x20000);    // wait busy flag clear
00054c  e5901098          LDR      r1,[r0,#0x98]
000550  e3110802          TST      r1,#0x20000
;;;70     
;;;71         return inpw(REG_EMAC1_MIID);
000554  05900094          LDREQ    r0,[r0,#0x94]
000558  01a00800          LSLEQ    r0,r0,#16
00055c  01a00820          LSREQ    r0,r0,#16
000560  1afffff9          BNE      |L1.1356|
;;;72     }
000564  e12fff1e          BX       lr
;;;73     
                          ENDP

                  |L1.1384|
                          DCD      0x11111100
                  |L1.1388|
                          DCD      ||.bss||+0x40
                  |L1.1392|
                          DCD      ||.bss||
                  |L1.1396|
                          DCD      0x01250c11
                  |L1.1400|
                          DCD      chk_link

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  rx_desc
                          %        64
                  tx_desc
                          %        64
                  rx_buf
                          %        6080
                  tx_buf
                          %        6080

                          AREA ||.data||, DATA, ALIGN=2

                  plugged
                          DCD      0x00000000
                  cur_tx_desc_ptr
                          DCD      0x00000000
                  cur_rx_desc_ptr
                          DCD      0x00000000
                  fin_tx_desc_ptr
                          DCD      0x00000000
