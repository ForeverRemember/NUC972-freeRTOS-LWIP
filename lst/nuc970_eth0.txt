; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\nuc970_eth0.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\nuc970_eth0.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\nuc970_eth0.crf lwip-1.4.1\netif\nuc970_eth0.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  reset_phy PROC
;;;73     
;;;74     static int reset_phy(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;75     {
;;;76     
;;;77         u16_t reg;
;;;78         u32_t delay;
;;;79     
;;;80     
;;;81         mdio_write(CONFIG_PHY_ADDR, MII_BMCR, BMCR_RESET);
000004  e3a01000          MOV      r1,#0
000008  e3a02902          MOV      r2,#0x8000
00000c  e1a00001          MOV      r0,r1
000010  ebfffffe          BL       mdio_write
;;;82     
;;;83         delay = 2000;
000014  e3a04e7d          MOV      r4,#0x7d0
;;;84         while(delay-- > 0) {
000018  ea000004          B        |L1.48|
                  |L1.28|
;;;85             if((mdio_read(CONFIG_PHY_ADDR, MII_BMCR) & BMCR_RESET) == 0)
00001c  e3a01000          MOV      r1,#0
000020  e1a00001          MOV      r0,r1
000024  ebfffffe          BL       mdio_read
000028  e3100902          TST      r0,#0x8000
00002c  0a000002          BEQ      |L1.60|
                  |L1.48|
;;;86                 break;
000030  e2544001          SUBS     r4,r4,#1
000034  2afffff8          BCS      |L1.28|
000038  ea000001          B        |L1.68|
                  |L1.60|
;;;87     
;;;88         }
;;;89     
;;;90         if(delay == 0) {
00003c  e3540000          CMP      r4,#0
000040  0a00000f          BEQ      |L1.132|
                  |L1.68|
;;;91             sysprintf("Reset phy failed\n");
;;;92             return(-1);
;;;93         }
;;;94     
;;;95         mdio_write(CONFIG_PHY_ADDR, MII_ADVERTISE, ADVERTISE_CSMA |
000044  e59f223c          LDR      r2,|L1.648|
000048  e3a01004          MOV      r1,#4
00004c  e3a00000          MOV      r0,#0
000050  ebfffffe          BL       mdio_write
;;;96                    ADVERTISE_10HALF |
;;;97                    ADVERTISE_10FULL |
;;;98                    ADVERTISE_100HALF |
;;;99                    ADVERTISE_100FULL);
;;;100    
;;;101        reg = mdio_read(CONFIG_PHY_ADDR, MII_BMCR);
000054  e3a01000          MOV      r1,#0
000058  e1a00001          MOV      r0,r1
00005c  ebfffffe          BL       mdio_read
;;;102        mdio_write(CONFIG_PHY_ADDR, MII_BMCR, reg | BMCR_ANRESTART);
000060  e3802c02          ORR      r2,r0,#0x200
000064  e3a01000          MOV      r1,#0
000068  e1a00001          MOV      r0,r1
00006c  ebfffffe          BL       mdio_write
;;;103    
;;;104        delay = 200000;
000070  e59f4214          LDR      r4,|L1.652|
;;;105        while(delay-- > 0) {
;;;106            if((mdio_read(CONFIG_PHY_ADDR, MII_BMSR) & (BMSR_ANEGCOMPLETE | BMSR_LSTATUS))
;;;107                    == (BMSR_ANEGCOMPLETE | BMSR_LSTATUS))
;;;108                break;
;;;109        }
;;;110    
;;;111        if(delay == 0) {
;;;112            sysprintf("AN failed. Set to 100 FULL\n");
;;;113            outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) | 0x140000);
000074  e59f6214          LDR      r6,|L1.656|
;;;114            plugged = 0;
000078  e59f7214          LDR      r7,|L1.660|
00007c  e3a05024          MOV      r5,#0x24              ;106
000080  ea000007          B        |L1.164|
                  |L1.132|
000084  e28f0f83          ADR      r0,|L1.664|
000088  ebfffffe          BL       sysprintf
00008c  ea00001c          B        |L1.260|
                  |L1.144|
000090  e3a01001          MOV      r1,#1                 ;106
000094  e3a00000          MOV      r0,#0                 ;106
000098  ebfffffe          BL       mdio_read
00009c  e1d50000          BICS     r0,r5,r0              ;106
0000a0  0a000002          BEQ      |L1.176|
                  |L1.164|
0000a4  e2544001          SUBS     r4,r4,#1              ;108
0000a8  2afffff8          BCS      |L1.144|
0000ac  ea000001          B        |L1.184|
                  |L1.176|
0000b0  e3540000          CMP      r4,#0                 ;111
0000b4  0a00000b          BEQ      |L1.232|
                  |L1.184|
;;;115            return(-1);
;;;116        } else {
;;;117            reg = mdio_read(CONFIG_PHY_ADDR, MII_LPA);
0000b8  e3a01005          MOV      r1,#5
0000bc  e3a00000          MOV      r0,#0
0000c0  ebfffffe          BL       mdio_read
;;;118            plugged = 1;
0000c4  e3a01001          MOV      r1,#1
;;;119    
;;;120            if(reg & ADVERTISE_100FULL) {
0000c8  e3100c01          TST      r0,#0x100
0000cc  e5871000          STR      r1,[r7,#0]  ; plugged
0000d0  0a00000d          BEQ      |L1.268|
;;;121                sysprintf("100 full\n");
0000d4  e28f0e1d          ADR      r0,|L1.684|
0000d8  ebfffffe          BL       sysprintf
;;;122                outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) | 0x140000);
0000dc  e5960090          LDR      r0,[r6,#0x90]
0000e0  e3800705          ORR      r0,r0,#0x140000
0000e4  ea00001c          B        |L1.348|
                  |L1.232|
0000e8  e28f0f72          ADR      r0,|L1.696|
0000ec  ebfffffe          BL       sysprintf
0000f0  e5960090          LDR      r0,[r6,#0x90]         ;113
0000f4  e3800705          ORR      r0,r0,#0x140000       ;113
0000f8  e5860090          STR      r0,[r6,#0x90]         ;113
0000fc  e3a00000          MOV      r0,#0                 ;114
000100  e5870000          STR      r0,[r7,#0]            ;114  ; plugged
                  |L1.260|
000104  e3e00000          MVN      r0,#0                 ;115
;;;123            } else if(reg & ADVERTISE_100HALF) {
;;;124                sysprintf("100 half\n");
;;;125                outpw(REG_EMAC0_MCMDR, (inpw(REG_EMAC0_MCMDR) & ~0x40000) | 0x100000);
;;;126            } else if(reg & ADVERTISE_10FULL) {
;;;127                sysprintf("10 full\n");
;;;128                outpw(REG_EMAC0_MCMDR, (inpw(REG_EMAC0_MCMDR) & ~0x100000) | 0x40000);
;;;129            } else {
;;;130                sysprintf("10 half\n");
;;;131                outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) & ~0x140000);
;;;132            }
;;;133        }
;;;134    
;;;135        return(0);
;;;136    }
000108  e8bd81f0          POP      {r4-r8,pc}
                  |L1.268|
00010c  e3100080          TST      r0,#0x80              ;123
000110  0a000005          BEQ      |L1.300|
000114  e28f0f6e          ADR      r0,|L1.724|
000118  ebfffffe          BL       sysprintf
00011c  e5960090          LDR      r0,[r6,#0x90]         ;125
000120  e3c00701          BIC      r0,r0,#0x40000        ;125
000124  e3800601          ORR      r0,r0,#0x100000       ;125
000128  ea00000b          B        |L1.348|
                  |L1.300|
00012c  e3100040          TST      r0,#0x40              ;126
000130  0a000005          BEQ      |L1.332|
000134  e28f0f69          ADR      r0,|L1.736|
000138  ebfffffe          BL       sysprintf
00013c  e5960090          LDR      r0,[r6,#0x90]         ;128
000140  e3c00601          BIC      r0,r0,#0x100000       ;128
000144  e3800701          ORR      r0,r0,#0x40000        ;128
000148  ea000003          B        |L1.348|
                  |L1.332|
00014c  e28f0f66          ADR      r0,|L1.748|
000150  ebfffffe          BL       sysprintf
000154  e5960090          LDR      r0,[r6,#0x90]         ;131
000158  e3c00705          BIC      r0,r0,#0x140000       ;131
                  |L1.348|
00015c  e5860090          STR      r0,[r6,#0x90]         ;128
000160  e3a00000          MOV      r0,#0                 ;135
000164  e8bd81f0          POP      {r4-r8,pc}
;;;137    
                          ENDP

                  ETH0_halt PROC
;;;187    
;;;188    void ETH0_halt(void)
000168  e59f0120          LDR      r0,|L1.656|
;;;189    {
;;;190    
;;;191        outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) & ~0x101); // disable tx/rx on
00016c  e5901090          LDR      r1,[r0,#0x90]
000170  e3c11c01          BIC      r1,r1,#0x100
000174  e3c11001          BIC      r1,r1,#1
000178  e5801090          STR      r1,[r0,#0x90]
;;;192        
;;;193    }
00017c  e12fff1e          BX       lr
;;;194    
                          ENDP

                  ETH0_RX_IRQHandler PROC
                  |L1.384|
;;;195    void ETH0_RX_IRQHandler(void)
000180  e92d4070          PUSH     {r4-r6,lr}
;;;196    {
;;;197        unsigned int status;
;;;198    
;;;199        status = inpw(REG_EMAC0_MISTA) & 0xFFFF;
000184  e59f5104          LDR      r5,|L1.656|
000188  e59500b0          LDR      r0,[r5,#0xb0]
00018c  e1a00800          LSL      r0,r0,#16
000190  e1a00820          LSR      r0,r0,#16
;;;200        outpw(REG_EMAC0_MISTA, status);
000194  e58500b0          STR      r0,[r5,#0xb0]
;;;201        
;;;202        if (status & 0x800) {
;;;203            // Shouldn't goes here, unless descriptor corrupted
;;;204        }
;;;205    
;;;206        do {
;;;207    			
;;;208            status = cur_rx_desc_ptr->status1;
000198  e59f40f4          LDR      r4,|L1.660|
;;;209    			
;;;210            if(status & OWNERSHIP_EMAC)
;;;211                break;
;;;212    
;;;213            if (status & RXFD_RXGD) {
;;;214                ethernetif_input0(status & 0xFFFF, cur_rx_desc_ptr->buf);
;;;215            }
;;;216    
;;;217            cur_rx_desc_ptr->status1 = OWNERSHIP_EMAC;
00019c  e3a06102          MOV      r6,#0x80000000
                  |L1.416|
0001a0  e5941008          LDR      r1,[r4,#8]            ;208  ; cur_rx_desc_ptr
0001a4  e5910000          LDR      r0,[r1,#0]            ;208
0001a8  e3100102          TST      r0,#0x80000000        ;210
;;;218            cur_rx_desc_ptr = cur_rx_desc_ptr->next;
;;;219    
;;;220        } while (1);
;;;221    
;;;222        ETH0_TRIGGER_RX();
0001ac  13a00000          MOVNE    r0,#0
0001b0  158500a4          STRNE    r0,[r5,#0xa4]
;;;223    
;;;224    }
0001b4  18bd8070          POPNE    {r4-r6,pc}
0001b8  e3100601          TST      r0,#0x100000          ;213
0001bc  15911004          LDRNE    r1,[r1,#4]            ;214
0001c0  11a00800          LSLNE    r0,r0,#16             ;214
0001c4  11a00820          LSRNE    r0,r0,#16             ;214
0001c8  1bfffffe          BLNE     ethernetif_input0
0001cc  e5940008          LDR      r0,[r4,#8]            ;217  ; cur_rx_desc_ptr
0001d0  e5806000          STR      r6,[r0,#0]            ;217
0001d4  e590000c          LDR      r0,[r0,#0xc]          ;218
0001d8  e5840008          STR      r0,[r4,#8]            ;218  ; cur_rx_desc_ptr
0001dc  eaffffef          B        |L1.416|
;;;225    
                          ENDP

                  ETH0_TX_IRQHandler PROC
                  |L1.480|
;;;226    void ETH0_TX_IRQHandler(void)
0001e0  e59f10a8          LDR      r1,|L1.656|
;;;227    {
;;;228        unsigned int cur_entry, status;
;;;229    
;;;230        status = inpw(REG_EMAC0_MISTA) & 0xFFFF0000;
0001e4  e59100b0          LDR      r0,[r1,#0xb0]
0001e8  e1a00820          LSR      r0,r0,#16
0001ec  e1a00800          LSL      r0,r0,#16
;;;231        outpw(REG_EMAC0_MISTA, status);
0001f0  e58100b0          STR      r0,[r1,#0xb0]
;;;232    
;;;233        if(status & 0x1000000) {
0001f4  e3100401          TST      r0,#0x1000000
;;;234            // Shouldn't goes here, unless descriptor corrupted
;;;235            return;
;;;236        }
;;;237    
;;;238        cur_entry = inpw(REG_EMAC0_CTXDSA);
0001f8  059110cc          LDREQ    r1,[r1,#0xcc]
;;;239    
;;;240        while (cur_entry != (u32_t)fin_tx_desc_ptr) {
;;;241    
;;;242            fin_tx_desc_ptr = fin_tx_desc_ptr->next;
0001fc  059f2090          LDREQ    r2,|L1.660|
000200  0592000c          LDREQ    r0,[r2,#0xc]          ;240  ; fin_tx_desc_ptr
;;;243        }
;;;244    
;;;245    }
000204  112fff1e          BXNE     lr
                  |L1.520|
000208  e1510000          CMP      r1,r0                 ;240
00020c  1590000c          LDRNE    r0,[r0,#0xc]          ;242
000210  1582000c          STRNE    r0,[r2,#0xc]          ;242  ; fin_tx_desc_ptr
000214  1afffffb          BNE      |L1.520|
000218  e12fff1e          BX       lr
;;;246    
                          ENDP

                  chk_link PROC
;;;247    static void chk_link(void)
00021c  e92d4010          PUSH     {r4,lr}
;;;248    {
;;;249        unsigned int reg;
;;;250    
;;;251        reg = mdio_read(CONFIG_PHY_ADDR, MII_BMSR);
000220  e3a01001          MOV      r1,#1
000224  e3a00000          MOV      r0,#0
000228  ebfffffe          BL       mdio_read
;;;252    
;;;253        if (reg & BMSR_LSTATUS) {
00022c  e3100004          TST      r0,#4
;;;254            if (!plugged) {
000230  e59f005c          LDR      r0,|L1.660|
;;;255                plugged = 1;
;;;256                reset_phy();
;;;257                outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) | 0x101);
000234  e59f4054          LDR      r4,|L1.656|
;;;258            }
;;;259        } else {
;;;260            if (plugged) {
000238  e5901000          LDR      r1,[r0,#0]  ; plugged
00023c  0a000008          BEQ      |L1.612|
000240  e3510000          CMP      r1,#0                 ;254
;;;261                plugged = 0;
;;;262                outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) & ~0x101);
;;;263            }
;;;264        }
;;;265    }
000244  18bd8010          POPNE    {r4,pc}
000248  e3a01001          MOV      r1,#1                 ;255
00024c  e5801000          STR      r1,[r0,#0]            ;255  ; plugged
000250  ebfffffe          BL       reset_phy
000254  e5940090          LDR      r0,[r4,#0x90]         ;257
000258  e3800c01          ORR      r0,r0,#0x100          ;257
00025c  e3800001          ORR      r0,r0,#1              ;257
000260  ea000006          B        |L1.640|
                  |L1.612|
000264  e3510000          CMP      r1,#0                 ;260
000268  08bd8010          POPEQ    {r4,pc}
00026c  e3a01000          MOV      r1,#0                 ;261
000270  e5801000          STR      r1,[r0,#0]            ;262  ; plugged
000274  e5940090          LDR      r0,[r4,#0x90]         ;262
000278  e3c00c01          BIC      r0,r0,#0x100          ;262
00027c  e3c00001          BIC      r0,r0,#1              ;262
                  |L1.640|
000280  e5840090          STR      r0,[r4,#0x90]         ;257
000284  e8bd8010          POP      {r4,pc}
                  |L1.648|
                          DCD      0x000001e1
                  |L1.652|
                          DCD      0x00030d40
                  |L1.656|
                          DCD      0xb0002000
                  |L1.660|
                          DCD      ||.data||
                  |L1.664|
000298  52657365          DCB      "Reset phy failed\n",0
00029c  74207068
0002a0  79206661
0002a4  696c6564
0002a8  0a00    
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L1.684|
0002ac  31303020          DCB      "100 full\n",0
0002b0  66756c6c
0002b4  0a00    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L1.696|
0002b8  414e2066          DCB      "AN failed. Set to 100 FULL\n",0
0002bc  61696c65
0002c0  642e2053
0002c4  65742074
0002c8  6f203130
0002cc  30204655
0002d0  4c4c0a00
                  |L1.724|
0002d4  31303020          DCB      "100 half\n",0
0002d8  68616c66
0002dc  0a00    
0002de  00                DCB      0
0002df  00                DCB      0
                  |L1.736|
0002e0  31302066          DCB      "10 full\n",0
0002e4  756c6c0a
0002e8  00      
0002e9  00                DCB      0
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L1.748|
0002ec  31302068          DCB      "10 half\n",0
0002f0  616c660a
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                          ENDP

                  ETH0_init PROC
;;;266    
;;;267    void ETH0_init(u8_t *mac_addr)
0002f8  e92d47f0          PUSH     {r4-r10,lr}
;;;268    {
;;;269    
;;;270        outpw(REG_CLK_HCLKEN, inpw(REG_CLK_HCLKEN) | (1 << 16));            // EMAC0 clk
0002fc  e3a0120b          MOV      r1,#0xb0000000
000300  e5912210          LDR      r2,[r1,#0x210]
000304  e3822801          ORR      r2,r2,#0x10000
000308  e5812210          STR      r2,[r1,#0x210]
;;;271        outpw(REG_CLK_DIVCTL8, (inpw(REG_CLK_DIVCTL8) & ~0xFF) | 0xA0);     // MDC clk divider
00030c  e5912240          LDR      r2,[r1,#0x240]
000310  e3c220ff          BIC      r2,r2,#0xff
000314  e38220a0          ORR      r2,r2,#0xa0
000318  e5812240          STR      r2,[r1,#0x240]
;;;272        
;;;273        // Multi function pin setting
;;;274        outpw(REG_SYS_GPF_MFPL, 0x11111111);
00031c  e59f2238          LDR      r2,|L1.1372|
000320  e5812098          STR      r2,[r1,#0x98]
;;;275        outpw(REG_SYS_GPF_MFPH, (inpw(REG_SYS_GPF_MFPH) & ~0xFF) | 0x11);
000324  e591209c          LDR      r2,[r1,#0x9c]
000328  e3c220ff          BIC      r2,r2,#0xff
00032c  e3822011          ORR      r2,r2,#0x11
000330  e581209c          STR      r2,[r1,#0x9c]
;;;276        
;;;277        // Reset MAC
;;;278        outpw(REG_EMAC0_MCMDR, 0x1000000);
000334  e51f40ac          LDR      r4,|L1.656|
000338  e3a01401          MOV      r1,#0x1000000
00033c  e5841090          STR      r1,[r4,#0x90]
000340  e59f1218          LDR      r1,|L1.1376|
000344  e51f60b8          LDR      r6,|L1.660|
000348  e381c102          ORR      r12,r1,#0x80000000
00034c  e59f320c          LDR      r3,|L1.1376|
000350  e3a01000          MOV      r1,#0
000354  e586c00c          STR      r12,[r6,#0xc]  ; fin_tx_desc_ptr
000358  e3a07007          MOV      r7,#7
00035c  e2838b06          ADD      r8,r3,#0x1800
000360  e1a05001          MOV      r5,r1
000364  e586c004          STR      r12,[r6,#4]  ; cur_tx_desc_ptr
                  |L1.872|
000368  e0612281          RSB      r2,r1,r1,LSL #5
00036c  e0822301          ADD      r2,r2,r1,LSL #6
000370  e0882202          ADD      r2,r8,r2,LSL #4
000374  e3829102          ORR      r9,r2,#0x80000000
000378  e7837201          STR      r7,[r3,r1,LSL #4]
00037c  e0832201          ADD      r2,r3,r1,LSL #4
000380  e5829004          STR      r9,[r2,#4]
000384  e2819001          ADD      r9,r1,#1
000388  e2099003          AND      r9,r9,#3
00038c  e0839209          ADD      r9,r3,r9,LSL #4
000390  e3899102          ORR      r9,r9,#0x80000000
000394  e2811001          ADD      r1,r1,#1
000398  e5825008          STR      r5,[r2,#8]
00039c  e3510004          CMP      r1,#4
0003a0  e582900c          STR      r9,[r2,#0xc]
0003a4  3affffef          BCC      |L1.872|
0003a8  e584c088          STR      r12,[r4,#0x88]
0003ac  e59f11b0          LDR      r1,|L1.1380|
0003b0  e59f31ac          LDR      r3,|L1.1380|
0003b4  e381c102          ORR      r12,r1,#0x80000000
0003b8  e586c008          STR      r12,[r6,#8]  ; cur_rx_desc_ptr
0003bc  e3a01000          MOV      r1,#0
0003c0  e3a06102          MOV      r6,#0x80000000
0003c4  e2837080          ADD      r7,r3,#0x80
                  |L1.968|
0003c8  e0612281          RSB      r2,r1,r1,LSL #5
0003cc  e0822301          ADD      r2,r2,r1,LSL #6
0003d0  e0872202          ADD      r2,r7,r2,LSL #4
0003d4  e3828102          ORR      r8,r2,#0x80000000
0003d8  e7836201          STR      r6,[r3,r1,LSL #4]
0003dc  e0832201          ADD      r2,r3,r1,LSL #4
0003e0  e5828004          STR      r8,[r2,#4]
0003e4  e2818001          ADD      r8,r1,#1
0003e8  e2088003          AND      r8,r8,#3
0003ec  e0838208          ADD      r8,r3,r8,LSL #4
0003f0  e3888102          ORR      r8,r8,#0x80000000
0003f4  e2811001          ADD      r1,r1,#1
0003f8  e5825008          STR      r5,[r2,#8]
0003fc  e3510004          CMP      r1,#4
000400  e582800c          STR      r8,[r2,#0xc]
000404  3affffef          BCC      |L1.968|
000408  e584c08c          STR      r12,[r4,#0x8c]
00040c  e5d01000          LDRB     r1,[r0,#0]
000410  e5d02001          LDRB     r2,[r0,#1]
000414  e1a01c01          LSL      r1,r1,#24
000418  e1811802          ORR      r1,r1,r2,LSL #16
00041c  e5d02002          LDRB     r2,[r0,#2]
000420  e1811402          ORR      r1,r1,r2,LSL #8
000424  e5d02003          LDRB     r2,[r0,#3]
000428  e1811002          ORR      r1,r1,r2
00042c  e5841008          STR      r1,[r4,#8]
000430  e5d01004          LDRB     r1,[r0,#4]
000434  e5d00005          LDRB     r0,[r0,#5]
000438  e1a01c01          LSL      r1,r1,#24
00043c  e1810800          ORR      r0,r1,r0,LSL #16
000440  e584000c          STR      r0,[r4,#0xc]
000444  e3a00016          MOV      r0,#0x16
000448  e5840000          STR      r0,[r4,#0]
00044c  e3a00001          MOV      r0,#1
000450  e5840004          STR      r0,[r4,#4]
;;;279    
;;;280        init_tx_desc();
;;;281        init_rx_desc();
;;;282    
;;;283        set_mac_addr(mac_addr);  // need to reconfigure hardware address 'cos we just RESET emc...
;;;284        reset_phy();
000454  ebfffffe          BL       reset_phy
;;;285    
;;;286        outpw(REG_EMAC0_MCMDR, inpw(REG_EMAC0_MCMDR) | 0x121); // strip CRC, TX on, Rx on
000458  e5940090          LDR      r0,[r4,#0x90]
00045c  e3800c01          ORR      r0,r0,#0x100
000460  e3800021          ORR      r0,r0,#0x21
000464  e5840090          STR      r0,[r4,#0x90]
;;;287        outpw(REG_EMAC0_MIEN, inpw(REG_EMAC0_MIEN) | 0x01250C11);  // Except tx/rx ok, enable rdu, txabt, tx/rx bus error.
000468  e59400ac          LDR      r0,[r4,#0xac]
00046c  e59f10f4          LDR      r1,|L1.1384|
000470  e1800001          ORR      r0,r0,r1
000474  e58400ac          STR      r0,[r4,#0xac]
;;;288        sysInstallISR(IRQ_LEVEL_1, EMC0_TX_IRQn, (PVOID)ETH0_TX_IRQHandler);
000478  e24f2e2a          ADR      r2,|L1.480|
00047c  e3a01015          MOV      r1,#0x15
000480  e3a00001          MOV      r0,#1
000484  ebfffffe          BL       sysInstallISR
;;;289        sysInstallISR(IRQ_LEVEL_1, EMC0_RX_IRQn, (PVOID)ETH0_RX_IRQHandler);
000488  e24f2e31          ADR      r2,|L1.384|
00048c  e3a01013          MOV      r1,#0x13
000490  e3a00001          MOV      r0,#1
000494  ebfffffe          BL       sysInstallISR
;;;290        sysEnableInterrupt(EMC0_TX_IRQn);
000498  e3a00015          MOV      r0,#0x15
00049c  ebfffffe          BL       sysEnableInterrupt
;;;291        sysEnableInterrupt(EMC0_RX_IRQn);
0004a0  e3a00013          MOV      r0,#0x13
0004a4  ebfffffe          BL       sysEnableInterrupt
;;;292        ETH0_TRIGGER_RX();
0004a8  e58450a4          STR      r5,[r4,#0xa4]
;;;293        
;;;294        sysSetTimerEvent(TIMER0, 200, (PVOID)chk_link);  // check link status every 2 sec
0004ac  e8bd47f0          POP      {r4-r10,lr}
0004b0  e59f20b4          LDR      r2,|L1.1388|
0004b4  e3a010c8          MOV      r1,#0xc8
0004b8  e3a00000          MOV      r0,#0
0004bc  eafffffe          B        sysSetTimerEvent
;;;295    }
;;;296    
                          ENDP

                  ETH0_get_tx_buf PROC
;;;297    
;;;298    u8_t *ETH0_get_tx_buf(void)
0004c0  e51f0234          LDR      r0,|L1.660|
;;;299    {
;;;300        if(cur_tx_desc_ptr->status1 & OWNERSHIP_EMAC)
0004c4  e5900004          LDR      r0,[r0,#4]  ; cur_tx_desc_ptr
0004c8  e5901000          LDR      r1,[r0,#0]
0004cc  e3110102          TST      r1,#0x80000000
;;;301            return(NULL);
;;;302        else
;;;303            return(cur_tx_desc_ptr->buf);
0004d0  05900004          LDREQ    r0,[r0,#4]
0004d4  13a00000          MOVNE    r0,#0                 ;301
;;;304    }
0004d8  e12fff1e          BX       lr
;;;305    
                          ENDP

                  ETH0_trigger_tx PROC
;;;306    void ETH0_trigger_tx(u16_t length, struct pbuf *p)
0004dc  e51f2250          LDR      r2,|L1.660|
;;;307    {
;;;308        struct eth_descriptor volatile *desc;
;;;309        cur_tx_desc_ptr->status2 = (unsigned int)length;
0004e0  e5921004          LDR      r1,[r2,#4]  ; cur_tx_desc_ptr
0004e4  e5810008          STR      r0,[r1,#8]
;;;310        desc = cur_tx_desc_ptr->next;    // in case TX is transmitting and overwrite next pointer before we can update cur_tx_desc_ptr
0004e8  e591000c          LDR      r0,[r1,#0xc]
;;;311        cur_tx_desc_ptr->status1 |= OWNERSHIP_EMAC;
0004ec  e5913000          LDR      r3,[r1,#0]
0004f0  e3833102          ORR      r3,r3,#0x80000000
0004f4  e5813000          STR      r3,[r1,#0]
;;;312        cur_tx_desc_ptr = desc;
;;;313    
;;;314        ETH0_TRIGGER_TX();
0004f8  e51f1270          LDR      r1,|L1.656|
0004fc  e5820004          STR      r0,[r2,#4]            ;312  ; cur_tx_desc_ptr
000500  e3a00000          MOV      r0,#0
000504  e58100a0          STR      r0,[r1,#0xa0]
;;;315    
;;;316    }
000508  e12fff1e          BX       lr
;;;317    
                          ENDP

                  mdio_write PROC
;;;54     
;;;55     static void mdio_write(u8_t addr, u8_t reg, u16_t val)
00050c  e51f3284          LDR      r3,|L1.656|
;;;56     {
;;;57         
;;;58         outpw(REG_EMAC0_MIID, val);
000510  e5832094          STR      r2,[r3,#0x94]
;;;59         outpw(REG_EMAC0_MIIDA, (addr << 8) | reg | 0xB0000);
000514  e1810400          ORR      r0,r1,r0,LSL #8
000518  e380080b          ORR      r0,r0,#0xb0000
00051c  e5830098          STR      r0,[r3,#0x98]
                  |L1.1312|
;;;60     
;;;61         while (inpw(REG_EMAC0_MIIDA) & 0x20000);    // wait busy flag clear
000520  e5930098          LDR      r0,[r3,#0x98]
000524  e3100802          TST      r0,#0x20000
000528  1afffffc          BNE      |L1.1312|
;;;62     
;;;63     }
00052c  e12fff1e          BX       lr
;;;64     
                          ENDP

                  mdio_read PROC
;;;65     
;;;66     static u16_t mdio_read(u8_t addr, u8_t reg)
000530  e1810400          ORR      r0,r1,r0,LSL #8
;;;67     {
;;;68         outpw(REG_EMAC0_MIIDA, (addr << 8) | reg | 0xA0000);
000534  e380180a          ORR      r1,r0,#0xa0000
000538  e51f02b0          LDR      r0,|L1.656|
00053c  e5801098          STR      r1,[r0,#0x98]
                  |L1.1344|
;;;69         while (inpw(REG_EMAC0_MIIDA) & 0x20000);    // wait busy flag clear
000540  e5901098          LDR      r1,[r0,#0x98]
000544  e3110802          TST      r1,#0x20000
;;;70     
;;;71         return inpw(REG_EMAC0_MIID);
000548  05900094          LDREQ    r0,[r0,#0x94]
00054c  01a00800          LSLEQ    r0,r0,#16
000550  01a00820          LSREQ    r0,r0,#16
000554  1afffff9          BNE      |L1.1344|
;;;72     }
000558  e12fff1e          BX       lr
;;;73     
                          ENDP

                  |L1.1372|
                          DCD      0x11111111
                  |L1.1376|
                          DCD      ||.bss||+0x40
                  |L1.1380|
                          DCD      ||.bss||
                  |L1.1384|
                          DCD      0x01250c11
                  |L1.1388|
                          DCD      chk_link

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  rx_desc
                          %        64
                  tx_desc
                          %        64
                  rx_buf
                          %        6080
                  tx_buf
                          %        6080

                          AREA ||.data||, DATA, ALIGN=2

                  plugged
                          DCD      0x00000000
                  cur_tx_desc_ptr
                          DCD      0x00000000
                  cur_rx_desc_ptr
                          DCD      0x00000000
                  fin_tx_desc_ptr
                          DCD      0x00000000
