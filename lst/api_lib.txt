; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\api_lib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\api_lib.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\api_lib.crf lwip-1.4.1\src\api\api_lib.c]
                          ARM

                          AREA ||i.netconn_accept||, CODE, READONLY, ALIGN=2

                  netconn_accept PROC
;;;276    err_t
;;;277    netconn_accept(struct netconn *conn, struct netconn **new_conn)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;278    {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;279    #if LWIP_TCP
;;;280      struct netconn *newconn;
;;;281      err_t err;
;;;282    #if TCP_LISTEN_BACKLOG
;;;283      struct api_msg msg;
;;;284    #endif /* TCP_LISTEN_BACKLOG */
;;;285    
;;;286      LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
00000c  e1a00000          MOV      r0,r0
000010  e3550000          CMP      r5,#0
000014  1a000008          BNE      |L1.60|
000018  e1a00000          MOV      r0,r0
00001c  e28f3f4a          ADR      r3,|L1.332|
000020  e59f2144          LDR      r2,|L1.364|
000024  e28f1f51          ADR      r1,|L1.368|
000028  e28f0e16          ADR      r0,|L1.400|
00002c  ebfffffe          BL       sysprintf
000030  e1a00000          MOV      r0,r0
000034  e3e0000d          MVN      r0,#0xd
                  |L1.56|
;;;287      *new_conn = NULL;
;;;288      LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
;;;289      LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
;;;290    
;;;291      err = conn->last_err;
;;;292      if (ERR_IS_FATAL(err)) {
;;;293        /* don't recv on fatal errors: this might block the application task
;;;294           waiting on acceptmbox forever! */
;;;295        return err;
;;;296      }
;;;297    
;;;298    #if LWIP_SO_RCVTIMEO
;;;299      if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
;;;300        NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
;;;301        return ERR_TIMEOUT;
;;;302      }
;;;303    #else
;;;304      sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
;;;305    #endif /* LWIP_SO_RCVTIMEO*/
;;;306      /* Register event with callback */
;;;307      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
;;;308    
;;;309      if (newconn == NULL) {
;;;310        /* connection has been aborted */
;;;311        NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
;;;312        return ERR_ABRT;
;;;313      }
;;;314    #if TCP_LISTEN_BACKLOG
;;;315      /* Let the stack know that we have accepted the connection. */
;;;316      msg.function = do_recv;
;;;317      msg.msg.conn = conn;
;;;318      /* don't care for the return value of do_recv */
;;;319      TCPIP_APIMSG(&msg);
;;;320    #endif /* TCP_LISTEN_BACKLOG */
;;;321    
;;;322      *new_conn = newconn;
;;;323      /* don't set conn->last_err: it's only ERR_OK, anyway */
;;;324      return ERR_OK;
;;;325    #else /* LWIP_TCP */
;;;326      LWIP_UNUSED_ARG(conn);
;;;327      LWIP_UNUSED_ARG(new_conn);
;;;328      return ERR_ARG;
;;;329    #endif /* LWIP_TCP */
;;;330    }
000038  e8bd80f8          POP      {r3-r7,pc}
                  |L1.60|
00003c  e1a00000          MOV      r0,r0                 ;286
000040  e3a00000          MOV      r0,#0                 ;287
000044  e5850000          STR      r0,[r5,#0]            ;287
000048  e1a00000          MOV      r0,r0                 ;288
00004c  e3540000          CMP      r4,#0                 ;288
000050  1a000008          BNE      |L1.120|
000054  e1a00000          MOV      r0,r0                 ;288
000058  e28f30ec          ADR      r3,|L1.332|
00005c  e3a02e12          MOV      r2,#0x120             ;288
000060  e28f1e15          ADR      r1,|L1.440|
000064  e28f0f49          ADR      r0,|L1.400|
000068  ebfffffe          BL       sysprintf
00006c  e1a00000          MOV      r0,r0                 ;288
000070  e3e0000d          MVN      r0,#0xd               ;288
000074  eaffffef          B        |L1.56|
                  |L1.120|
000078  e1a00000          MOV      r0,r0                 ;288
00007c  e1a00000          MOV      r0,r0                 ;289
000080  e2840014          ADD      r0,r4,#0x14           ;289
000084  ebfffffe          BL       sys_mbox_valid
000088  e3500000          CMP      r0,#0                 ;289
00008c  1a000008          BNE      |L1.180|
000090  e1a00000          MOV      r0,r0                 ;289
000094  e28f30b0          ADR      r3,|L1.332|
000098  e59f2138          LDR      r2,|L1.472|
00009c  e28f1f4e          ADR      r1,|L1.476|
0000a0  e28f00e8          ADR      r0,|L1.400|
0000a4  ebfffffe          BL       sysprintf
0000a8  e1a00000          MOV      r0,r0                 ;289
0000ac  e3e0000d          MVN      r0,#0xd               ;289
0000b0  eaffffe0          B        |L1.56|
                  |L1.180|
0000b4  e1a00000          MOV      r0,r0                 ;289
0000b8  e1d460d8          LDRSB    r6,[r4,#8]            ;291
0000bc  e3760009          CMN      r6,#9                 ;292
0000c0  aa000001          BGE      |L1.204|
0000c4  e1a00006          MOV      r0,r6                 ;295
0000c8  eaffffda          B        |L1.56|
                  |L1.204|
0000cc  e3a02000          MOV      r2,#0                 ;304
0000d0  e1a0100d          MOV      r1,sp                 ;304
0000d4  e2840014          ADD      r0,r4,#0x14           ;304
0000d8  ebfffffe          BL       sys_arch_mbox_fetch
0000dc  e5940028          LDR      r0,[r4,#0x28]         ;307
0000e0  e3500000          CMP      r0,#0                 ;307
0000e4  0a000004          BEQ      |L1.252|
0000e8  e3a02000          MOV      r2,#0                 ;307
0000ec  e3a01001          MOV      r1,#1                 ;307
0000f0  e5943028          LDR      r3,[r4,#0x28]         ;307
0000f4  e1a00004          MOV      r0,r4                 ;307
0000f8  e12fff33          BLX      r3                    ;307
                  |L1.252|
0000fc  e59d0000          LDR      r0,[sp,#0]            ;309
000100  e3500000          CMP      r0,#0                 ;309
000104  1a00000c          BNE      |L1.316|
000108  e1a00000          MOV      r0,r0                 ;311
00010c  ebfffffe          BL       sys_arch_protect
000110  e1a07000          MOV      r7,r0                 ;311
000114  e1d400d8          LDRSB    r0,[r4,#8]            ;311
000118  e3700009          CMN      r0,#9                 ;311
00011c  ba000001          BLT      |L1.296|
000120  e3a000f6          MOV      r0,#0xf6              ;311
000124  e5c40008          STRB     r0,[r4,#8]            ;311
                  |L1.296|
000128  e1a00007          MOV      r0,r7                 ;311
00012c  ebfffffe          BL       sys_arch_unprotect
000130  e1a00000          MOV      r0,r0                 ;311
000134  e3e00009          MVN      r0,#9                 ;312
000138  eaffffbe          B        |L1.56|
                  |L1.316|
00013c  e59d0000          LDR      r0,[sp,#0]            ;322
000140  e5850000          STR      r0,[r5,#0]            ;322
000144  e3a00000          MOV      r0,#0                 ;324
000148  eaffffba          B        |L1.56|
;;;331    
                          ENDP

                  |L1.332|
00014c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000150  2d312e34
000154  2e315c73
000158  72635c61
00015c  70695c61
000160  70695f6c
000164  69622e63
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L1.364|
                          DCD      0x0000011e
                  |L1.368|
000170  6e657463          DCB      "netconn_accept: invalid pointer",0
000174  6f6e6e5f
000178  61636365
00017c  70743a20
000180  696e7661
000184  6c696420
000188  706f696e
00018c  74657200
                  |L1.400|
000190  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000194  7274696f
000198  6e202225
00019c  73222066
0001a0  61696c65
0001a4  64206174
0001a8  206c696e
0001ac  65202564
0001b0  20696e20
0001b4  25730a00
                  |L1.440|
0001b8  6e657463          DCB      "netconn_accept: invalid conn",0
0001bc  6f6e6e5f
0001c0  61636365
0001c4  70743a20
0001c8  696e7661
0001cc  6c696420
0001d0  636f6e6e
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L1.472|
                          DCD      0x00000121
                  |L1.476|
0001dc  6e657463          DCB      "netconn_accept: invalid acceptmbox",0
0001e0  6f6e6e5f
0001e4  61636365
0001e8  70743a20
0001ec  696e7661
0001f0  6c696420
0001f4  61636365
0001f8  70746d62
0001fc  6f7800  
0001ff  00                DCB      0

                          AREA ||i.netconn_bind||, CODE, READONLY, ALIGN=2

                  netconn_bind PROC
;;;165    err_t
;;;166    netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;167    {
000004  e24dd018          SUB      sp,sp,#0x18
000008  e1a04000          MOV      r4,r0
00000c  e1a06001          MOV      r6,r1
000010  e1a07002          MOV      r7,r2
;;;168      struct api_msg msg;
;;;169      err_t err;
;;;170    
;;;171      LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
000014  e1a00000          MOV      r0,r0
000018  e3540000          CMP      r4,#0
00001c  1a000009          BNE      |L2.72|
000020  e1a00000          MOV      r0,r0
000024  e28f3070          ADR      r3,|L2.156|
000028  e3a020ab          MOV      r2,#0xab
00002c  e28f1088          ADR      r1,|L2.188|
000030  e28f00a0          ADR      r0,|L2.216|
000034  ebfffffe          BL       sysprintf
000038  e1a00000          MOV      r0,r0
00003c  e3e0000d          MVN      r0,#0xd
                  |L2.64|
000040  e28dd018          ADD      sp,sp,#0x18
;;;172    
;;;173      msg.function = do_bind;
;;;174      msg.msg.conn = conn;
;;;175      msg.msg.msg.bc.ipaddr = addr;
;;;176      msg.msg.msg.bc.port = port;
;;;177      err = TCPIP_APIMSG(&msg);
;;;178    
;;;179      NETCONN_SET_SAFE_ERR(conn, err);
;;;180      return err;
;;;181    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L2.72|
000048  e1a00000          MOV      r0,r0                 ;171
00004c  e59f00ac          LDR      r0,|L2.256|
000050  e58d0000          STR      r0,[sp,#0]            ;173
000054  e58d4004          STR      r4,[sp,#4]            ;174
000058  e58d600c          STR      r6,[sp,#0xc]          ;175
00005c  e1cd71b0          STRH     r7,[sp,#0x10]         ;176
000060  e1a0000d          MOV      r0,sp                 ;177
000064  ebfffffe          BL       tcpip_apimsg
000068  e1a05000          MOV      r5,r0                 ;177
00006c  e1a00000          MOV      r0,r0                 ;179
000070  ebfffffe          BL       sys_arch_protect
000074  e1a08000          MOV      r8,r0                 ;179
000078  e1d400d8          LDRSB    r0,[r4,#8]            ;179
00007c  e3700009          CMN      r0,#9                 ;179
000080  ba000000          BLT      |L2.136|
000084  e5c45008          STRB     r5,[r4,#8]            ;179
                  |L2.136|
000088  e1a00008          MOV      r0,r8                 ;179
00008c  ebfffffe          BL       sys_arch_unprotect
000090  e1a00000          MOV      r0,r0                 ;179
000094  e1a00005          MOV      r0,r5                 ;180
000098  eaffffe8          B        |L2.64|
;;;182    
                          ENDP

                  |L2.156|
00009c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
0000a0  2d312e34
0000a4  2e315c73
0000a8  72635c61
0000ac  70695c61
0000b0  70695f6c
0000b4  69622e63
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L2.188|
0000bc  6e657463          DCB      "netconn_bind: invalid conn",0
0000c0  6f6e6e5f
0000c4  62696e64
0000c8  3a20696e
0000cc  76616c69
0000d0  6420636f
0000d4  6e6e00  
0000d7  00                DCB      0
                  |L2.216|
0000d8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000dc  7274696f
0000e0  6e202225
0000e4  73222066
0000e8  61696c65
0000ec  64206174
0000f0  206c696e
0000f4  65202564
0000f8  20696e20
0000fc  25730a00
                  |L2.256|
                          DCD      do_bind

                          AREA ||i.netconn_close||, CODE, READONLY, ALIGN=2

                  netconn_close PROC
;;;688    err_t
;;;689    netconn_close(struct netconn *conn)
000000  e92d4010          PUSH     {r4,lr}
;;;690    {
000004  e1a04000          MOV      r4,r0
;;;691      /* shutting down both ends is the same as closing */
;;;692      return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
000008  e3a01003          MOV      r1,#3
00000c  e1a00004          MOV      r0,r4
000010  ebfffffe          BL       netconn_close_shutdown
;;;693    }
000014  e8bd8010          POP      {r4,pc}
;;;694    
                          ENDP


                          AREA ||i.netconn_close_shutdown||, CODE, READONLY, ALIGN=2

                  netconn_close_shutdown PROC
;;;662    static err_t
;;;663    netconn_close_shutdown(struct netconn *conn, u8_t how)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;664    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a06001          MOV      r6,r1
;;;665      struct api_msg msg;
;;;666      err_t err;
;;;667    
;;;668      LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
000010  e1a00000          MOV      r0,r0
000014  e3540000          CMP      r4,#0
000018  1a000009          BNE      |L4.68|
00001c  e1a00000          MOV      r0,r0
000020  e28f306c          ADR      r3,|L4.148|
000024  e3a02fa7          MOV      r2,#0x29c
000028  e28f1084          ADR      r1,|L4.180|
00002c  e28f009c          ADR      r0,|L4.208|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
000038  e3e0000d          MVN      r0,#0xd
                  |L4.60|
00003c  e28dd01c          ADD      sp,sp,#0x1c
;;;669    
;;;670      msg.function = do_close;
;;;671      msg.msg.conn = conn;
;;;672      /* shutting down both ends is the same as closing */
;;;673      msg.msg.msg.sd.shut = how;
;;;674      /* because of the LWIP_TCPIP_CORE_LOCKING implementation of do_close,
;;;675         don't use TCPIP_APIMSG here */
;;;676      err = tcpip_apimsg(&msg);
;;;677    
;;;678      NETCONN_SET_SAFE_ERR(conn, err);
;;;679      return err;
;;;680    }
000040  e8bd80f0          POP      {r4-r7,pc}
                  |L4.68|
000044  e1a00000          MOV      r0,r0                 ;668
000048  e59f00a8          LDR      r0,|L4.248|
00004c  e58d0004          STR      r0,[sp,#4]            ;670
000050  e58d4008          STR      r4,[sp,#8]            ;671
000054  e5cd6010          STRB     r6,[sp,#0x10]         ;673
000058  e28d0004          ADD      r0,sp,#4              ;676
00005c  ebfffffe          BL       tcpip_apimsg
000060  e1a05000          MOV      r5,r0                 ;676
000064  e1a00000          MOV      r0,r0                 ;678
000068  ebfffffe          BL       sys_arch_protect
00006c  e1a07000          MOV      r7,r0                 ;678
000070  e1d400d8          LDRSB    r0,[r4,#8]            ;678
000074  e3700009          CMN      r0,#9                 ;678
000078  ba000000          BLT      |L4.128|
00007c  e5c45008          STRB     r5,[r4,#8]            ;678
                  |L4.128|
000080  e1a00007          MOV      r0,r7                 ;678
000084  ebfffffe          BL       sys_arch_unprotect
000088  e1a00000          MOV      r0,r0                 ;678
00008c  e1a00005          MOV      r0,r5                 ;679
000090  eaffffe9          B        |L4.60|
;;;681    
                          ENDP

                  |L4.148|
000094  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000098  2d312e34
00009c  2e315c73
0000a0  72635c61
0000a4  70695c61
0000a8  70695f6c
0000ac  69622e63
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L4.180|
0000b4  6e657463          DCB      "netconn_close: invalid conn",0
0000b8  6f6e6e5f
0000bc  636c6f73
0000c0  653a2069
0000c4  6e76616c
0000c8  69642063
0000cc  6f6e6e00
                  |L4.208|
0000d0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d4  7274696f
0000d8  6e202225
0000dc  73222066
0000e0  61696c65
0000e4  64206174
0000e8  206c696e
0000ec  65202564
0000f0  20696e20
0000f4  25730a00
                  |L4.248|
                          DCD      do_close

                          AREA ||i.netconn_connect||, CODE, READONLY, ALIGN=2

                  netconn_connect PROC
;;;191    err_t
;;;192    netconn_connect(struct netconn *conn, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;193    {
000004  e24dd018          SUB      sp,sp,#0x18
000008  e1a04000          MOV      r4,r0
00000c  e1a06001          MOV      r6,r1
000010  e1a07002          MOV      r7,r2
;;;194      struct api_msg msg;
;;;195      err_t err;
;;;196    
;;;197      LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
000014  e1a00000          MOV      r0,r0
000018  e3540000          CMP      r4,#0
00001c  1a000009          BNE      |L5.72|
000020  e1a00000          MOV      r0,r0
000024  e28f3070          ADR      r3,|L5.156|
000028  e3a020c5          MOV      r2,#0xc5
00002c  e28f1088          ADR      r1,|L5.188|
000030  e28f00a4          ADR      r0,|L5.220|
000034  ebfffffe          BL       sysprintf
000038  e1a00000          MOV      r0,r0
00003c  e3e0000d          MVN      r0,#0xd
                  |L5.64|
000040  e28dd018          ADD      sp,sp,#0x18
;;;198    
;;;199      msg.function = do_connect;
;;;200      msg.msg.conn = conn;
;;;201      msg.msg.msg.bc.ipaddr = addr;
;;;202      msg.msg.msg.bc.port = port;
;;;203      /* This is the only function which need to not block tcpip_thread */
;;;204      err = tcpip_apimsg(&msg);
;;;205    
;;;206      NETCONN_SET_SAFE_ERR(conn, err);
;;;207      return err;
;;;208    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L5.72|
000048  e1a00000          MOV      r0,r0                 ;197
00004c  e59f00b0          LDR      r0,|L5.260|
000050  e58d0000          STR      r0,[sp,#0]            ;199
000054  e58d4004          STR      r4,[sp,#4]            ;200
000058  e58d600c          STR      r6,[sp,#0xc]          ;201
00005c  e1cd71b0          STRH     r7,[sp,#0x10]         ;202
000060  e1a0000d          MOV      r0,sp                 ;204
000064  ebfffffe          BL       tcpip_apimsg
000068  e1a05000          MOV      r5,r0                 ;204
00006c  e1a00000          MOV      r0,r0                 ;206
000070  ebfffffe          BL       sys_arch_protect
000074  e1a08000          MOV      r8,r0                 ;206
000078  e1d400d8          LDRSB    r0,[r4,#8]            ;206
00007c  e3700009          CMN      r0,#9                 ;206
000080  ba000000          BLT      |L5.136|
000084  e5c45008          STRB     r5,[r4,#8]            ;206
                  |L5.136|
000088  e1a00008          MOV      r0,r8                 ;206
00008c  ebfffffe          BL       sys_arch_unprotect
000090  e1a00000          MOV      r0,r0                 ;206
000094  e1a00005          MOV      r0,r5                 ;207
000098  eaffffe8          B        |L5.64|
;;;209    
                          ENDP

                  |L5.156|
00009c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
0000a0  2d312e34
0000a4  2e315c73
0000a8  72635c61
0000ac  70695c61
0000b0  70695f6c
0000b4  69622e63
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L5.188|
0000bc  6e657463          DCB      "netconn_connect: invalid conn",0
0000c0  6f6e6e5f
0000c4  636f6e6e
0000c8  6563743a
0000cc  20696e76
0000d0  616c6964
0000d4  20636f6e
0000d8  6e00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L5.220|
0000dc  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000e0  7274696f
0000e4  6e202225
0000e8  73222066
0000ec  61696c65
0000f0  64206174
0000f4  206c696e
0000f8  65202564
0000fc  20696e20
000100  25730a00
                  |L5.260|
                          DCD      do_connect

                          AREA ||i.netconn_delete||, CODE, READONLY, ALIGN=2

                  netconn_delete PROC
;;;102    err_t
;;;103    netconn_delete(struct netconn *conn)
000000  e92d4010          PUSH     {r4,lr}
;;;104    {
000004  e24dd018          SUB      sp,sp,#0x18
000008  e1a04000          MOV      r4,r0
;;;105      struct api_msg msg;
;;;106    
;;;107      /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
;;;108      if (conn == NULL) {
00000c  e3540000          CMP      r4,#0
000010  1a000002          BNE      |L6.32|
;;;109        return ERR_OK;
000014  e3a00000          MOV      r0,#0
                  |L6.24|
000018  e28dd018          ADD      sp,sp,#0x18
;;;110      }
;;;111    
;;;112      msg.function = do_delconn;
;;;113      msg.msg.conn = conn;
;;;114      tcpip_apimsg(&msg);
;;;115    
;;;116      netconn_free(conn);
;;;117    
;;;118      /* don't care for return value of do_delconn since it only calls void functions */
;;;119    
;;;120      return ERR_OK;
;;;121    }
00001c  e8bd8010          POP      {r4,pc}
                  |L6.32|
000020  e59f001c          LDR      r0,|L6.68|
000024  e58d0000          STR      r0,[sp,#0]            ;112
000028  e58d4004          STR      r4,[sp,#4]            ;113
00002c  e1a0000d          MOV      r0,sp                 ;114
000030  ebfffffe          BL       tcpip_apimsg
000034  e1a00004          MOV      r0,r4                 ;116
000038  ebfffffe          BL       netconn_free
00003c  e3a00000          MOV      r0,#0                 ;120
000040  eafffff4          B        |L6.24|
;;;122    
                          ENDP

                  |L6.68|
                          DCD      do_delconn

                          AREA ||i.netconn_disconnect||, CODE, READONLY, ALIGN=2

                  netconn_disconnect PROC
;;;216    err_t
;;;217    netconn_disconnect(struct netconn *conn)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;218    {
000004  e24dd018          SUB      sp,sp,#0x18
000008  e1a04000          MOV      r4,r0
;;;219      struct api_msg msg;
;;;220      err_t err;
;;;221    
;;;222      LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
00000c  e1a00000          MOV      r0,r0
000010  e3540000          CMP      r4,#0
000014  1a000009          BNE      |L7.64|
000018  e1a00000          MOV      r0,r0
00001c  e28f3068          ADR      r3,|L7.140|
000020  e3a020de          MOV      r2,#0xde
000024  e28f1080          ADR      r1,|L7.172|
000028  e28f00a0          ADR      r0,|L7.208|
00002c  ebfffffe          BL       sysprintf
000030  e1a00000          MOV      r0,r0
000034  e3e0000d          MVN      r0,#0xd
                  |L7.56|
000038  e28dd018          ADD      sp,sp,#0x18
;;;223    
;;;224      msg.function = do_disconnect;
;;;225      msg.msg.conn = conn;
;;;226      err = TCPIP_APIMSG(&msg);
;;;227    
;;;228      NETCONN_SET_SAFE_ERR(conn, err);
;;;229      return err;
;;;230    }
00003c  e8bd8070          POP      {r4-r6,pc}
                  |L7.64|
000040  e1a00000          MOV      r0,r0                 ;222
000044  e59f00ac          LDR      r0,|L7.248|
000048  e58d0000          STR      r0,[sp,#0]            ;224
00004c  e58d4004          STR      r4,[sp,#4]            ;225
000050  e1a0000d          MOV      r0,sp                 ;226
000054  ebfffffe          BL       tcpip_apimsg
000058  e1a05000          MOV      r5,r0                 ;226
00005c  e1a00000          MOV      r0,r0                 ;228
000060  ebfffffe          BL       sys_arch_protect
000064  e1a06000          MOV      r6,r0                 ;228
000068  e1d400d8          LDRSB    r0,[r4,#8]            ;228
00006c  e3700009          CMN      r0,#9                 ;228
000070  ba000000          BLT      |L7.120|
000074  e5c45008          STRB     r5,[r4,#8]            ;228
                  |L7.120|
000078  e1a00006          MOV      r0,r6                 ;228
00007c  ebfffffe          BL       sys_arch_unprotect
000080  e1a00000          MOV      r0,r0                 ;228
000084  e1a00005          MOV      r0,r5                 ;229
000088  eaffffea          B        |L7.56|
;;;231    
                          ENDP

                  |L7.140|
00008c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000090  2d312e34
000094  2e315c73
000098  72635c61
00009c  70695c61
0000a0  70695f6c
0000a4  69622e63
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L7.172|
0000ac  6e657463          DCB      "netconn_disconnect: invalid conn",0
0000b0  6f6e6e5f
0000b4  64697363
0000b8  6f6e6e65
0000bc  63743a20
0000c0  696e7661
0000c4  6c696420
0000c8  636f6e6e
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L7.208|
0000d0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d4  7274696f
0000d8  6e202225
0000dc  73222066
0000e0  61696c65
0000e4  64206174
0000e8  206c696e
0000ec  65202564
0000f0  20696e20
0000f4  25730a00
                  |L7.248|
                          DCD      do_disconnect

                          AREA ||i.netconn_getaddr||, CODE, READONLY, ALIGN=2

                  netconn_getaddr PROC
;;;134    err_t
;;;135    netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;136    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a05001          MOV      r5,r1
000010  e1a06002          MOV      r6,r2
000014  e1a08003          MOV      r8,r3
;;;137      struct api_msg msg;
;;;138      err_t err;
;;;139    
;;;140      LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
000018  e1a00000          MOV      r0,r0
00001c  e3540000          CMP      r4,#0
000020  1a000009          BNE      |L8.76|
000024  e1a00000          MOV      r0,r0
000028  e28f30dc          ADR      r3,|L8.268|
00002c  e3a0208c          MOV      r2,#0x8c
000030  e28f10f4          ADR      r1,|L8.300|
000034  e28f0e11          ADR      r0,|L8.332|
000038  ebfffffe          BL       sysprintf
00003c  e1a00000          MOV      r0,r0
000040  e3e0000d          MVN      r0,#0xd
                  |L8.68|
000044  e28dd01c          ADD      sp,sp,#0x1c
;;;141      LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
;;;142      LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
;;;143    
;;;144      msg.function = do_getaddr;
;;;145      msg.msg.conn = conn;
;;;146      msg.msg.msg.ad.ipaddr = addr;
;;;147      msg.msg.msg.ad.port = port;
;;;148      msg.msg.msg.ad.local = local;
;;;149      err = TCPIP_APIMSG(&msg);
;;;150    
;;;151      NETCONN_SET_SAFE_ERR(conn, err);
;;;152      return err;
;;;153    }
000048  e8bd83f0          POP      {r4-r9,pc}
                  |L8.76|
00004c  e1a00000          MOV      r0,r0                 ;140
000050  e1a00000          MOV      r0,r0                 ;141
000054  e3550000          CMP      r5,#0                 ;141
000058  1a000008          BNE      |L8.128|
00005c  e1a00000          MOV      r0,r0                 ;141
000060  e28f30a4          ADR      r3,|L8.268|
000064  e3a0208d          MOV      r2,#0x8d              ;141
000068  e28f1f41          ADR      r1,|L8.372|
00006c  e28f00d8          ADR      r0,|L8.332|
000070  ebfffffe          BL       sysprintf
000074  e1a00000          MOV      r0,r0                 ;141
000078  e3e0000d          MVN      r0,#0xd               ;141
00007c  eafffff0          B        |L8.68|
                  |L8.128|
000080  e1a00000          MOV      r0,r0                 ;141
000084  e1a00000          MOV      r0,r0                 ;142
000088  e3560000          CMP      r6,#0                 ;142
00008c  1a000008          BNE      |L8.180|
000090  e1a00000          MOV      r0,r0                 ;142
000094  e28f3070          ADR      r3,|L8.268|
000098  e3a0208e          MOV      r2,#0x8e              ;142
00009c  e28f10f0          ADR      r1,|L8.404|
0000a0  e28f00a4          ADR      r0,|L8.332|
0000a4  ebfffffe          BL       sysprintf
0000a8  e1a00000          MOV      r0,r0                 ;142
0000ac  e3e0000d          MVN      r0,#0xd               ;142
0000b0  eaffffe3          B        |L8.68|
                  |L8.180|
0000b4  e1a00000          MOV      r0,r0                 ;142
0000b8  e59f00f4          LDR      r0,|L8.436|
0000bc  e58d0004          STR      r0,[sp,#4]            ;144
0000c0  e58d4008          STR      r4,[sp,#8]            ;145
0000c4  e58d5010          STR      r5,[sp,#0x10]         ;146
0000c8  e58d6014          STR      r6,[sp,#0x14]         ;147
0000cc  e5cd8018          STRB     r8,[sp,#0x18]         ;148
0000d0  e28d0004          ADD      r0,sp,#4              ;149
0000d4  ebfffffe          BL       tcpip_apimsg
0000d8  e1a07000          MOV      r7,r0                 ;149
0000dc  e1a00000          MOV      r0,r0                 ;151
0000e0  ebfffffe          BL       sys_arch_protect
0000e4  e1a09000          MOV      r9,r0                 ;151
0000e8  e1d400d8          LDRSB    r0,[r4,#8]            ;151
0000ec  e3700009          CMN      r0,#9                 ;151
0000f0  ba000000          BLT      |L8.248|
0000f4  e5c47008          STRB     r7,[r4,#8]            ;151
                  |L8.248|
0000f8  e1a00009          MOV      r0,r9                 ;151
0000fc  ebfffffe          BL       sys_arch_unprotect
000100  e1a00000          MOV      r0,r0                 ;151
000104  e1a00007          MOV      r0,r7                 ;152
000108  eaffffcd          B        |L8.68|
;;;154    
                          ENDP

                  |L8.268|
00010c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000110  2d312e34
000114  2e315c73
000118  72635c61
00011c  70695c61
000120  70695f6c
000124  69622e63
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L8.300|
00012c  6e657463          DCB      "netconn_getaddr: invalid conn",0
000130  6f6e6e5f
000134  67657461
000138  6464723a
00013c  20696e76
000140  616c6964
000144  20636f6e
000148  6e00    
00014a  00                DCB      0
00014b  00                DCB      0
                  |L8.332|
00014c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000150  7274696f
000154  6e202225
000158  73222066
00015c  61696c65
000160  64206174
000164  206c696e
000168  65202564
00016c  20696e20
000170  25730a00
                  |L8.372|
000174  6e657463          DCB      "netconn_getaddr: invalid addr",0
000178  6f6e6e5f
00017c  67657461
000180  6464723a
000184  20696e76
000188  616c6964
00018c  20616464
000190  7200    
000192  00                DCB      0
000193  00                DCB      0
                  |L8.404|
000194  6e657463          DCB      "netconn_getaddr: invalid port",0
000198  6f6e6e5f
00019c  67657461
0001a0  6464723a
0001a4  20696e76
0001a8  616c6964
0001ac  20706f72
0001b0  7400    
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L8.436|
                          DCD      do_getaddr

                          AREA ||i.netconn_listen_with_backlog||, CODE, READONLY, ALIGN=2

                  netconn_listen_with_backlog PROC
;;;240    err_t
;;;241    netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;242    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a07001          MOV      r7,r1
;;;243    #if LWIP_TCP
;;;244      struct api_msg msg;
;;;245      err_t err;
;;;246    
;;;247      /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
;;;248      LWIP_UNUSED_ARG(backlog);
;;;249    
;;;250      LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
000010  e1a00000          MOV      r0,r0
000014  e3540000          CMP      r4,#0
000018  1a000009          BNE      |L9.68|
00001c  e1a00000          MOV      r0,r0
000020  e28f3068          ADR      r3,|L9.144|
000024  e3a020fa          MOV      r2,#0xfa
000028  e28f1080          ADR      r1,|L9.176|
00002c  e28f009c          ADR      r0,|L9.208|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
000038  e3e0000d          MVN      r0,#0xd
                  |L9.60|
00003c  e28dd01c          ADD      sp,sp,#0x1c
;;;251    
;;;252      msg.function = do_listen;
;;;253      msg.msg.conn = conn;
;;;254    #if TCP_LISTEN_BACKLOG
;;;255      msg.msg.msg.lb.backlog = backlog;
;;;256    #endif /* TCP_LISTEN_BACKLOG */
;;;257      err = TCPIP_APIMSG(&msg);
;;;258    
;;;259      NETCONN_SET_SAFE_ERR(conn, err);
;;;260      return err;
;;;261    #else /* LWIP_TCP */
;;;262      LWIP_UNUSED_ARG(conn);
;;;263      LWIP_UNUSED_ARG(backlog);
;;;264      return ERR_ARG;
;;;265    #endif /* LWIP_TCP */
;;;266    }
000040  e8bd80f0          POP      {r4-r7,pc}
                  |L9.68|
000044  e1a00000          MOV      r0,r0                 ;250
000048  e59f00a8          LDR      r0,|L9.248|
00004c  e58d0004          STR      r0,[sp,#4]            ;252
000050  e58d4008          STR      r4,[sp,#8]            ;253
000054  e28d0004          ADD      r0,sp,#4              ;257
000058  ebfffffe          BL       tcpip_apimsg
00005c  e1a05000          MOV      r5,r0                 ;257
000060  e1a00000          MOV      r0,r0                 ;259
000064  ebfffffe          BL       sys_arch_protect
000068  e1a06000          MOV      r6,r0                 ;259
00006c  e1d400d8          LDRSB    r0,[r4,#8]            ;259
000070  e3700009          CMN      r0,#9                 ;259
000074  ba000000          BLT      |L9.124|
000078  e5c45008          STRB     r5,[r4,#8]            ;259
                  |L9.124|
00007c  e1a00006          MOV      r0,r6                 ;259
000080  ebfffffe          BL       sys_arch_unprotect
000084  e1a00000          MOV      r0,r0                 ;259
000088  e1a00005          MOV      r0,r5                 ;260
00008c  eaffffea          B        |L9.60|
;;;267    
                          ENDP

                  |L9.144|
000090  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000094  2d312e34
000098  2e315c73
00009c  72635c61
0000a0  70695c61
0000a4  70695f6c
0000a8  69622e63
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L9.176|
0000b0  6e657463          DCB      "netconn_listen: invalid conn",0
0000b4  6f6e6e5f
0000b8  6c697374
0000bc  656e3a20
0000c0  696e7661
0000c4  6c696420
0000c8  636f6e6e
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L9.208|
0000d0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d4  7274696f
0000d8  6e202225
0000dc  73222066
0000e0  61696c65
0000e4  64206174
0000e8  206c696e
0000ec  65202564
0000f0  20696e20
0000f4  25730a00
                  |L9.248|
                          DCD      do_listen

                          AREA ||i.netconn_new_with_proto_and_callback||, CODE, READONLY, ALIGN=2

                  netconn_new_with_proto_and_callback PROC
;;;67     struct netconn*
;;;68     netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;69     {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a07000          MOV      r7,r0
00000c  e1a05001          MOV      r5,r1
000010  e1a06002          MOV      r6,r2
;;;70       struct netconn *conn;
;;;71       struct api_msg msg;
;;;72     
;;;73       conn = netconn_alloc(t, callback);
000014  e1a01006          MOV      r1,r6
000018  e1a00007          MOV      r0,r7
00001c  ebfffffe          BL       netconn_alloc
000020  e1a04000          MOV      r4,r0
;;;74       if (conn != NULL) {
000024  e3540000          CMP      r4,#0
000028  0a000044          BEQ      |L10.320|
;;;75         msg.function = do_newconn;
00002c  e59f0114          LDR      r0,|L10.328|
000030  e58d0004          STR      r0,[sp,#4]
;;;76         msg.msg.msg.n.proto = proto;
000034  e5cd5010          STRB     r5,[sp,#0x10]
;;;77         msg.msg.conn = conn;
000038  e58d4008          STR      r4,[sp,#8]
;;;78         if (TCPIP_APIMSG(&msg) != ERR_OK) {
00003c  e28d0004          ADD      r0,sp,#4
000040  ebfffffe          BL       tcpip_apimsg
000044  e3500000          CMP      r0,#0
000048  0a00003c          BEQ      |L10.320|
;;;79           LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
00004c  e1a00000          MOV      r0,r0
000050  e5940004          LDR      r0,[r4,#4]
000054  e3500000          CMP      r0,#0
000058  0a000006          BEQ      |L10.120|
00005c  e1a00000          MOV      r0,r0
000060  e28f30e4          ADR      r3,|L10.332|
000064  e3a0204f          MOV      r2,#0x4f
000068  e28f10fc          ADR      r1,|L10.364|
00006c  e28f0f47          ADR      r0,|L10.400|
000070  ebfffffe          BL       sysprintf
000074  e1a00000          MOV      r0,r0
                  |L10.120|
000078  e1a00000          MOV      r0,r0
;;;80           LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
00007c  e1a00000          MOV      r0,r0
000080  e284000c          ADD      r0,r4,#0xc
000084  ebfffffe          BL       sys_sem_valid
000088  e3500000          CMP      r0,#0
00008c  1a000006          BNE      |L10.172|
000090  e1a00000          MOV      r0,r0
000094  e28f30b0          ADR      r3,|L10.332|
000098  e3a02050          MOV      r2,#0x50
00009c  e28f1f45          ADR      r1,|L10.440|
0000a0  e28f00e8          ADR      r0,|L10.400|
0000a4  ebfffffe          BL       sysprintf
0000a8  e1a00000          MOV      r0,r0
                  |L10.172|
0000ac  e1a00000          MOV      r0,r0
;;;81           LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
0000b0  e1a00000          MOV      r0,r0
0000b4  e2840010          ADD      r0,r4,#0x10
0000b8  ebfffffe          BL       sys_mbox_valid
0000bc  e3500000          CMP      r0,#0
0000c0  1a000006          BNE      |L10.224|
0000c4  e1a00000          MOV      r0,r0
0000c8  e28f307c          ADR      r3,|L10.332|
0000cc  e3a02051          MOV      r2,#0x51
0000d0  e28f10fc          ADR      r1,|L10.468|
0000d4  e28f00b4          ADR      r0,|L10.400|
0000d8  ebfffffe          BL       sysprintf
0000dc  e1a00000          MOV      r0,r0
                  |L10.224|
0000e0  e1a00000          MOV      r0,r0
;;;82     #if LWIP_TCP
;;;83           LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
0000e4  e1a00000          MOV      r0,r0
0000e8  e2840014          ADD      r0,r4,#0x14
0000ec  ebfffffe          BL       sys_mbox_valid
0000f0  e3500000          CMP      r0,#0
0000f4  0a000006          BEQ      |L10.276|
0000f8  e1a00000          MOV      r0,r0
0000fc  e28f3048          ADR      r3,|L10.332|
000100  e3a02053          MOV      r2,#0x53
000104  e28f10e0          ADR      r1,|L10.492|
000108  e28f0080          ADR      r0,|L10.400|
00010c  ebfffffe          BL       sysprintf
000110  e1a00000          MOV      r0,r0
                  |L10.276|
000114  e1a00000          MOV      r0,r0
;;;84     #endif /* LWIP_TCP */
;;;85           sys_sem_free(&conn->op_completed);
000118  e284000c          ADD      r0,r4,#0xc
00011c  ebfffffe          BL       sys_sem_free
;;;86           sys_mbox_free(&conn->recvmbox);
000120  e2840010          ADD      r0,r4,#0x10
000124  ebfffffe          BL       sys_mbox_free
;;;87           memp_free(MEMP_NETCONN, conn);
000128  e1a01004          MOV      r1,r4
00012c  e3a00006          MOV      r0,#6
000130  ebfffffe          BL       memp_free
;;;88           return NULL;
000134  e3a00000          MOV      r0,#0
                  |L10.312|
000138  e28dd01c          ADD      sp,sp,#0x1c
;;;89         }
;;;90       }
;;;91       return conn;
;;;92     }
00013c  e8bd80f0          POP      {r4-r7,pc}
                  |L10.320|
000140  e1a00004          MOV      r0,r4                 ;91
000144  eafffffb          B        |L10.312|
;;;93     
                          ENDP

                  |L10.328|
                          DCD      do_newconn
                  |L10.332|
00014c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000150  2d312e34
000154  2e315c73
000158  72635c61
00015c  70695c61
000160  70695f6c
000164  69622e63
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L10.364|
00016c  66726565          DCB      "freeing conn without freeing pcb",0
000170  696e6720
000174  636f6e6e
000178  20776974
00017c  686f7574
000180  20667265
000184  65696e67
000188  20706362
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L10.400|
000190  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000194  7274696f
000198  6e202225
00019c  73222066
0001a0  61696c65
0001a4  64206174
0001a8  206c696e
0001ac  65202564
0001b0  20696e20
0001b4  25730a00
                  |L10.440|
0001b8  636f6e6e          DCB      "conn has no op_completed",0
0001bc  20686173
0001c0  206e6f20
0001c4  6f705f63
0001c8  6f6d706c
0001cc  65746564
0001d0  00      
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L10.468|
0001d4  636f6e6e          DCB      "conn has no recvmbox",0
0001d8  20686173
0001dc  206e6f20
0001e0  72656376
0001e4  6d626f78
0001e8  00      
0001e9  00                DCB      0
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L10.492|
0001ec  636f6e6e          DCB      "conn->acceptmbox shouldn't exist",0
0001f0  2d3e6163
0001f4  63657074
0001f8  6d626f78
0001fc  2073686f
000200  756c646e
000204  27742065
000208  78697374
00020c  00      
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0

                          AREA ||i.netconn_recv||, CODE, READONLY, ALIGN=2

                  netconn_recv PROC
;;;453    err_t
;;;454    netconn_recv(struct netconn *conn, struct netbuf **new_buf)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;455    {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
;;;456    #if LWIP_TCP
;;;457      struct netbuf *buf = NULL;
00000c  e3a04000          MOV      r4,#0
;;;458      err_t err;
;;;459    #endif /* LWIP_TCP */
;;;460    
;;;461      LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
000010  e1a00000          MOV      r0,r0
000014  e3560000          CMP      r6,#0
000018  1a000008          BNE      |L11.64|
00001c  e1a00000          MOV      r0,r0
000020  e28f3f61          ADR      r3,|L11.428|
000024  e59f21a0          LDR      r2,|L11.460|
000028  e28f1e1a          ADR      r1,|L11.464|
00002c  e28f0f6f          ADR      r0,|L11.496|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
000038  e3e0000d          MVN      r0,#0xd
                  |L11.60|
;;;462      *new_buf = NULL;
;;;463      LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
;;;464      LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
;;;465    
;;;466    #if LWIP_TCP
;;;467    #if (LWIP_UDP || LWIP_RAW)
;;;468      if (conn->type == NETCONN_TCP)
;;;469    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;470      {
;;;471        struct pbuf *p = NULL;
;;;472        /* This is not a listening netconn, since recvmbox is set */
;;;473    
;;;474        buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
;;;475        if (buf == NULL) {
;;;476          NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
;;;477          return ERR_MEM;
;;;478        }
;;;479    
;;;480        err = netconn_recv_data(conn, (void **)&p);
;;;481        if (err != ERR_OK) {
;;;482          memp_free(MEMP_NETBUF, buf);
;;;483          return err;
;;;484        }
;;;485        LWIP_ASSERT("p != NULL", p != NULL);
;;;486    
;;;487        buf->p = p;
;;;488        buf->ptr = p;
;;;489        buf->port = 0;
;;;490        ip_addr_set_any(&buf->addr);
;;;491        *new_buf = buf;
;;;492        /* don't set conn->last_err: it's only ERR_OK, anyway */
;;;493        return ERR_OK;
;;;494      }
;;;495    #endif /* LWIP_TCP */
;;;496    #if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
;;;497      else
;;;498    #endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
;;;499      {
;;;500    #if (LWIP_UDP || LWIP_RAW)
;;;501        return netconn_recv_data(conn, (void **)new_buf);
;;;502    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;503      }
;;;504    }
00003c  e8bd83f8          POP      {r3-r9,pc}
                  |L11.64|
000040  e1a00000          MOV      r0,r0                 ;461
000044  e3a00000          MOV      r0,#0                 ;462
000048  e5860000          STR      r0,[r6,#0]            ;462
00004c  e1a00000          MOV      r0,r0                 ;463
000050  e3550000          CMP      r5,#0                 ;463
000054  1a000008          BNE      |L11.124|
000058  e1a00000          MOV      r0,r0                 ;463
00005c  e28f3f52          ADR      r3,|L11.428|
000060  e59f21b0          LDR      r2,|L11.536|
000064  e28f1e1b          ADR      r1,|L11.540|
000068  e28f0d06          ADR      r0,|L11.496|
00006c  ebfffffe          BL       sysprintf
000070  e1a00000          MOV      r0,r0                 ;463
000074  e3e0000d          MVN      r0,#0xd               ;463
000078  eaffffef          B        |L11.60|
                  |L11.124|
00007c  e1a00000          MOV      r0,r0                 ;463
000080  e1a00000          MOV      r0,r0                 ;464
000084  e2850010          ADD      r0,r5,#0x10           ;464
000088  ebfffffe          BL       sys_mbox_valid
00008c  e3500000          CMP      r0,#0                 ;464
000090  1a000008          BNE      |L11.184|
000094  e1a00000          MOV      r0,r0                 ;464
000098  e28f3f43          ADR      r3,|L11.428|
00009c  e3a02e1d          MOV      r2,#0x1d0             ;464
0000a0  e28f1e19          ADR      r1,|L11.568|
0000a4  e28f0f51          ADR      r0,|L11.496|
0000a8  ebfffffe          BL       sysprintf
0000ac  e1a00000          MOV      r0,r0                 ;464
0000b0  e3e0000c          MVN      r0,#0xc               ;464
0000b4  eaffffe0          B        |L11.60|
                  |L11.184|
0000b8  e1a00000          MOV      r0,r0                 ;464
0000bc  e5d50000          LDRB     r0,[r5,#0]            ;468
0000c0  e3500010          CMP      r0,#0x10              ;468
0000c4  1a000033          BNE      |L11.408|
0000c8  e3a00000          MOV      r0,#0                 ;471
0000cc  e58d0000          STR      r0,[sp,#0]            ;471
0000d0  e3a00005          MOV      r0,#5                 ;474
0000d4  ebfffffe          BL       memp_malloc
0000d8  e1a04000          MOV      r4,r0                 ;474
0000dc  e3540000          CMP      r4,#0                 ;475
0000e0  1a00000c          BNE      |L11.280|
0000e4  e1a00000          MOV      r0,r0                 ;476
0000e8  ebfffffe          BL       sys_arch_protect
0000ec  e1a08000          MOV      r8,r0                 ;476
0000f0  e1d500d8          LDRSB    r0,[r5,#8]            ;476
0000f4  e3700009          CMN      r0,#9                 ;476
0000f8  ba000001          BLT      |L11.260|
0000fc  e3a000ff          MOV      r0,#0xff              ;476
000100  e5c50008          STRB     r0,[r5,#8]            ;476
                  |L11.260|
000104  e1a00008          MOV      r0,r8                 ;476
000108  ebfffffe          BL       sys_arch_unprotect
00010c  e1a00000          MOV      r0,r0                 ;476
000110  e3e00000          MVN      r0,#0                 ;477
000114  eaffffc8          B        |L11.60|
                  |L11.280|
000118  e1a0100d          MOV      r1,sp                 ;480
00011c  e1a00005          MOV      r0,r5                 ;480
000120  ebfffffe          BL       netconn_recv_data
000124  e1a07000          MOV      r7,r0                 ;480
000128  e3570000          CMP      r7,#0                 ;481
00012c  0a000004          BEQ      |L11.324|
000130  e1a01004          MOV      r1,r4                 ;482
000134  e3a00005          MOV      r0,#5                 ;482
000138  ebfffffe          BL       memp_free
00013c  e1a00007          MOV      r0,r7                 ;483
000140  eaffffbd          B        |L11.60|
                  |L11.324|
000144  e1a00000          MOV      r0,r0                 ;485
000148  e59d0000          LDR      r0,[sp,#0]            ;485
00014c  e3500000          CMP      r0,#0                 ;485
000150  1a000006          BNE      |L11.368|
000154  e1a00000          MOV      r0,r0                 ;485
000158  e28f304c          ADR      r3,|L11.428|
00015c  e59f20f8          LDR      r2,|L11.604|
000160  e28f10f8          ADR      r1,|L11.608|
000164  e28f0084          ADR      r0,|L11.496|
000168  ebfffffe          BL       sysprintf
00016c  e1a00000          MOV      r0,r0                 ;485
                  |L11.368|
000170  e1a00000          MOV      r0,r0                 ;485
000174  e59d0000          LDR      r0,[sp,#0]            ;487
000178  e5840000          STR      r0,[r4,#0]            ;487
00017c  e59d0000          LDR      r0,[sp,#0]            ;488
000180  e5840004          STR      r0,[r4,#4]            ;488
000184  e3a00000          MOV      r0,#0                 ;489
000188  e1c400bc          STRH     r0,[r4,#0xc]          ;489
00018c  e5840008          STR      r0,[r4,#8]            ;490
000190  e5864000          STR      r4,[r6,#0]            ;491
000194  eaffffa8          B        |L11.60|
                  |L11.408|
000198  e1a00000          MOV      r0,r0                 ;494
00019c  e1a01006          MOV      r1,r6                 ;501
0001a0  e1a00005          MOV      r0,r5                 ;501
0001a4  ebfffffe          BL       netconn_recv_data
0001a8  eaffffa3          B        |L11.60|
;;;505    
                          ENDP

                  |L11.428|
0001ac  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
0001b0  2d312e34
0001b4  2e315c73
0001b8  72635c61
0001bc  70695c61
0001c0  70695f6c
0001c4  69622e63
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L11.460|
                          DCD      0x000001cd
                  |L11.464|
0001d0  6e657463          DCB      "netconn_recv: invalid pointer",0
0001d4  6f6e6e5f
0001d8  72656376
0001dc  3a20696e
0001e0  76616c69
0001e4  6420706f
0001e8  696e7465
0001ec  7200    
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L11.496|
0001f0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0001f4  7274696f
0001f8  6e202225
0001fc  73222066
000200  61696c65
000204  64206174
000208  206c696e
00020c  65202564
000210  20696e20
000214  25730a00
                  |L11.536|
                          DCD      0x000001cf
                  |L11.540|
00021c  6e657463          DCB      "netconn_recv: invalid conn",0
000220  6f6e6e5f
000224  72656376
000228  3a20696e
00022c  76616c69
000230  6420636f
000234  6e6e00  
000237  00                DCB      0
                  |L11.568|
000238  6e657463          DCB      "netconn_accept: invalid recvmbox",0
00023c  6f6e6e5f
000240  61636365
000244  70743a20
000248  696e7661
00024c  6c696420
000250  72656376
000254  6d626f78
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L11.604|
                          DCD      0x000001e5
                  |L11.608|
000260  7020213d          DCB      "p != NULL",0
000264  204e554c
000268  4c00    
00026a  00                DCB      0
00026b  00                DCB      0

                          AREA ||i.netconn_recv_data||, CODE, READONLY, ALIGN=2

                  netconn_recv_data PROC
;;;341    static err_t
;;;342    netconn_recv_data(struct netconn *conn, void **new_buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;343    {
000004  e24dd020          SUB      sp,sp,#0x20
000008  e1a04000          MOV      r4,r0
00000c  e1a05001          MOV      r5,r1
;;;344      void *buf = NULL;
000010  e3a00000          MOV      r0,#0
000014  e58d001c          STR      r0,[sp,#0x1c]
;;;345      u16_t len;
;;;346      err_t err;
;;;347    #if LWIP_TCP
;;;348      struct api_msg msg;
;;;349    #endif /* LWIP_TCP */
;;;350    
;;;351      LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
000018  e1a00000          MOV      r0,r0
00001c  e3550000          CMP      r5,#0
000020  1a000009          BNE      |L12.76|
000024  e1a00000          MOV      r0,r0
000028  e28f3f7d          ADR      r3,|L12.548|
00002c  e59f2210          LDR      r2,|L12.580|
000030  e28f1e21          ADR      r1,|L12.584|
000034  e28f0f8b          ADR      r0,|L12.616|
000038  ebfffffe          BL       sysprintf
00003c  e1a00000          MOV      r0,r0
000040  e3e0000d          MVN      r0,#0xd
                  |L12.68|
000044  e28dd020          ADD      sp,sp,#0x20
;;;352      *new_buf = NULL;
;;;353      LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
;;;354      LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
;;;355    
;;;356      err = conn->last_err;
;;;357      if (ERR_IS_FATAL(err)) {
;;;358        /* don't recv on fatal errors: this might block the application task
;;;359           waiting on recvmbox forever! */
;;;360        /* @todo: this does not allow us to fetch data that has been put into recvmbox
;;;361           before the fatal error occurred - is that a problem? */
;;;362        return err;
;;;363      }
;;;364    
;;;365    #if LWIP_SO_RCVTIMEO
;;;366      if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
;;;367        NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
;;;368        return ERR_TIMEOUT;
;;;369      }
;;;370    #else
;;;371      sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
;;;372    #endif /* LWIP_SO_RCVTIMEO*/
;;;373    
;;;374    #if LWIP_TCP
;;;375    #if (LWIP_UDP || LWIP_RAW)
;;;376      if (conn->type == NETCONN_TCP)
;;;377    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;378      {
;;;379        if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
;;;380          /* Let the stack know that we have taken the data. */
;;;381          /* TODO: Speedup: Don't block and wait for the answer here
;;;382             (to prevent multiple thread-switches). */
;;;383          msg.function = do_recv;
;;;384          msg.msg.conn = conn;
;;;385          if (buf != NULL) {
;;;386            msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
;;;387          } else {
;;;388            msg.msg.msg.r.len = 1;
;;;389          }
;;;390          /* don't care for the return value of do_recv */
;;;391          TCPIP_APIMSG(&msg);
;;;392        }
;;;393    
;;;394        /* If we are closed, we indicate that we no longer wish to use the socket */
;;;395        if (buf == NULL) {
;;;396          API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
;;;397          /* Avoid to lose any previous error code */
;;;398          NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
;;;399          return ERR_CLSD;
;;;400        }
;;;401        len = ((struct pbuf *)buf)->tot_len;
;;;402      }
;;;403    #endif /* LWIP_TCP */
;;;404    #if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
;;;405      else
;;;406    #endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
;;;407    #if (LWIP_UDP || LWIP_RAW)
;;;408      {
;;;409        LWIP_ASSERT("buf != NULL", buf != NULL);
;;;410        len = netbuf_len((struct netbuf *)buf);
;;;411      }
;;;412    #endif /* (LWIP_UDP || LWIP_RAW) */
;;;413    
;;;414    #if LWIP_SO_RCVBUF
;;;415      SYS_ARCH_DEC(conn->recv_avail, len);
;;;416    #endif /* LWIP_SO_RCVBUF */
;;;417      /* Register event with callback */
;;;418      API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
;;;419    
;;;420      LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));
;;;421    
;;;422      *new_buf = buf;
;;;423      /* don't set conn->last_err: it's only ERR_OK, anyway */
;;;424      return ERR_OK;
;;;425    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L12.76|
00004c  e1a00000          MOV      r0,r0                 ;351
000050  e3a00000          MOV      r0,#0                 ;352
000054  e5850000          STR      r0,[r5,#0]            ;352
000058  e1a00000          MOV      r0,r0                 ;353
00005c  e3540000          CMP      r4,#0                 ;353
000060  1a000008          BNE      |L12.136|
000064  e1a00000          MOV      r0,r0                 ;353
000068  e28f3f6d          ADR      r3,|L12.548|
00006c  e59f221c          LDR      r2,|L12.656|
000070  e28f1f87          ADR      r1,|L12.660|
000074  e28f0f7b          ADR      r0,|L12.616|
000078  ebfffffe          BL       sysprintf
00007c  e1a00000          MOV      r0,r0                 ;353
000080  e3e0000d          MVN      r0,#0xd               ;353
000084  eaffffee          B        |L12.68|
                  |L12.136|
000088  e1a00000          MOV      r0,r0                 ;353
00008c  e1a00000          MOV      r0,r0                 ;354
000090  e2840010          ADD      r0,r4,#0x10           ;354
000094  ebfffffe          BL       sys_mbox_valid
000098  e3500000          CMP      r0,#0                 ;354
00009c  1a000008          BNE      |L12.196|
0000a0  e1a00000          MOV      r0,r0                 ;354
0000a4  e28f3f5e          ADR      r3,|L12.548|
0000a8  e59f2200          LDR      r2,|L12.688|
0000ac  e28f1c02          ADR      r1,|L12.692|
0000b0  e28f0e1b          ADR      r0,|L12.616|
0000b4  ebfffffe          BL       sysprintf
0000b8  e1a00000          MOV      r0,r0                 ;354
0000bc  e3e0000c          MVN      r0,#0xc               ;354
0000c0  eaffffdf          B        |L12.68|
                  |L12.196|
0000c4  e1a00000          MOV      r0,r0                 ;354
0000c8  e1d470d8          LDRSB    r7,[r4,#8]            ;356
0000cc  e3770009          CMN      r7,#9                 ;357
0000d0  aa000001          BGE      |L12.220|
0000d4  e1a00007          MOV      r0,r7                 ;362
0000d8  eaffffd9          B        |L12.68|
                  |L12.220|
0000dc  e3a02000          MOV      r2,#0                 ;371
0000e0  e28d101c          ADD      r1,sp,#0x1c           ;371
0000e4  e2840010          ADD      r0,r4,#0x10           ;371
0000e8  ebfffffe          BL       sys_arch_mbox_fetch
0000ec  e5d40000          LDRB     r0,[r4,#0]            ;376
0000f0  e3500010          CMP      r0,#0x10              ;376
0000f4  1a00002f          BNE      |L12.440|
0000f8  e5d4001c          LDRB     r0,[r4,#0x1c]         ;379
0000fc  e2000008          AND      r0,r0,#8              ;379
000100  e3500000          CMP      r0,#0                 ;379
000104  0a000002          BEQ      |L12.276|
000108  e59d001c          LDR      r0,[sp,#0x1c]         ;379
00010c  e3500000          CMP      r0,#0                 ;379
000110  1a00000d          BNE      |L12.332|
                  |L12.276|
000114  e59f01bc          LDR      r0,|L12.728|
000118  e58d0004          STR      r0,[sp,#4]            ;383
00011c  e58d4008          STR      r4,[sp,#8]            ;384
000120  e59d001c          LDR      r0,[sp,#0x1c]         ;385
000124  e3500000          CMP      r0,#0                 ;385
000128  0a000003          BEQ      |L12.316|
00012c  e59d001c          LDR      r0,[sp,#0x1c]         ;386
000130  e1d000b8          LDRH     r0,[r0,#8]            ;386
000134  e58d0010          STR      r0,[sp,#0x10]         ;386
000138  ea000001          B        |L12.324|
                  |L12.316|
00013c  e3a00001          MOV      r0,#1                 ;388
000140  e58d0010          STR      r0,[sp,#0x10]         ;388
                  |L12.324|
000144  e28d0004          ADD      r0,sp,#4              ;391
000148  ebfffffe          BL       tcpip_apimsg
                  |L12.332|
00014c  e59d001c          LDR      r0,[sp,#0x1c]         ;395
000150  e3500000          CMP      r0,#0                 ;395
000154  1a000014          BNE      |L12.428|
000158  e5940028          LDR      r0,[r4,#0x28]         ;396
00015c  e3500000          CMP      r0,#0                 ;396
000160  0a000004          BEQ      |L12.376|
000164  e3a02000          MOV      r2,#0                 ;396
000168  e3a01001          MOV      r1,#1                 ;396
00016c  e5943028          LDR      r3,[r4,#0x28]         ;396
000170  e1a00004          MOV      r0,r4                 ;396
000174  e12fff33          BLX      r3                    ;396
                  |L12.376|
000178  e1a00000          MOV      r0,r0                 ;398
00017c  ebfffffe          BL       sys_arch_protect
000180  e1a08000          MOV      r8,r0                 ;398
000184  e1d400d8          LDRSB    r0,[r4,#8]            ;398
000188  e3700009          CMN      r0,#9                 ;398
00018c  ba000001          BLT      |L12.408|
000190  e3a000f4          MOV      r0,#0xf4              ;398
000194  e5c40008          STRB     r0,[r4,#8]            ;398
                  |L12.408|
000198  e1a00008          MOV      r0,r8                 ;398
00019c  ebfffffe          BL       sys_arch_unprotect
0001a0  e1a00000          MOV      r0,r0                 ;398
0001a4  e3e0000b          MVN      r0,#0xb               ;399
0001a8  eaffffa5          B        |L12.68|
                  |L12.428|
0001ac  e59d001c          LDR      r0,[sp,#0x1c]         ;401
0001b0  e1d060b8          LDRH     r6,[r0,#8]            ;401
0001b4  ea00000e          B        |L12.500|
                  |L12.440|
0001b8  e1a00000          MOV      r0,r0                 ;409
0001bc  e59d001c          LDR      r0,[sp,#0x1c]         ;409
0001c0  e3500000          CMP      r0,#0                 ;409
0001c4  1a000006          BNE      |L12.484|
0001c8  e1a00000          MOV      r0,r0                 ;409
0001cc  e28f3050          ADR      r3,|L12.548|
0001d0  e59f2104          LDR      r2,|L12.732|
0001d4  e28f1f41          ADR      r1,|L12.736|
0001d8  e28f0088          ADR      r0,|L12.616|
0001dc  ebfffffe          BL       sysprintf
0001e0  e1a00000          MOV      r0,r0                 ;409
                  |L12.484|
0001e4  e1a00000          MOV      r0,r0                 ;409
0001e8  e59d001c          LDR      r0,[sp,#0x1c]         ;410
0001ec  e5900000          LDR      r0,[r0,#0]            ;410
0001f0  e1d060b8          LDRH     r6,[r0,#8]            ;410
                  |L12.500|
0001f4  e5940028          LDR      r0,[r4,#0x28]         ;418
0001f8  e3500000          CMP      r0,#0                 ;418
0001fc  0a000004          BEQ      |L12.532|
000200  e1a02006          MOV      r2,r6                 ;418
000204  e3a01001          MOV      r1,#1                 ;418
000208  e5943028          LDR      r3,[r4,#0x28]         ;418
00020c  e1a00004          MOV      r0,r4                 ;418
000210  e12fff33          BLX      r3                    ;418
                  |L12.532|
000214  e59d001c          LDR      r0,[sp,#0x1c]         ;422
000218  e5850000          STR      r0,[r5,#0]            ;422
00021c  e3a00000          MOV      r0,#0                 ;424
000220  eaffff87          B        |L12.68|
                  |L12.548|
000224  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000228  2d312e34
00022c  2e315c73
000230  72635c61
000234  70695c61
000238  70695f6c
00023c  69622e63
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L12.580|
                          DCD      0x0000015f
                  |L12.584|
000248  6e657463          DCB      "netconn_recv: invalid pointer",0
00024c  6f6e6e5f
000250  72656376
000254  3a20696e
000258  76616c69
00025c  6420706f
000260  696e7465
000264  7200    
000266  00                DCB      0
000267  00                DCB      0
                  |L12.616|
000268  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00026c  7274696f
000270  6e202225
000274  73222066
000278  61696c65
00027c  64206174
000280  206c696e
000284  65202564
000288  20696e20
00028c  25730a00
                  |L12.656|
                          DCD      0x00000161
                  |L12.660|
000294  6e657463          DCB      "netconn_recv: invalid conn",0
000298  6f6e6e5f
00029c  72656376
0002a0  3a20696e
0002a4  76616c69
0002a8  6420636f
0002ac  6e6e00  
0002af  00                DCB      0
                  |L12.688|
                          DCD      0x00000162
                  |L12.692|
0002b4  6e657463          DCB      "netconn_accept: invalid recvmbox",0
0002b8  6f6e6e5f
0002bc  61636365
0002c0  70743a20
0002c4  696e7661
0002c8  6c696420
0002cc  72656376
0002d0  6d626f78
0002d4  00      
0002d5  00                DCB      0
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L12.728|
                          DCD      do_recv
                  |L12.732|
                          DCD      0x00000199
                  |L12.736|
0002e0  62756620          DCB      "buf != NULL",0
0002e4  213d204e
0002e8  554c4c00
                          ENDP


                          AREA ||i.netconn_recv_tcp_pbuf||, CODE, READONLY, ALIGN=2

                  netconn_recv_tcp_pbuf PROC
;;;436    err_t
;;;437    netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;438    {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;439      LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
00000c  e1a00000          MOV      r0,r0
000010  e3540000          CMP      r4,#0
000014  0a000002          BEQ      |L13.36|
000018  e5d40000          LDRB     r0,[r4,#0]
00001c  e3500010          CMP      r0,#0x10
000020  0a000008          BEQ      |L13.72|
                  |L13.36|
000024  e1a00000          MOV      r0,r0
000028  e28f302c          ADR      r3,|L13.92|
00002c  e59f2048          LDR      r2,|L13.124|
000030  e28f1048          ADR      r1,|L13.128|
000034  e28f0060          ADR      r0,|L13.156|
000038  ebfffffe          BL       sysprintf
00003c  e1a00000          MOV      r0,r0
000040  e3e0000d          MVN      r0,#0xd
                  |L13.68|
;;;440                 netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);
;;;441    
;;;442      return netconn_recv_data(conn, (void **)new_buf);
;;;443    }
000044  e8bd8070          POP      {r4-r6,pc}
                  |L13.72|
000048  e1a00000          MOV      r0,r0                 ;439
00004c  e1a01005          MOV      r1,r5                 ;442
000050  e1a00004          MOV      r0,r4                 ;442
000054  ebfffffe          BL       netconn_recv_data
000058  eafffff9          B        |L13.68|
;;;444    
                          ENDP

                  |L13.92|
00005c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000060  2d312e34
000064  2e315c73
000068  72635c61
00006c  70695c61
000070  70695f6c
000074  69622e63
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L13.124|
                          DCD      0x000001b7
                  |L13.128|
000080  6e657463          DCB      "netconn_recv: invalid conn",0
000084  6f6e6e5f
000088  72656376
00008c  3a20696e
000090  76616c69
000094  6420636f
000098  6e6e00  
00009b  00                DCB      0
                  |L13.156|
00009c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000a0  7274696f
0000a4  6e202225
0000a8  73222066
0000ac  61696c65
0000b0  64206174
0000b4  206c696e
0000b8  65202564
0000bc  20696e20
0000c0  25730a00

                          AREA ||i.netconn_recved||, CODE, READONLY, ALIGN=2

                  netconn_recved PROC
;;;516    void
;;;517    netconn_recved(struct netconn *conn, u32_t length)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;518    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a05001          MOV      r5,r1
;;;519    #if LWIP_TCP
;;;520      if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
000010  e3540000          CMP      r4,#0
000014  0a00000d          BEQ      |L14.80|
000018  e5d40000          LDRB     r0,[r4,#0]
00001c  e3500010          CMP      r0,#0x10
000020  1a00000a          BNE      |L14.80|
;;;521          (netconn_get_noautorecved(conn))) {
000024  e5d4001c          LDRB     r0,[r4,#0x1c]
000028  e2000008          AND      r0,r0,#8
00002c  e3500000          CMP      r0,#0
000030  0a000006          BEQ      |L14.80|
;;;522        struct api_msg msg;
;;;523        /* Let the stack know that we have taken the data. */
;;;524        /* TODO: Speedup: Don't block and wait for the answer here
;;;525           (to prevent multiple thread-switches). */
;;;526        msg.function = do_recv;
000034  e59f001c          LDR      r0,|L14.88|
000038  e58d0004          STR      r0,[sp,#4]
;;;527        msg.msg.conn = conn;
00003c  e58d4008          STR      r4,[sp,#8]
;;;528        msg.msg.msg.r.len = length;
000040  e58d5010          STR      r5,[sp,#0x10]
;;;529        /* don't care for the return value of do_recv */
;;;530        TCPIP_APIMSG(&msg);
000044  e28d0004          ADD      r0,sp,#4
000048  ebfffffe          BL       tcpip_apimsg
;;;531      }
00004c  e1a00000          MOV      r0,r0
                  |L14.80|
;;;532    #else /* LWIP_TCP */
;;;533      LWIP_UNUSED_ARG(conn);
;;;534      LWIP_UNUSED_ARG(length);
;;;535    #endif /* LWIP_TCP */
;;;536    }
000050  e28dd01c          ADD      sp,sp,#0x1c
000054  e8bd8030          POP      {r4,r5,pc}
;;;537    
                          ENDP

                  |L14.88|
                          DCD      do_recv

                          AREA ||i.netconn_send||, CODE, READONLY, ALIGN=2

                  netconn_send PROC
;;;566    err_t
;;;567    netconn_send(struct netconn *conn, struct netbuf *buf)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;568    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a06001          MOV      r6,r1
;;;569      struct api_msg msg;
;;;570      err_t err;
;;;571    
;;;572      LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
000010  e1a00000          MOV      r0,r0
000014  e3540000          CMP      r4,#0
000018  1a000009          BNE      |L15.68|
00001c  e1a00000          MOV      r0,r0
000020  e28f306c          ADR      r3,|L15.148|
000024  e3a02f8f          MOV      r2,#0x23c
000028  e28f1084          ADR      r1,|L15.180|
00002c  e28f009c          ADR      r0,|L15.208|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
000038  e3e0000d          MVN      r0,#0xd
                  |L15.60|
00003c  e28dd01c          ADD      sp,sp,#0x1c
;;;573    
;;;574      LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
;;;575      msg.function = do_send;
;;;576      msg.msg.conn = conn;
;;;577      msg.msg.msg.b = buf;
;;;578      err = TCPIP_APIMSG(&msg);
;;;579    
;;;580      NETCONN_SET_SAFE_ERR(conn, err);
;;;581      return err;
;;;582    }
000040  e8bd80f0          POP      {r4-r7,pc}
                  |L15.68|
000044  e1a00000          MOV      r0,r0                 ;572
000048  e59f00a8          LDR      r0,|L15.248|
00004c  e58d0004          STR      r0,[sp,#4]            ;575
000050  e58d4008          STR      r4,[sp,#8]            ;576
000054  e58d6010          STR      r6,[sp,#0x10]         ;577
000058  e28d0004          ADD      r0,sp,#4              ;578
00005c  ebfffffe          BL       tcpip_apimsg
000060  e1a05000          MOV      r5,r0                 ;578
000064  e1a00000          MOV      r0,r0                 ;580
000068  ebfffffe          BL       sys_arch_protect
00006c  e1a07000          MOV      r7,r0                 ;580
000070  e1d400d8          LDRSB    r0,[r4,#8]            ;580
000074  e3700009          CMN      r0,#9                 ;580
000078  ba000000          BLT      |L15.128|
00007c  e5c45008          STRB     r5,[r4,#8]            ;580
                  |L15.128|
000080  e1a00007          MOV      r0,r7                 ;580
000084  ebfffffe          BL       sys_arch_unprotect
000088  e1a00000          MOV      r0,r0                 ;580
00008c  e1a00005          MOV      r0,r5                 ;581
000090  eaffffe9          B        |L15.60|
;;;583    
                          ENDP

                  |L15.148|
000094  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000098  2d312e34
00009c  2e315c73
0000a0  72635c61
0000a4  70695c61
0000a8  70695f6c
0000ac  69622e63
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L15.180|
0000b4  6e657463          DCB      "netconn_send: invalid conn",0
0000b8  6f6e6e5f
0000bc  73656e64
0000c0  3a20696e
0000c4  76616c69
0000c8  6420636f
0000cc  6e6e00  
0000cf  00                DCB      0
                  |L15.208|
0000d0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000d4  7274696f
0000d8  6e202225
0000dc  73222066
0000e0  61696c65
0000e4  64206174
0000e8  206c696e
0000ec  65202564
0000f0  20696e20
0000f4  25730a00
                  |L15.248|
                          DCD      do_send

                          AREA ||i.netconn_sendto||, CODE, READONLY, ALIGN=2

                  netconn_sendto PROC
;;;548    err_t
;;;549    netconn_sendto(struct netconn *conn, struct netbuf *buf, ip_addr_t *addr, u16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;550    {
000004  e1a07000          MOV      r7,r0
000008  e1a04001          MOV      r4,r1
00000c  e1a05002          MOV      r5,r2
000010  e1a06003          MOV      r6,r3
;;;551      if (buf != NULL) {
000014  e3540000          CMP      r4,#0
000018  0a00000a          BEQ      |L16.72|
;;;552        ip_addr_set(&buf->addr, addr);
00001c  e3550000          CMP      r5,#0
000020  1a000001          BNE      |L16.44|
000024  e3a00000          MOV      r0,#0
000028  ea000000          B        |L16.48|
                  |L16.44|
00002c  e5950000          LDR      r0,[r5,#0]
                  |L16.48|
000030  e5840008          STR      r0,[r4,#8]
;;;553        buf->port = port;
000034  e1c460bc          STRH     r6,[r4,#0xc]
;;;554        return netconn_send(conn, buf);
000038  e1a01004          MOV      r1,r4
00003c  e1a00007          MOV      r0,r7
000040  ebfffffe          BL       netconn_send
                  |L16.68|
;;;555      }
;;;556      return ERR_VAL;
;;;557    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L16.72|
000048  e3e00005          MVN      r0,#5                 ;556
00004c  eafffffc          B        |L16.68|
;;;558    
                          ENDP


                          AREA ||i.netconn_shutdown||, CODE, READONLY, ALIGN=2

                  netconn_shutdown PROC
;;;701    err_t
;;;702    netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;703    {
000004  e1a06000          MOV      r6,r0
000008  e1a04001          MOV      r4,r1
00000c  e1a05002          MOV      r5,r2
;;;704      return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
000010  e3540000          CMP      r4,#0
000014  0a000001          BEQ      |L17.32|
000018  e3a00001          MOV      r0,#1
00001c  ea000000          B        |L17.36|
                  |L17.32|
000020  e3a00000          MOV      r0,#0
                  |L17.36|
000024  e3550000          CMP      r5,#0
000028  0a000001          BEQ      |L17.52|
00002c  e3a02002          MOV      r2,#2
000030  ea000000          B        |L17.56|
                  |L17.52|
000034  e3a02000          MOV      r2,#0
                  |L17.56|
000038  e1801002          ORR      r1,r0,r2
00003c  e1a00006          MOV      r0,r6
000040  ebfffffe          BL       netconn_close_shutdown
;;;705    }
000044  e8bd8070          POP      {r4-r6,pc}
;;;706    
                          ENDP


                          AREA ||i.netconn_write_partly||, CODE, READONLY, ALIGN=2

                  netconn_write_partly PROC
;;;597    err_t
;;;598    netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;599                         u8_t apiflags, size_t *bytes_written)
;;;600    {
000004  e24dd01c          SUB      sp,sp,#0x1c
000008  e1a04000          MOV      r4,r0
00000c  e1a09001          MOV      r9,r1
000010  e1a05002          MOV      r5,r2
000014  e1a08003          MOV      r8,r3
000018  e59d6040          LDR      r6,[sp,#0x40]
;;;601      struct api_msg msg;
;;;602      err_t err;
;;;603      u8_t dontblock;
;;;604    
;;;605      LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
00001c  e1a00000          MOV      r0,r0
000020  e3540000          CMP      r4,#0
000024  1a000009          BNE      |L18.80|
000028  e1a00000          MOV      r0,r0
00002c  e28f3f4a          ADR      r3,|L18.348|
000030  e59f2144          LDR      r2,|L18.380|
000034  e28f1f51          ADR      r1,|L18.384|
000038  e28f0f57          ADR      r0,|L18.412|
00003c  ebfffffe          BL       sysprintf
000040  e1a00000          MOV      r0,r0
000044  e3e0000d          MVN      r0,#0xd
                  |L18.72|
000048  e28dd01c          ADD      sp,sp,#0x1c
;;;606      LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
;;;607      if (size == 0) {
;;;608        return ERR_OK;
;;;609      }
;;;610      dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
;;;611      if (dontblock && !bytes_written) {
;;;612        /* This implies netconn_write() cannot be used for non-blocking send, since
;;;613           it has no way to return the number of bytes written. */
;;;614        return ERR_VAL;
;;;615      }
;;;616    
;;;617      /* non-blocking write sends as much  */
;;;618      msg.function = do_write;
;;;619      msg.msg.conn = conn;
;;;620      msg.msg.msg.w.dataptr = dataptr;
;;;621      msg.msg.msg.w.apiflags = apiflags;
;;;622      msg.msg.msg.w.len = size;
;;;623    #if LWIP_SO_SNDTIMEO
;;;624      if (conn->send_timeout != 0) {
;;;625        /* get the time we started, which is later compared to
;;;626            sys_now() + conn->send_timeout */
;;;627        msg.msg.msg.w.time_started = sys_now();
;;;628      } else {
;;;629        msg.msg.msg.w.time_started = 0;
;;;630      }
;;;631    #endif /* LWIP_SO_SNDTIMEO */
;;;632    
;;;633      /* For locking the core: this _can_ be delayed on low memory/low send buffer,
;;;634         but if it is, this is done inside api_msg.c:do_write(), so we can use the
;;;635         non-blocking version here. */
;;;636      err = TCPIP_APIMSG(&msg);
;;;637      if ((err == ERR_OK) && (bytes_written != NULL)) {
;;;638        if (dontblock
;;;639    #if LWIP_SO_SNDTIMEO
;;;640            || (conn->send_timeout != 0)
;;;641    #endif /* LWIP_SO_SNDTIMEO */
;;;642           ) {
;;;643          /* nonblocking write: maybe the data has been sent partly */
;;;644          *bytes_written = msg.msg.msg.w.len;
;;;645        } else {
;;;646          /* blocking call succeeded: all data has been sent if it */
;;;647          *bytes_written = size;
;;;648        }
;;;649      }
;;;650    
;;;651      NETCONN_SET_SAFE_ERR(conn, err);
;;;652      return err;
;;;653    }
00004c  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.80|
000050  e1a00000          MOV      r0,r0                 ;605
000054  e1a00000          MOV      r0,r0                 ;606
000058  e5d40000          LDRB     r0,[r4,#0]            ;606
00005c  e3500010          CMP      r0,#0x10              ;606
000060  0a000008          BEQ      |L18.136|
000064  e1a00000          MOV      r0,r0                 ;606
000068  e28f30ec          ADR      r3,|L18.348|
00006c  e59f2150          LDR      r2,|L18.452|
000070  e28f1e15          ADR      r1,|L18.456|
000074  e28f0e12          ADR      r0,|L18.412|
000078  ebfffffe          BL       sysprintf
00007c  e1a00000          MOV      r0,r0                 ;606
000080  e3e00005          MVN      r0,#5                 ;606
000084  eaffffef          B        |L18.72|
                  |L18.136|
000088  e1a00000          MOV      r0,r0                 ;606
00008c  e3550000          CMP      r5,#0                 ;607
000090  1a000001          BNE      |L18.156|
000094  e3a00000          MOV      r0,#0                 ;608
000098  eaffffea          B        |L18.72|
                  |L18.156|
00009c  e5d4001c          LDRB     r0,[r4,#0x1c]         ;610
0000a0  e2000002          AND      r0,r0,#2              ;610
0000a4  e3500000          CMP      r0,#0                 ;610
0000a8  1a000002          BNE      |L18.184|
0000ac  e2080004          AND      r0,r8,#4              ;610
0000b0  e3500000          CMP      r0,#0                 ;610
0000b4  0a000001          BEQ      |L18.192|
                  |L18.184|
0000b8  e3a00001          MOV      r0,#1                 ;610
0000bc  ea000000          B        |L18.196|
                  |L18.192|
0000c0  e3a00000          MOV      r0,#0                 ;610
                  |L18.196|
0000c4  e1a0a000          MOV      r10,r0                ;610
0000c8  e35a0000          CMP      r10,#0                ;611
0000cc  0a000003          BEQ      |L18.224|
0000d0  e3560000          CMP      r6,#0                 ;611
0000d4  1a000001          BNE      |L18.224|
0000d8  e3e00005          MVN      r0,#5                 ;614
0000dc  eaffffd9          B        |L18.72|
                  |L18.224|
0000e0  e59f0104          LDR      r0,|L18.492|
0000e4  e58d0004          STR      r0,[sp,#4]            ;618
0000e8  e58d4008          STR      r4,[sp,#8]            ;619
0000ec  e58d9010          STR      r9,[sp,#0x10]         ;620
0000f0  e5cd8018          STRB     r8,[sp,#0x18]         ;621
0000f4  e58d5014          STR      r5,[sp,#0x14]         ;622
0000f8  e28d0004          ADD      r0,sp,#4              ;636
0000fc  ebfffffe          BL       tcpip_apimsg
000100  e1a07000          MOV      r7,r0                 ;636
000104  e3570000          CMP      r7,#0                 ;637
000108  1a000007          BNE      |L18.300|
00010c  e3560000          CMP      r6,#0                 ;637
000110  0a000005          BEQ      |L18.300|
000114  e35a0000          CMP      r10,#0                ;638
000118  0a000002          BEQ      |L18.296|
00011c  e59d0014          LDR      r0,[sp,#0x14]         ;644
000120  e5860000          STR      r0,[r6,#0]            ;644
000124  ea000000          B        |L18.300|
                  |L18.296|
000128  e5865000          STR      r5,[r6,#0]            ;647
                  |L18.300|
00012c  e1a00000          MOV      r0,r0                 ;651
000130  ebfffffe          BL       sys_arch_protect
000134  e1a0b000          MOV      r11,r0                ;651
000138  e1d400d8          LDRSB    r0,[r4,#8]            ;651
00013c  e3700009          CMN      r0,#9                 ;651
000140  ba000000          BLT      |L18.328|
000144  e5c47008          STRB     r7,[r4,#8]            ;651
                  |L18.328|
000148  e1a0000b          MOV      r0,r11                ;651
00014c  ebfffffe          BL       sys_arch_unprotect
000150  e1a00000          MOV      r0,r0                 ;651
000154  e1a00007          MOV      r0,r7                 ;652
000158  eaffffba          B        |L18.72|
;;;654    
                          ENDP

                  |L18.348|
00015c  6c776970          DCB      "lwip-1.4.1\\src\\api\\api_lib.c",0
000160  2d312e34
000164  2e315c73
000168  72635c61
00016c  70695c61
000170  70695f6c
000174  69622e63
000178  00      
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L18.380|
                          DCD      0x0000025d
                  |L18.384|
000180  6e657463          DCB      "netconn_write: invalid conn",0
000184  6f6e6e5f
000188  77726974
00018c  653a2069
000190  6e76616c
000194  69642063
000198  6f6e6e00
                  |L18.412|
00019c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0001a0  7274696f
0001a4  6e202225
0001a8  73222066
0001ac  61696c65
0001b0  64206174
0001b4  206c696e
0001b8  65202564
0001bc  20696e20
0001c0  25730a00
                  |L18.452|
                          DCD      0x0000025e
                  |L18.456|
0001c8  6e657463          DCB      "netconn_write: invalid conn->type",0
0001cc  6f6e6e5f
0001d0  77726974
0001d4  653a2069
0001d8  6e76616c
0001dc  69642063
0001e0  6f6e6e2d
0001e4  3e747970
0001e8  6500    
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L18.492|
                          DCD      do_write
