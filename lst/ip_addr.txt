; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ip_addr.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ip_addr.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\ip_addr.crf lwip-1.4.1\src\core\ipv4\ip_addr.c]
                          ARM

                          AREA ||i.ip4_addr_isbroadcast||, CODE, READONLY, ALIGN=2

                  ip4_addr_isbroadcast PROC
;;;54     u8_t
;;;55     ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
000000  e92d4008          PUSH     {r3,lr}
;;;56     {
000004  e1a02000          MOV      r2,r0
;;;57       ip_addr_t ipaddr;
;;;58       ip4_addr_set_u32(&ipaddr, addr);
000008  e58d2000          STR      r2,[sp,#0]
;;;59     
;;;60       /* all ones (broadcast) or all zeroes (old skool broadcast) */
;;;61       if ((~addr == IPADDR_ANY) ||
00000c  e1e00002          MVN      r0,r2
000010  e3500000          CMP      r0,#0
000014  0a000001          BEQ      |L1.32|
;;;62           (addr == IPADDR_ANY)) {
000018  e3520000          CMP      r2,#0
00001c  1a000001          BNE      |L1.40|
                  |L1.32|
;;;63         return 1;
000020  e3a00001          MOV      r0,#1
                  |L1.36|
;;;64       /* no broadcast support on this network interface? */
;;;65       } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
;;;66         /* the given address cannot be a broadcast address
;;;67          * nor can we check against any broadcast addresses */
;;;68         return 0;
;;;69       /* address matches network interface address exactly? => no broadcast */
;;;70       } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
;;;71         return 0;
;;;72       /*  on the same (sub) network... */
;;;73       } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
;;;74              /* ...and host identifier bits are all ones? =>... */
;;;75               && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
;;;76                (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
;;;77         /* => network broadcast address */
;;;78         return 1;
;;;79       } else {
;;;80         return 0;
;;;81       }
;;;82     }
000024  e8bd8008          POP      {r3,pc}
                  |L1.40|
000028  e5d1002d          LDRB     r0,[r1,#0x2d]         ;65
00002c  e2000002          AND      r0,r0,#2              ;65
000030  e3500000          CMP      r0,#0                 ;65
000034  1a000001          BNE      |L1.64|
000038  e3a00000          MOV      r0,#0                 ;68
00003c  eafffff8          B        |L1.36|
                  |L1.64|
000040  e5910004          LDR      r0,[r1,#4]            ;70
000044  e1500002          CMP      r0,r2                 ;70
000048  1a000001          BNE      |L1.84|
00004c  e3a00000          MOV      r0,#0                 ;71
000050  eafffff3          B        |L1.36|
                  |L1.84|
000054  e59d0000          LDR      r0,[sp,#0]            ;73
000058  e5913008          LDR      r3,[r1,#8]            ;73
00005c  e0000003          AND      r0,r0,r3              ;73
000060  e9911008          LDMIB    r1,{r3,r12}           ;73
000064  e003300c          AND      r3,r3,r12             ;73
000068  e1500003          CMP      r0,r3                 ;73
00006c  1a000007          BNE      |L1.144|
000070  e5910008          LDR      r0,[r1,#8]            ;75
000074  e1c20000          BIC      r0,r2,r0              ;75
000078  e5913008          LDR      r3,[r1,#8]            ;75
00007c  e1e03003          MVN      r3,r3                 ;75
000080  e1500003          CMP      r0,r3                 ;75
000084  1a000001          BNE      |L1.144|
000088  e3a00001          MOV      r0,#1                 ;78
00008c  eaffffe4          B        |L1.36|
                  |L1.144|
000090  e3a00000          MOV      r0,#0                 ;80
000094  eaffffe2          B        |L1.36|
;;;83     
                          ENDP


                          AREA ||i.ip4_addr_netmask_valid||, CODE, READONLY, ALIGN=2

                  ip4_addr_netmask_valid PROC
;;;89     u8_t
;;;90     ip4_addr_netmask_valid(u32_t netmask)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;91     {
000004  e1a06000          MOV      r6,r0
;;;92       u32_t mask;
;;;93       u32_t nm_hostorder = lwip_htonl(netmask);
000008  e1a00006          MOV      r0,r6
00000c  ebfffffe          BL       lwip_htonl
000010  e1a05000          MOV      r5,r0
;;;94     
;;;95       /* first, check for the first zero */
;;;96       for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
000014  e3a04102          MOV      r4,#0x80000000
000018  ea000004          B        |L2.48|
                  |L2.28|
;;;97         if ((nm_hostorder & mask) == 0) {
00001c  e0050004          AND      r0,r5,r4
000020  e3500000          CMP      r0,#0
000024  1a000000          BNE      |L2.44|
;;;98           break;
000028  ea000002          B        |L2.56|
                  |L2.44|
00002c  e1a040a4          LSR      r4,r4,#1              ;96
                  |L2.48|
000030  e3540000          CMP      r4,#0                 ;96
000034  1afffff8          BNE      |L2.28|
                  |L2.56|
000038  e1a00000          MOV      r0,r0
;;;99         }
;;;100      }
;;;101      /* then check that there is no one */
;;;102      for (; mask != 0; mask >>= 1) {
00003c  ea000005          B        |L2.88|
                  |L2.64|
;;;103        if ((nm_hostorder & mask) != 0) {
000040  e0050004          AND      r0,r5,r4
000044  e3500000          CMP      r0,#0
000048  0a000001          BEQ      |L2.84|
;;;104          /* there is a one after the first zero -> invalid */
;;;105          return 0;
00004c  e3a00000          MOV      r0,#0
                  |L2.80|
;;;106        }
;;;107      }
;;;108      /* no one after the first zero -> valid */
;;;109      return 1;
;;;110    }
000050  e8bd8070          POP      {r4-r6,pc}
                  |L2.84|
000054  e1a040a4          LSR      r4,r4,#1              ;102
                  |L2.88|
000058  e3540000          CMP      r4,#0                 ;102
00005c  1afffff7          BNE      |L2.64|
000060  e3a00001          MOV      r0,#1                 ;109
000064  eafffff9          B        |L2.80|
;;;111    
                          ENDP


                          AREA ||i.ipaddr_addr||, CODE, READONLY, ALIGN=2

                  ipaddr_addr PROC
;;;129    u32_t
;;;130    ipaddr_addr(const char *cp)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;131    {
000004  e1a04000          MOV      r4,r0
;;;132      ip_addr_t val;
;;;133    
;;;134      if (ipaddr_aton(cp, &val)) {
000008  e1a0100d          MOV      r1,sp
00000c  e1a00004          MOV      r0,r4
000010  ebfffffe          BL       ipaddr_aton
000014  e3500000          CMP      r0,#0
000018  0a000001          BEQ      |L3.36|
;;;135        return ip4_addr_get_u32(&val);
00001c  e59d0000          LDR      r0,[sp,#0]
                  |L3.32|
;;;136      }
;;;137      return (IPADDR_NONE);
;;;138    }
000020  e8bd8038          POP      {r3-r5,pc}
                  |L3.36|
000024  e3e00000          MVN      r0,#0                 ;137
000028  eafffffc          B        |L3.32|
;;;139    
                          ENDP


                          AREA ||i.ipaddr_aton||, CODE, READONLY, ALIGN=2

                  ipaddr_aton PROC
;;;151    int
;;;152    ipaddr_aton(const char *cp, ip_addr_t *addr)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;153    {
000004  e1a06000          MOV      r6,r0
000008  e1a08001          MOV      r8,r1
;;;154      u32_t val;
;;;155      u8_t base;
;;;156      char c;
;;;157      u32_t parts[4];
;;;158      u32_t *pp = parts;
00000c  e1a0700d          MOV      r7,sp
;;;159    
;;;160      c = *cp;
000010  e5d64000          LDRB     r4,[r6,#0]
;;;161      for (;;) {
000014  e1a00000          MOV      r0,r0
                  |L4.24|
;;;162        /*
;;;163         * Collect number up to ``.''.
;;;164         * Values are specified as for C:
;;;165         * 0x=hex, 0=octal, 1-9=decimal.
;;;166         */
;;;167        if (!isdigit(c))
000018  e3540030          CMP      r4,#0x30
00001c  ba000001          BLT      |L4.40|
000020  e3540039          CMP      r4,#0x39
000024  da000002          BLE      |L4.52|
                  |L4.40|
;;;168          return (0);
000028  e3a00000          MOV      r0,#0
                  |L4.44|
00002c  e28dd010          ADD      sp,sp,#0x10
;;;169        val = 0;
;;;170        base = 10;
;;;171        if (c == '0') {
;;;172          c = *++cp;
;;;173          if (c == 'x' || c == 'X') {
;;;174            base = 16;
;;;175            c = *++cp;
;;;176          } else
;;;177            base = 8;
;;;178        }
;;;179        for (;;) {
;;;180          if (isdigit(c)) {
;;;181            val = (val * base) + (int)(c - '0');
;;;182            c = *++cp;
;;;183          } else if (base == 16 && isxdigit(c)) {
;;;184            val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
;;;185            c = *++cp;
;;;186          } else
;;;187            break;
;;;188        }
;;;189        if (c == '.') {
;;;190          /*
;;;191           * Internet format:
;;;192           *  a.b.c.d
;;;193           *  a.b.c   (with c treated as 16 bits)
;;;194           *  a.b (with b treated as 24 bits)
;;;195           */
;;;196          if (pp >= parts + 3) {
;;;197            return (0);
;;;198          }
;;;199          *pp++ = val;
;;;200          c = *++cp;
;;;201        } else
;;;202          break;
;;;203      }
;;;204      /*
;;;205       * Check for trailing characters.
;;;206       */
;;;207      if (c != '\0' && !isspace(c)) {
;;;208        return (0);
;;;209      }
;;;210      /*
;;;211       * Concoct the address according to
;;;212       * the number of parts specified.
;;;213       */
;;;214      switch (pp - parts + 1) {
;;;215    
;;;216      case 0:
;;;217        return (0);       /* initial nondigit */
;;;218    
;;;219      case 1:             /* a -- 32 bits */
;;;220        break;
;;;221    
;;;222      case 2:             /* a.b -- 8.24 bits */
;;;223        if (val > 0xffffffUL) {
;;;224          return (0);
;;;225        }
;;;226        val |= parts[0] << 24;
;;;227        break;
;;;228    
;;;229      case 3:             /* a.b.c -- 8.8.16 bits */
;;;230        if (val > 0xffff) {
;;;231          return (0);
;;;232        }
;;;233        val |= (parts[0] << 24) | (parts[1] << 16);
;;;234        break;
;;;235    
;;;236      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
;;;237        if (val > 0xff) {
;;;238          return (0);
;;;239        }
;;;240        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
;;;241        break;
;;;242      default:
;;;243        LWIP_ASSERT("unhandled", 0);
;;;244        break;
;;;245      }
;;;246      if (addr) {
;;;247        ip4_addr_set_u32(addr, htonl(val));
;;;248      }
;;;249      return (1);
;;;250    }
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L4.52|
000034  e3a05000          MOV      r5,#0                 ;169
000038  e3a0900a          MOV      r9,#0xa               ;170
00003c  e3540030          CMP      r4,#0x30              ;171
000040  1a00000c          BNE      |L4.120|
000044  e2860001          ADD      r0,r6,#1              ;172
000048  e1a06000          MOV      r6,r0                 ;172
00004c  e5d04000          LDRB     r4,[r0,#0]            ;172
000050  e3540078          CMP      r4,#0x78              ;173
000054  0a000001          BEQ      |L4.96|
000058  e3540058          CMP      r4,#0x58              ;173
00005c  1a000004          BNE      |L4.116|
                  |L4.96|
000060  e3a09010          MOV      r9,#0x10              ;174
000064  e2860001          ADD      r0,r6,#1              ;175
000068  e1a06000          MOV      r6,r0                 ;175
00006c  e5d04000          LDRB     r4,[r0,#0]            ;175
000070  ea000000          B        |L4.120|
                  |L4.116|
000074  e3a09008          MOV      r9,#8                 ;177
                  |L4.120|
000078  e1a00000          MOV      r0,r0                 ;179
                  |L4.124|
00007c  e3540030          CMP      r4,#0x30              ;180
000080  ba000007          BLT      |L4.164|
000084  e3540039          CMP      r4,#0x39              ;180
000088  ca000005          BGT      |L4.164|
00008c  e2440030          SUB      r0,r4,#0x30           ;181
000090  e0250599          MLA      r5,r9,r5,r0           ;181
000094  e2860001          ADD      r0,r6,#1              ;182
000098  e1a06000          MOV      r6,r0                 ;182
00009c  e5d04000          LDRB     r4,[r0,#0]            ;182
0000a0  eafffff5          B        |L4.124|
                  |L4.164|
0000a4  e3590010          CMP      r9,#0x10              ;183
0000a8  1a000019          BNE      |L4.276|
0000ac  e3540030          CMP      r4,#0x30              ;183
0000b0  ba000001          BLT      |L4.188|
0000b4  e3540039          CMP      r4,#0x39              ;183
0000b8  da000007          BLE      |L4.220|
                  |L4.188|
0000bc  e3540061          CMP      r4,#0x61              ;183
0000c0  ba000001          BLT      |L4.204|
0000c4  e3540066          CMP      r4,#0x66              ;183
0000c8  da000003          BLE      |L4.220|
                  |L4.204|
0000cc  e3540041          CMP      r4,#0x41              ;183
0000d0  ba00000f          BLT      |L4.276|
0000d4  e3540046          CMP      r4,#0x46              ;183
0000d8  ca00000d          BGT      |L4.276|
                  |L4.220|
0000dc  e3540061          CMP      r4,#0x61              ;184
0000e0  ba000003          BLT      |L4.244|
0000e4  e354007a          CMP      r4,#0x7a              ;184
0000e8  ca000001          BGT      |L4.244|
0000ec  e3a00061          MOV      r0,#0x61              ;184
0000f0  ea000000          B        |L4.248|
                  |L4.244|
0000f4  e3a00041          MOV      r0,#0x41              ;184
                  |L4.248|
0000f8  e284100a          ADD      r1,r4,#0xa            ;184
0000fc  e0410000          SUB      r0,r1,r0              ;184
000100  e1805205          ORR      r5,r0,r5,LSL #4       ;184
000104  e2860001          ADD      r0,r6,#1              ;185
000108  e1a06000          MOV      r6,r0                 ;185
00010c  e5d04000          LDRB     r4,[r0,#0]            ;185
000110  eaffffd9          B        |L4.124|
                  |L4.276|
000114  e1a00000          MOV      r0,r0                 ;187
000118  e1a00000          MOV      r0,r0                 ;187
00011c  e354002e          CMP      r4,#0x2e              ;189
000120  1a000009          BNE      |L4.332|
000124  e28d000c          ADD      r0,sp,#0xc            ;196
000128  e1570000          CMP      r7,r0                 ;196
00012c  3a000001          BCC      |L4.312|
000130  e3a00000          MOV      r0,#0                 ;197
000134  eaffffbc          B        |L4.44|
                  |L4.312|
000138  e4875004          STR      r5,[r7],#4            ;199
00013c  e2860001          ADD      r0,r6,#1              ;200
000140  e1a06000          MOV      r6,r0                 ;200
000144  e5d04000          LDRB     r4,[r0,#0]            ;200
000148  eaffffb2          B        |L4.24|
                  |L4.332|
00014c  e1a00000          MOV      r0,r0                 ;202
000150  e1a00000          MOV      r0,r0                 ;202
000154  e3540000          CMP      r4,#0                 ;207
000158  0a00000d          BEQ      |L4.404|
00015c  e3540020          CMP      r4,#0x20              ;207
000160  0a00000b          BEQ      |L4.404|
000164  e354000c          CMP      r4,#0xc               ;207
000168  0a000009          BEQ      |L4.404|
00016c  e354000a          CMP      r4,#0xa               ;207
000170  0a000007          BEQ      |L4.404|
000174  e354000d          CMP      r4,#0xd               ;207
000178  0a000005          BEQ      |L4.404|
00017c  e3540009          CMP      r4,#9                 ;207
000180  0a000003          BEQ      |L4.404|
000184  e354000b          CMP      r4,#0xb               ;207
000188  0a000001          BEQ      |L4.404|
00018c  e3a00000          MOV      r0,#0                 ;208
000190  eaffffa5          B        |L4.44|
                  |L4.404|
000194  e1a0000d          MOV      r0,sp                 ;214
000198  e0470000          SUB      r0,r7,r0              ;214
00019c  e3a01001          MOV      r1,#1                 ;214
0001a0  e0810140          ADD      r0,r1,r0,ASR #2       ;214
0001a4  e3500005          CMP      r0,#5                 ;214
0001a8  308ff100          ADDCC    pc,pc,r0,LSL #2       ;214
0001ac  ea000029          B        |L4.600|
0001b0  ea000003          B        |L4.452|
0001b4  ea000005          B        |L4.464|
0001b8  ea000006          B        |L4.472|
0001bc  ea00000d          B        |L4.504|
0001c0  ea000017          B        |L4.548|
                  |L4.452|
0001c4  e1a00000          MOV      r0,r0                 ;216
0001c8  e3a00000          MOV      r0,#0                 ;217
0001cc  eaffff96          B        |L4.44|
                  |L4.464|
0001d0  e1a00000          MOV      r0,r0                 ;219
0001d4  ea00002a          B        |L4.644|
                  |L4.472|
0001d8  e1a00000          MOV      r0,r0                 ;222
0001dc  e3550401          CMP      r5,#0x1000000         ;223
0001e0  3a000001          BCC      |L4.492|
0001e4  e3a00000          MOV      r0,#0                 ;224
0001e8  eaffff8f          B        |L4.44|
                  |L4.492|
0001ec  e59d0000          LDR      r0,[sp,#0]            ;226
0001f0  e1855c00          ORR      r5,r5,r0,LSL #24      ;226
0001f4  ea000022          B        |L4.644|
                  |L4.504|
0001f8  e1a00000          MOV      r0,r0                 ;229
0001fc  e3550801          CMP      r5,#0x10000           ;230
000200  3a000001          BCC      |L4.524|
000204  e3a00000          MOV      r0,#0                 ;231
000208  eaffff87          B        |L4.44|
                  |L4.524|
00020c  e59d0000          LDR      r0,[sp,#0]            ;233
000210  e1a00c00          LSL      r0,r0,#24             ;233
000214  e59d1004          LDR      r1,[sp,#4]            ;233
000218  e1800801          ORR      r0,r0,r1,LSL #16      ;233
00021c  e1855000          ORR      r5,r5,r0              ;233
000220  ea000017          B        |L4.644|
                  |L4.548|
000224  e1a00000          MOV      r0,r0                 ;236
000228  e35500ff          CMP      r5,#0xff              ;237
00022c  9a000001          BLS      |L4.568|
000230  e3a00000          MOV      r0,#0                 ;238
000234  eaffff7c          B        |L4.44|
                  |L4.568|
000238  e59d0000          LDR      r0,[sp,#0]            ;240
00023c  e1a00c00          LSL      r0,r0,#24             ;240
000240  e59d1004          LDR      r1,[sp,#4]            ;240
000244  e1800801          ORR      r0,r0,r1,LSL #16      ;240
000248  e59d1008          LDR      r1,[sp,#8]            ;240
00024c  e1800401          ORR      r0,r0,r1,LSL #8       ;240
000250  e1855000          ORR      r5,r5,r0              ;240
000254  ea00000a          B        |L4.644|
                  |L4.600|
000258  e1a00000          MOV      r0,r0                 ;242
00025c  e1a00000          MOV      r0,r0                 ;243
000260  e1a00000          MOV      r0,r0                 ;243
000264  e28f3038          ADR      r3,|L4.676|
000268  e3a020f3          MOV      r2,#0xf3              ;243
00026c  e28f1054          ADR      r1,|L4.712|
000270  e28f005c          ADR      r0,|L4.724|
000274  ebfffffe          BL       sysprintf
000278  e1a00000          MOV      r0,r0                 ;243
00027c  e1a00000          MOV      r0,r0                 ;243
000280  e1a00000          MOV      r0,r0                 ;244
                  |L4.644|
000284  e1a00000          MOV      r0,r0                 ;220
000288  e3580000          CMP      r8,#0                 ;246
00028c  0a000002          BEQ      |L4.668|
000290  e1a00005          MOV      r0,r5                 ;247
000294  ebfffffe          BL       lwip_htonl
000298  e5880000          STR      r0,[r8,#0]            ;247
                  |L4.668|
00029c  e3a00001          MOV      r0,#1                 ;249
0002a0  eaffff61          B        |L4.44|
;;;251    
                          ENDP

                  |L4.676|
0002a4  6c776970          DCB      "lwip-1.4.1\\src\\core\\ipv4\\ip_addr.c",0
0002a8  2d312e34
0002ac  2e315c73
0002b0  72635c63
0002b4  6f72655c
0002b8  69707634
0002bc  5c69705f
0002c0  61646472
0002c4  2e6300  
0002c7  00                DCB      0
                  |L4.712|
0002c8  756e6861          DCB      "unhandled",0
0002cc  6e646c65
0002d0  6400    
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L4.724|
0002d4  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0002d8  7274696f
0002dc  6e202225
0002e0  73222066
0002e4  61696c65
0002e8  64206174
0002ec  206c696e
0002f0  65202564
0002f4  20696e20
0002f8  25730a00

                          AREA ||i.ipaddr_ntoa||, CODE, READONLY, ALIGN=2

                  ipaddr_ntoa PROC
;;;260    char *
;;;261    ipaddr_ntoa(const ip_addr_t *addr)
000000  e92d4010          PUSH     {r4,lr}
;;;262    {
000004  e1a04000          MOV      r4,r0
;;;263      static char str[16];
;;;264      return ipaddr_ntoa_r(addr, str, 16);
000008  e3a02010          MOV      r2,#0x10
00000c  e59f1008          LDR      r1,|L5.28|
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       ipaddr_ntoa_r
;;;265    }
000018  e8bd8010          POP      {r4,pc}
;;;266    
                          ENDP

                  |L5.28|
                          DCD      ||str||

                          AREA ||i.ipaddr_ntoa_r||, CODE, READONLY, ALIGN=2

                  ipaddr_ntoa_r PROC
;;;275     */
;;;276    char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;277    {
000004  e24dd008          SUB      sp,sp,#8
000008  e1a06001          MOV      r6,r1
00000c  e1a07002          MOV      r7,r2
;;;278      u32_t s_addr;
;;;279      char inv[3];
;;;280      char *rp;
;;;281      u8_t *ap;
;;;282      u8_t rem;
;;;283      u8_t n;
;;;284      u8_t i;
;;;285      int len = 0;
000010  e3a0b000          MOV      r11,#0
;;;286    
;;;287      s_addr = ip4_addr_get_u32(addr);
000014  e59d0008          LDR      r0,[sp,#8]
000018  e5900000          LDR      r0,[r0,#0]
00001c  e58d0004          STR      r0,[sp,#4]
;;;288    
;;;289      rp = buf;
000020  e1a04006          MOV      r4,r6
;;;290      ap = (u8_t *)&s_addr;
000024  e28d5004          ADD      r5,sp,#4
;;;291      for(n = 0; n < 4; n++) {
000028  e3a0a000          MOV      r10,#0
00002c  ea00002b          B        |L6.224|
                  |L6.48|
;;;292        i = 0;
000030  e3a08000          MOV      r8,#0
;;;293        do {
000034  e1a00000          MOV      r0,r0
                  |L6.56|
;;;294          rem = *ap % (u8_t)10;
000038  e5d50000          LDRB     r0,[r5,#0]
00003c  e3a0100a          MOV      r1,#0xa
000040  ebfffffe          BL       __aeabi_idivmod
000044  e20190ff          AND      r9,r1,#0xff
;;;295          *ap /= (u8_t)10;
000048  e5d50000          LDRB     r0,[r5,#0]
00004c  e3a0100a          MOV      r1,#0xa
000050  ebfffffe          BL       __aeabi_idivmod
000054  e5c50000          STRB     r0,[r5,#0]
;;;296          inv[i++] = '0' + rem;
000058  e2890030          ADD      r0,r9,#0x30
00005c  e20010ff          AND      r1,r0,#0xff
000060  e1a00008          MOV      r0,r8
000064  e2882001          ADD      r2,r8,#1
000068  e20280ff          AND      r8,r2,#0xff
00006c  e7cd1000          STRB     r1,[sp,r0]
;;;297        } while(*ap);
000070  e5d50000          LDRB     r0,[r5,#0]
000074  e3500000          CMP      r0,#0
000078  1affffee          BNE      |L6.56|
;;;298        while(i--) {
00007c  ea000008          B        |L6.164|
                  |L6.128|
;;;299          if (len++ >= buflen) {
000080  e1a0000b          MOV      r0,r11
000084  e28bb001          ADD      r11,r11,#1
000088  e1500007          CMP      r0,r7
00008c  ba000002          BLT      |L6.156|
;;;300            return NULL;
000090  e3a00000          MOV      r0,#0
                  |L6.148|
000094  e28dd014          ADD      sp,sp,#0x14
;;;301          }
;;;302          *rp++ = inv[i];
;;;303        }
;;;304        if (len++ >= buflen) {
;;;305          return NULL;
;;;306        }
;;;307        *rp++ = '.';
;;;308        ap++;
;;;309      }
;;;310      *--rp = 0;
;;;311      return buf;
;;;312    }
000098  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.156|
00009c  e7dd0008          LDRB     r0,[sp,r8]            ;302
0000a0  e4c40001          STRB     r0,[r4],#1            ;302
                  |L6.164|
0000a4  e2580000          SUBS     r0,r8,#0              ;298
0000a8  e2481001          SUB      r1,r8,#1              ;298
0000ac  e20180ff          AND      r8,r1,#0xff           ;298
0000b0  1afffff2          BNE      |L6.128|
0000b4  e1a0000b          MOV      r0,r11                ;304
0000b8  e28bb001          ADD      r11,r11,#1            ;304
0000bc  e1500007          CMP      r0,r7                 ;304
0000c0  ba000001          BLT      |L6.204|
0000c4  e3a00000          MOV      r0,#0                 ;305
0000c8  eafffff1          B        |L6.148|
                  |L6.204|
0000cc  e3a0002e          MOV      r0,#0x2e              ;307
0000d0  e4c40001          STRB     r0,[r4],#1            ;307
0000d4  e2855001          ADD      r5,r5,#1              ;308
0000d8  e28a0001          ADD      r0,r10,#1             ;291
0000dc  e200a0ff          AND      r10,r0,#0xff          ;291
                  |L6.224|
0000e0  e35a0004          CMP      r10,#4                ;291
0000e4  baffffd1          BLT      |L6.48|
0000e8  e3a00000          MOV      r0,#0                 ;310
0000ec  e2441001          SUB      r1,r4,#1              ;310
0000f0  e1a04001          MOV      r4,r1                 ;310
0000f4  e5c10000          STRB     r0,[r1,#0]            ;310
0000f8  e1a00006          MOV      r0,r6                 ;311
0000fc  eaffffe4          B        |L6.148|
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||str||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ip_addr_any
                          DCD      0x00000000
                  ip_addr_broadcast
                          DCD      0xffffffff
