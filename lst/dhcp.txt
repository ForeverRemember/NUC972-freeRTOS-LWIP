; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\dhcp.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dhcp.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\dhcp.crf lwip-1.4.1\src\core\dhcp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dhcp_delete_msg PROC
;;;1734   static void
;;;1735   dhcp_delete_msg(struct dhcp *dhcp)
000000  e92d4010          PUSH     {r4,lr}
;;;1736   {
000004  e1b04000          MOVS     r4,r0
000008  0a000003          BEQ      |L1.28|
;;;1737     LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
;;;1738     LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
00000c  e5940010          LDR      r0,[r4,#0x10]
000010  e3500000          CMP      r0,#0
000014  0a000006          BEQ      |L1.52|
000018  ea00000a          B        |L1.72|
                  |L1.28|
00001c  e8bd4010          POP      {r4,lr}               ;1737
000020  e59f2104          LDR      r2,|L1.300|
000024  e28f30e4          ADR      r3,|L1.272|
000028  e28f1c01          ADR      r1,|L1.304|
00002c  e28f0f47          ADR      r0,|L1.336|
000030  eafffffe          B        sysprintf
                  |L1.52|
000034  e59f213c          LDR      r2,|L1.376|
000038  e28f30d0          ADR      r3,|L1.272|
00003c  e28f1f4e          ADR      r1,|L1.380|
000040  e28f0f42          ADR      r0,|L1.336|
000044  ebfffffe          BL       sysprintf
                  |L1.72|
;;;1739     LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
000048  e5940014          LDR      r0,[r4,#0x14]
00004c  e3500000          CMP      r0,#0
000050  1a000004          BNE      |L1.104|
000054  e59f2148          LDR      r2,|L1.420|
000058  e28f30b0          ADR      r3,|L1.272|
00005c  e28f1f51          ADR      r1,|L1.424|
000060  e28f00e8          ADR      r0,|L1.336|
000064  ebfffffe          BL       sysprintf
                  |L1.104|
;;;1740     if (dhcp->p_out != NULL) {
000068  e5940010          LDR      r0,[r4,#0x10]
00006c  e3500000          CMP      r0,#0
;;;1741       pbuf_free(dhcp->p_out);
000070  1bfffffe          BLNE     pbuf_free
;;;1742     }
;;;1743     dhcp->p_out = NULL;
000074  e3a00000          MOV      r0,#0
;;;1744     dhcp->msg_out = NULL;
000078  e5840010          STR      r0,[r4,#0x10]
00007c  e5840014          STR      r0,[r4,#0x14]
;;;1745   }
000080  e8bd8010          POP      {r4,pc}
;;;1746   
                          ENDP

                  dhcp_option_trailer PROC
;;;1755   static void
;;;1756   dhcp_option_trailer(struct dhcp *dhcp)
000084  e92d4010          PUSH     {r4,lr}
;;;1757   {
000088  e1b04000          MOVS     r4,r0
00008c  0a000003          BEQ      |L1.160|
;;;1758     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
;;;1759     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
000090  e5940014          LDR      r0,[r4,#0x14]
000094  e3500000          CMP      r0,#0
000098  0a000006          BEQ      |L1.184|
00009c  ea00000a          B        |L1.204|
                  |L1.160|
0000a0  e8bd4010          POP      {r4,lr}               ;1758
0000a4  e59f2124          LDR      r2,|L1.464|
0000a8  e28f3060          ADR      r3,|L1.272|
0000ac  e28f1e12          ADR      r1,|L1.468|
0000b0  e28f0098          ADR      r0,|L1.336|
0000b4  eafffffe          B        sysprintf
                  |L1.184|
0000b8  e59f2138          LDR      r2,|L1.504|
0000bc  e28f304c          ADR      r3,|L1.272|
0000c0  e28f1f4d          ADR      r1,|L1.508|
0000c4  e28f0084          ADR      r0,|L1.336|
0000c8  ebfffffe          BL       sysprintf
                  |L1.204|
;;;1760     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
0000cc  e1d401b8          LDRH     r0,[r4,#0x18]
0000d0  e3500044          CMP      r0,#0x44
0000d4  3a000004          BCC      |L1.236|
0000d8  e28f3030          ADR      r3,|L1.272|
0000dc  e3a02e6e          MOV      r2,#0x6e0
0000e0  e28f1f50          ADD      r1,pc,#0x50, 30 ; #0x140
0000e4  e28f0064          ADR      r0,|L1.336|
0000e8  ebfffffe          BL       sysprintf
                  |L1.236|
;;;1761     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
0000ec  e1d401b8          LDRH     r0,[r4,#0x18]
0000f0  e5942014          LDR      r2,[r4,#0x14]
0000f4  e3a010ff          MOV      r1,#0xff
0000f8  e0822000          ADD      r2,r2,r0
0000fc  e2800001          ADD      r0,r0,#1
000100  e1c401b8          STRH     r0,[r4,#0x18]
000104  e5c210f0          STRB     r1,[r2,#0xf0]
000108  e3a01000          MOV      r1,#0
;;;1762     /* packet is too small, or not 4 byte aligned? */
;;;1763     while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
00010c  ea00005a          B        |L1.636|
                  |L1.272|
000110  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000114  2d312e34
000118  2e315c73
00011c  72635c63
000120  6f72655c
000124  64686370
000128  2e6300  
00012b  00                DCB      0
                  |L1.300|
                          DCD      0x000006c9
                  |L1.304|
000130  64686370          DCB      "dhcp_delete_msg: dhcp != NULL",0
000134  5f64656c
000138  6574655f
00013c  6d73673a
000140  20646863
000144  7020213d
000148  204e554c
00014c  4c00    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L1.336|
000150  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000154  7274696f
000158  6e202225
00015c  73222066
000160  61696c65
000164  64206174
000168  206c696e
00016c  65202564
000170  20696e20
000174  25730a00
                  |L1.376|
                          DCD      0x000006ca
                  |L1.380|
00017c  64686370          DCB      "dhcp_delete_msg: dhcp->p_out != NULL",0
000180  5f64656c
000184  6574655f
000188  6d73673a
00018c  20646863
000190  702d3e70
000194  5f6f7574
000198  20213d20
00019c  4e554c4c
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L1.420|
                          DCD      0x000006cb
                  |L1.424|
0001a8  64686370          DCB      "dhcp_delete_msg: dhcp->msg_out != NULL",0
0001ac  5f64656c
0001b0  6574655f
0001b4  6d73673a
0001b8  20646863
0001bc  702d3e6d
0001c0  73675f6f
0001c4  75742021
0001c8  3d204e55
0001cc  4c4c00  
0001cf  00                DCB      0
                  |L1.464|
                          DCD      0x000006de
                  |L1.468|
0001d4  64686370          DCB      "dhcp_option_trailer: dhcp != NULL",0
0001d8  5f6f7074
0001dc  696f6e5f
0001e0  74726169
0001e4  6c65723a
0001e8  20646863
0001ec  7020213d
0001f0  204e554c
0001f4  4c00    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L1.504|
                          DCD      0x000006df
                  |L1.508|
0001fc  64686370          DCB      "dhcp_option_trailer: dhcp->msg_out != NULL\n",0
000200  5f6f7074
000204  696f6e5f
000208  74726169
00020c  6c65723a
000210  20646863
000214  702d3e6d
000218  73675f6f
00021c  75742021
000220  3d204e55
000224  4c4c0a00
000228  64686370          DCB      "dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIO"
00022c  5f6f7074
000230  696f6e5f
000234  74726169
000238  6c65723a
00023c  20646863
000240  702d3e6f
000244  7074696f
000248  6e735f6f
00024c  75745f6c
000250  656e203c
000254  20444843
000258  505f4f50
00025c  54494f  
00025f  4e535f4c          DCB      "NS_LEN\n",0
000263  454e0a00
000267  00                DCB      0
                  |L1.616|
;;;1764            (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
;;;1765       /* add a fill/padding byte */
;;;1766       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
000268  e5942014          LDR      r2,[r4,#0x14]
00026c  e0822000          ADD      r2,r2,r0
000270  e2800001          ADD      r0,r0,#1
000274  e1c401b8          STRH     r0,[r4,#0x18]
000278  e5c210f0          STRB     r1,[r2,#0xf0]
                  |L1.636|
00027c  e1d401b8          LDRH     r0,[r4,#0x18]         ;1763
000280  e3500044          CMP      r0,#0x44              ;1763
000284  3afffff7          BCC      |L1.616|
;;;1767     }
;;;1768   }
000288  e8bd8010          POP      {r4,pc}
;;;1769   
                          ENDP

                  dhcp_option_byte PROC
;;;1278   static void
;;;1279   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
00028c  e92d4070          PUSH     {r4-r6,lr}
;;;1280   {
000290  e1a04000          MOV      r4,r0
;;;1281     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
000294  e1d001b8          LDRH     r0,[r0,#0x18]
000298  e1a05001          MOV      r5,r1                 ;1280
00029c  e3500044          CMP      r0,#0x44
0002a0  3a000004          BCC      |L1.696|
0002a4  e59f2264          LDR      r2,|L1.1296|
0002a8  e24f3e1a          ADR      r3,|L1.272|
0002ac  e28f1e26          ADR      r1,|L1.1300|
0002b0  e24f0f5a          ADR      r0,|L1.336|
0002b4  ebfffffe          BL       sysprintf
                  |L1.696|
;;;1282     dhcp->msg_out->options[dhcp->options_out_len++] = value;
0002b8  e1d401b8          LDRH     r0,[r4,#0x18]
0002bc  e5941014          LDR      r1,[r4,#0x14]
0002c0  e0811000          ADD      r1,r1,r0
0002c4  e2800001          ADD      r0,r0,#1
0002c8  e1c401b8          STRH     r0,[r4,#0x18]
0002cc  e5c150f0          STRB     r5,[r1,#0xf0]
;;;1283   }
0002d0  e8bd8070          POP      {r4-r6,pc}
;;;1284   
                          ENDP

                  dhcp_option PROC
;;;1267   static void
;;;1268   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
0002d4  e92d4070          PUSH     {r4-r6,lr}
;;;1269   {
0002d8  e1a04000          MOV      r4,r0
;;;1270     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
0002dc  e1d001b8          LDRH     r0,[r0,#0x18]
0002e0  e1a05002          MOV      r5,r2                 ;1269
0002e4  e1a06001          MOV      r6,r1                 ;1269
0002e8  e0800005          ADD      r0,r0,r5
0002ec  e2800002          ADD      r0,r0,#2
0002f0  e3500044          CMP      r0,#0x44
0002f4  9a000004          BLS      |L1.780|
0002f8  e59f2250          LDR      r2,|L1.1360|
0002fc  e59f1250          LDR      r1,|L1.1364|
000300  e24f3f7e          ADR      r3,|L1.272|
000304  e24f0f6f          ADR      r0,|L1.336|
000308  ebfffffe          BL       sysprintf
                  |L1.780|
;;;1271     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
00030c  e1d401b8          LDRH     r0,[r4,#0x18]
000310  e5941014          LDR      r1,[r4,#0x14]
000314  e0811000          ADD      r1,r1,r0
000318  e2800001          ADD      r0,r0,#1
00031c  e1c401b8          STRH     r0,[r4,#0x18]
000320  e5c160f0          STRB     r6,[r1,#0xf0]
;;;1272     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
000324  e1d401b8          LDRH     r0,[r4,#0x18]
000328  e5941014          LDR      r1,[r4,#0x14]
00032c  e0811000          ADD      r1,r1,r0
000330  e2800001          ADD      r0,r0,#1
000334  e1c401b8          STRH     r0,[r4,#0x18]
000338  e5c150f0          STRB     r5,[r1,#0xf0]
;;;1273   }
00033c  e8bd8070          POP      {r4-r6,pc}
;;;1274   /*
                          ENDP

                  dhcp_option_short PROC
;;;1285   static void
;;;1286   dhcp_option_short(struct dhcp *dhcp, u16_t value)
000340  e92d4070          PUSH     {r4-r6,lr}
;;;1287   {
000344  e1a04000          MOV      r4,r0
;;;1288     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
000348  e1d001b8          LDRH     r0,[r0,#0x18]
00034c  e1a05001          MOV      r5,r1                 ;1287
000350  e2800002          ADD      r0,r0,#2
000354  e3500044          CMP      r0,#0x44
000358  9a000004          BLS      |L1.880|
00035c  e59f21f4          LDR      r2,|L1.1368|
000360  e59f11f4          LDR      r1,|L1.1372|
000364  e24f3f97          ADR      r3,|L1.272|
000368  e24f0e22          ADR      r0,|L1.336|
00036c  ebfffffe          BL       sysprintf
                  |L1.880|
;;;1289     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
000370  e1d401b8          LDRH     r0,[r4,#0x18]
000374  e5942014          LDR      r2,[r4,#0x14]
000378  e1a01425          LSR      r1,r5,#8
00037c  e0822000          ADD      r2,r2,r0
000380  e2800001          ADD      r0,r0,#1
000384  e1c401b8          STRH     r0,[r4,#0x18]
000388  e5c210f0          STRB     r1,[r2,#0xf0]
;;;1290     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
00038c  e1d401b8          LDRH     r0,[r4,#0x18]
000390  e5941014          LDR      r1,[r4,#0x14]
000394  e0811000          ADD      r1,r1,r0
000398  e2800001          ADD      r0,r0,#1
00039c  e1c401b8          STRH     r0,[r4,#0x18]
0003a0  e5c150f0          STRB     r5,[r1,#0xf0]
;;;1291   }
0003a4  e8bd8070          POP      {r4-r6,pc}
;;;1292   
                          ENDP

                  dhcp_create_msg PROC
;;;1640   static err_t
;;;1641   dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
0003a8  e92d41f0          PUSH     {r4-r8,lr}
;;;1642   {
0003ac  e1b05000          MOVS     r5,r0
0003b0  e1a06002          MOV      r6,r2
0003b4  e1a04001          MOV      r4,r1
0003b8  0a00004d          BEQ      |L1.1268|
;;;1643     u16_t i;
;;;1644   #ifndef DHCP_GLOBAL_XID
;;;1645     /** default global transaction identifier starting value (easy to match
;;;1646      *  with a packet analyser). We simply increment for each new request.
;;;1647      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1648      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1649   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1650     static u32_t xid;
;;;1651   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1652     static u32_t xid = 0xABCD0000;
;;;1653   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1654   #else
;;;1655     if (!xid_initialised) {
;;;1656       xid = DHCP_GLOBAL_XID;
;;;1657       xid_initialised = !xid_initialised;
;;;1658     }
;;;1659   #endif
;;;1660     LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
;;;1661     LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
0003bc  e3540000          CMP      r4,#0
0003c0  0a000097          BEQ      |L1.1572|
;;;1662     LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
0003c4  e5940010          LDR      r0,[r4,#0x10]
0003c8  e3500000          CMP      r0,#0
0003cc  0a000004          BEQ      |L1.996|
0003d0  e59f2188          LDR      r2,|L1.1376|
0003d4  e24f3fb3          ADR      r3,|L1.272|
0003d8  e28f1f61          ADR      r1,|L1.1380|
0003dc  e24f0fa5          ADR      r0,|L1.336|
0003e0  ebfffffe          BL       sysprintf
                  |L1.996|
;;;1663     LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
0003e4  e5940014          LDR      r0,[r4,#0x14]
0003e8  e3500000          CMP      r0,#0
0003ec  0a000004          BEQ      |L1.1028|
0003f0  e59f2194          LDR      r2,|L1.1420|
0003f4  e24f3fbb          ADR      r3,|L1.272|
0003f8  e28f1e19          ADR      r1,|L1.1424|
0003fc  e24f0fad          ADR      r0,|L1.336|
000400  ebfffffe          BL       sysprintf
                  |L1.1028|
;;;1664     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
000404  e3a02000          MOV      r2,#0
000408  e3a01f4d          MOV      r1,#0x134
00040c  e1a00002          MOV      r0,r2
000410  ebfffffe          BL       pbuf_alloc
;;;1665     if (dhcp->p_out == NULL) {
000414  e3500000          CMP      r0,#0
000418  e5840010          STR      r0,[r4,#0x10]         ;1664
;;;1666       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1667         ("dhcp_create_msg(): could not allocate pbuf\n"));
;;;1668       return ERR_MEM;
00041c  03e00000          MVNEQ    r0,#0
;;;1669     }
;;;1670     LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
;;;1671              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1672   
;;;1673     /* reuse transaction identifier in retransmissions */
;;;1674     if (dhcp->tries == 0) {
;;;1675   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1676       xid = _LWIP_RAND();
;;;1677   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1678       xid++;
;;;1679   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1680     }
;;;1681     dhcp->xid = xid;
;;;1682     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
;;;1683                 ("transaction id xid(%"X32_F")\n", xid));
;;;1684   
;;;1685     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1686   
;;;1687     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1688     /* TODO: make link layer independent */
;;;1689     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1690     dhcp->msg_out->hlen = netif->hwaddr_len;
;;;1691     dhcp->msg_out->hops = 0;
;;;1692     dhcp->msg_out->xid = htonl(dhcp->xid);
;;;1693     dhcp->msg_out->secs = 0;
;;;1694     /* we don't need the broadcast flag since we can receive unicast traffic
;;;1695        before being fully configured! */
;;;1696     dhcp->msg_out->flags = 0;
;;;1697     ip_addr_set_zero(&dhcp->msg_out->ciaddr);
;;;1698     /* set ciaddr to netif->ip_addr based on message_type and state */
;;;1699     if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
;;;1700         ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
;;;1701          ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
;;;1702       ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
;;;1703     }
;;;1704     ip_addr_set_zero(&dhcp->msg_out->yiaddr);
;;;1705     ip_addr_set_zero(&dhcp->msg_out->siaddr);
;;;1706     ip_addr_set_zero(&dhcp->msg_out->giaddr);
;;;1707     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1708       /* copy netif hardware address, pad with zeroes */
;;;1709       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1710     }
;;;1711     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1712       dhcp->msg_out->sname[i] = 0;
;;;1713     }
;;;1714     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1715       dhcp->msg_out->file[i] = 0;
;;;1716     }
;;;1717     dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
;;;1718     dhcp->options_out_len = 0;
;;;1719     /* fill options field with an incrementing array (for debugging purposes) */
;;;1720     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1721       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1722     }
;;;1723     /* Add option MESSAGE_TYPE */
;;;1724     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;1725     dhcp_option_byte(dhcp, message_type);
;;;1726     return ERR_OK;
;;;1727   }
000420  08bd81f0          POPEQ    {r4-r8,pc}
000424  e1d000ba          LDRH     r0,[r0,#0xa]          ;1670
000428  e3500f4d          CMP      r0,#0x134             ;1670
00042c  2a000004          BCS      |L1.1092|
000430  e59f2180          LDR      r2,|L1.1464|
000434  e24f3fcb          ADR      r3,|L1.272|
000438  e28f1f5f          ADR      r1,|L1.1468|
00043c  e24f0fbd          ADR      r0,|L1.336|
000440  ebfffffe          BL       sysprintf
                  |L1.1092|
000444  e5d4100d          LDRB     r1,[r4,#0xd]          ;1674
000448  e59f01ac          LDR      r0,|L1.1532|
00044c  e3a07000          MOV      r7,#0                 ;1691
000450  e3510000          CMP      r1,#0                 ;1674
000454  05901000          LDREQ    r1,[r0,#0]            ;1678  ; xid
000458  02811001          ADDEQ    r1,r1,#1              ;1678
00045c  05801000          STREQ    r1,[r0,#0]            ;1678  ; xid
000460  e5900000          LDR      r0,[r0,#0]            ;1681  ; xid
000464  e3a01001          MOV      r1,#1                 ;1687
000468  e5840000          STR      r0,[r4,#0]            ;1685
00046c  e5940010          LDR      r0,[r4,#0x10]         ;1685
000470  e5900004          LDR      r0,[r0,#4]            ;1685
000474  e5840014          STR      r0,[r4,#0x14]         ;1687
000478  e5c01000          STRB     r1,[r0,#0]            ;1687
00047c  e5940014          LDR      r0,[r4,#0x14]         ;1689
000480  e5c01001          STRB     r1,[r0,#1]            ;1689
000484  e5d50026          LDRB     r0,[r5,#0x26]         ;1690
000488  e5941014          LDR      r1,[r4,#0x14]         ;1690
00048c  e5c10002          STRB     r0,[r1,#2]            ;1690
000490  e5940014          LDR      r0,[r4,#0x14]         ;1691
000494  e5c07003          STRB     r7,[r0,#3]            ;1691
000498  e5940000          LDR      r0,[r4,#0]            ;1692
00049c  ebfffffe          BL       lwip_htonl
0004a0  e5941014          LDR      r1,[r4,#0x14]         ;1692
0004a4  e2811004          ADD      r1,r1,#4              ;1692
0004a8  ebfffffe          BL       __aeabi_uwrite4
0004ac  e5940014          LDR      r0,[r4,#0x14]         ;1693
0004b0  e1a01427          LSR      r1,r7,#8              ;1693
0004b4  e5c07008          STRB     r7,[r0,#8]            ;1693
0004b8  e5c01009          STRB     r1,[r0,#9]            ;1693
0004bc  e5940014          LDR      r0,[r4,#0x14]         ;1696
0004c0  e1a01427          LSR      r1,r7,#8              ;1696
0004c4  e5c0700a          STRB     r7,[r0,#0xa]          ;1696
0004c8  e5c0100b          STRB     r1,[r0,#0xb]          ;1696
0004cc  e5940014          LDR      r0,[r4,#0x14]         ;1697
0004d0  e280100c          ADD      r1,r0,#0xc            ;1697
0004d4  e3a00000          MOV      r0,#0                 ;1697
0004d8  ebfffffe          BL       __aeabi_uwrite4
0004dc  e3560008          CMP      r6,#8                 ;1699
0004e0  13560004          CMPNE    r6,#4                 ;1699
0004e4  0a000059          BEQ      |L1.1616|
0004e8  e3560003          CMP      r6,#3                 ;1700
0004ec  0a000053          BEQ      |L1.1600|
0004f0  ea00005a          B        |L1.1632|
                  |L1.1268|
0004f4  e59f2104          LDR      r2,|L1.1536|
0004f8  e24f3e3f          ADR      r3,|L1.272|
0004fc  e28f1c01          ADR      r1,|L1.1540|
000500  e24f0fee          ADR      r0,|L1.336|
000504  ebfffffe          BL       sysprintf
000508  e3e0000d          MVN      r0,#0xd               ;1660
00050c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1296|
                          DCD      0x00000501
                  |L1.1300|
000514  64686370          DCB      "dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_"
000518  5f6f7074
00051c  696f6e5f
000520  62797465
000524  3a206468
000528  63702d3e
00052c  6f707469
000530  6f6e735f
000534  6f75745f
000538  6c656e20
00053c  3c204448
000540  43505f4f
000544  5054494f
000548  4e535f  
00054b  4c454e00          DCB      "LEN",0
00054f  00                DCB      0
                  |L1.1360|
                          DCD      0x000004f6
                  |L1.1364|
                          DCD      ||.conststring||
                  |L1.1368|
                          DCD      0x00000508
                  |L1.1372|
                          DCD      ||.conststring||+0x48
                  |L1.1376|
                          DCD      0x0000067e
                  |L1.1380|
000564  64686370          DCB      "dhcp_create_msg: dhcp->p_out == NULL",0
000568  5f637265
00056c  6174655f
000570  6d73673a
000574  20646863
000578  702d3e70
00057c  5f6f7574
000580  203d3d20
000584  4e554c4c
000588  00      
000589  00                DCB      0
00058a  00                DCB      0
00058b  00                DCB      0
                  |L1.1420|
                          DCD      0x0000067f
                  |L1.1424|
000590  64686370          DCB      "dhcp_create_msg: dhcp->msg_out == NULL",0
000594  5f637265
000598  6174655f
00059c  6d73673a
0005a0  20646863
0005a4  702d3e6d
0005a8  73675f6f
0005ac  7574203d
0005b0  3d204e55
0005b4  4c4c00  
0005b7  00                DCB      0
                  |L1.1464|
                          DCD      0x00000686
                  |L1.1468|
0005bc  64686370          DCB      "dhcp_create_msg: check that first pbuf can hold struct "
0005c0  5f637265
0005c4  6174655f
0005c8  6d73673a
0005cc  20636865
0005d0  636b2074
0005d4  68617420
0005d8  66697273
0005dc  74207062
0005e0  75662063
0005e4  616e2068
0005e8  6f6c6420
0005ec  73747275
0005f0  637420  
0005f3  64686370          DCB      "dhcp_msg",0
0005f7  5f6d7367
0005fb  00      
                  |L1.1532|
                          DCD      ||.data||
                  |L1.1536|
                          DCD      0x0000067c
                  |L1.1540|
000604  64686370          DCB      "dhcp_create_msg: netif != NULL",0
000608  5f637265
00060c  6174655f
000610  6d73673a
000614  206e6574
000618  69662021
00061c  3d204e55
000620  4c4c00  
000623  00                DCB      0
                  |L1.1572|
000624  e59f324c          LDR      r3,|L1.2168|
000628  e59f224c          LDR      r2,|L1.2172|
00062c  e59f026c          LDR      r0,|L1.2208|
000630  e28f1f92          ADR      r1,|L1.2176|
000634  ebfffffe          BL       sysprintf
000638  e3e00005          MVN      r0,#5                 ;1661
00063c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1600|
000640  e5d4000c          LDRB     r0,[r4,#0xc]          ;1701
000644  e3500005          CMP      r0,#5                 ;1701
000648  13500004          CMPNE    r0,#4                 ;1701
00064c  1a000003          BNE      |L1.1632|
                  |L1.1616|
000650  e5940014          LDR      r0,[r4,#0x14]         ;1702
000654  e280100c          ADD      r1,r0,#0xc            ;1702
000658  e5950004          LDR      r0,[r5,#4]            ;1702
00065c  ebfffffe          BL       __aeabi_uwrite4
                  |L1.1632|
000660  e5940014          LDR      r0,[r4,#0x14]         ;1704
000664  e2801010          ADD      r1,r0,#0x10           ;1704
000668  e3a00000          MOV      r0,#0                 ;1704
00066c  ebfffffe          BL       __aeabi_uwrite4
000670  e5940014          LDR      r0,[r4,#0x14]         ;1705
000674  e2801014          ADD      r1,r0,#0x14           ;1705
000678  e3a00000          MOV      r0,#0                 ;1705
00067c  ebfffffe          BL       __aeabi_uwrite4
000680  e5940014          LDR      r0,[r4,#0x14]         ;1706
000684  e2801018          ADD      r1,r0,#0x18           ;1706
000688  e3a00000          MOV      r0,#0                 ;1706
00068c  ebfffffe          BL       __aeabi_uwrite4
000690  e3a00000          MOV      r0,#0                 ;1707
                  |L1.1684|
000694  e5d51026          LDRB     r1,[r5,#0x26]         ;1709
000698  e5942014          LDR      r2,[r4,#0x14]         ;1709
00069c  e1510000          CMP      r1,r0                 ;1709
0006a0  80851000          ADDHI    r1,r5,r0              ;1709
0006a4  e0822000          ADD      r2,r2,r0              ;1709
0006a8  85d11027          LDRBHI   r1,[r1,#0x27]         ;1709
0006ac  93a01000          MOVLS    r1,#0                 ;1709
0006b0  e2800001          ADD      r0,r0,#1              ;1709
0006b4  e3c00801          BIC      r0,r0,#0x10000        ;1707
0006b8  e3500010          CMP      r0,#0x10              ;1707
0006bc  23a00000          MOVCS    r0,#0                 ;1711
0006c0  e5c2101c          STRB     r1,[r2,#0x1c]         ;1709
0006c4  3afffff2          BCC      |L1.1684|
                  |L1.1736|
0006c8  e5941014          LDR      r1,[r4,#0x14]         ;1712
0006cc  e0811000          ADD      r1,r1,r0              ;1712
0006d0  e2800001          ADD      r0,r0,#1              ;1712
0006d4  e3c00801          BIC      r0,r0,#0x10000        ;1711
0006d8  e3500040          CMP      r0,#0x40              ;1711
0006dc  23a00000          MOVCS    r0,#0                 ;1714
0006e0  e5c1702c          STRB     r7,[r1,#0x2c]         ;1712
0006e4  3afffff7          BCC      |L1.1736|
                  |L1.1768|
0006e8  e5941014          LDR      r1,[r4,#0x14]         ;1715
0006ec  e0811000          ADD      r1,r1,r0              ;1715
0006f0  e2800001          ADD      r0,r0,#1              ;1715
0006f4  e3c00801          BIC      r0,r0,#0x10000        ;1714
0006f8  e3500080          CMP      r0,#0x80              ;1714
0006fc  e5c1706c          STRB     r7,[r1,#0x6c]         ;1715
000700  3afffff8          BCC      |L1.1768|
000704  e5940014          LDR      r0,[r4,#0x14]         ;1717
000708  e28010ec          ADD      r1,r0,#0xec           ;1717
00070c  e59f0190          LDR      r0,|L1.2212|
000710  ebfffffe          BL       __aeabi_uwrite4
000714  e3a00000          MOV      r0,#0                 ;1720
000718  e1c471b8          STRH     r7,[r4,#0x18]         ;1718
                  |L1.1820|
00071c  e5941014          LDR      r1,[r4,#0x14]         ;1721
000720  e0811000          ADD      r1,r1,r0              ;1721
000724  e5c100f0          STRB     r0,[r1,#0xf0]         ;1721
000728  e2800001          ADD      r0,r0,#1              ;1721
00072c  e3c00801          BIC      r0,r0,#0x10000        ;1720
000730  e3500044          CMP      r0,#0x44              ;1720
000734  3afffff8          BCC      |L1.1820|
000738  e3a02001          MOV      r2,#1                 ;1724
00073c  e3a01035          MOV      r1,#0x35              ;1724
000740  e1a00004          MOV      r0,r4                 ;1724
000744  ebfffffe          BL       dhcp_option
000748  e1a01006          MOV      r1,r6                 ;1725
00074c  e1a00004          MOV      r0,r4                 ;1725
000750  ebfffffe          BL       dhcp_option_byte
000754  e3a00000          MOV      r0,#0                 ;1726
000758  e8bd81f0          POP      {r4-r8,pc}
;;;1728   
                          ENDP

                  dhcp_discover PROC
;;;871    static err_t
;;;872    dhcp_discover(struct netif *netif)
00075c  e92d40f8          PUSH     {r3-r7,lr}
;;;873    {
;;;874      struct dhcp *dhcp = netif->dhcp;
000760  e5904020          LDR      r4,[r0,#0x20]
000764  e1a05000          MOV      r5,r0                 ;873
;;;875      err_t result = ERR_OK;
;;;876      u16_t msecs;
;;;877      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
;;;878      ip_addr_set_any(&dhcp->offered_ip_addr);
000768  e3a00000          MOV      r0,#0
;;;879      dhcp_set_state(dhcp, DHCP_SELECTING);
00076c  e5840024          STR      r0,[r4,#0x24]
000770  e3a01006          MOV      r1,#6
000774  e1a00004          MOV      r0,r4
000778  ebfffffe          BL       dhcp_set_state
;;;880      /* create and initialize the DHCP message header */
;;;881      result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
00077c  e3a02001          MOV      r2,#1
000780  e1a01004          MOV      r1,r4
000784  e1a00005          MOV      r0,r5
000788  ebfffffe          BL       dhcp_create_msg
00078c  e1b06000          MOVS     r6,r0
;;;882      if (result == ERR_OK) {
000790  1a000025          BNE      |L1.2092|
;;;883        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
;;;884    
;;;885        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000794  e3a02002          MOV      r2,#2
000798  e3a01039          MOV      r1,#0x39
00079c  e1a00004          MOV      r0,r4
0007a0  ebfffffe          BL       dhcp_option
;;;886        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
0007a4  e1d512b4          LDRH     r1,[r5,#0x24]
0007a8  e1a00004          MOV      r0,r4
0007ac  ebfffffe          BL       dhcp_option_short
;;;887    
;;;888        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
0007b0  e3a02004          MOV      r2,#4
0007b4  e3a01037          MOV      r1,#0x37
0007b8  e1a00004          MOV      r0,r4
0007bc  ebfffffe          BL       dhcp_option
;;;889        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
0007c0  e3a01001          MOV      r1,#1
0007c4  e1a00004          MOV      r0,r4
0007c8  ebfffffe          BL       dhcp_option_byte
;;;890        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
0007cc  e3a01003          MOV      r1,#3
0007d0  e1a00004          MOV      r0,r4
0007d4  ebfffffe          BL       dhcp_option_byte
;;;891        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
0007d8  e3a0101c          MOV      r1,#0x1c
0007dc  e1a00004          MOV      r0,r4
0007e0  ebfffffe          BL       dhcp_option_byte
;;;892        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
0007e4  e3a01006          MOV      r1,#6
0007e8  e1a00004          MOV      r0,r4
0007ec  ebfffffe          BL       dhcp_option_byte
;;;893    
;;;894        dhcp_option_trailer(dhcp);
0007f0  e1a00004          MOV      r0,r4
0007f4  ebfffffe          BL       dhcp_option_trailer
;;;895    
;;;896        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
;;;897        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0007f8  e1d401b8          LDRH     r0,[r4,#0x18]
0007fc  e28000f0          ADD      r0,r0,#0xf0
000800  e3c01801          BIC      r1,r0,#0x10000
000804  e5940010          LDR      r0,[r4,#0x10]
000808  ebfffffe          BL       pbuf_realloc
;;;898    
;;;899        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
;;;900        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00080c  e58d5000          STR      r5,[sp,#0]
000810  e59f2090          LDR      r2,|L1.2216|
000814  e5940004          LDR      r0,[r4,#4]
000818  e5941010          LDR      r1,[r4,#0x10]
00081c  e3a03043          MOV      r3,#0x43
000820  ebfffffe          BL       udp_sendto_if
;;;901        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
;;;902        dhcp_delete_msg(dhcp);
000824  e1a00004          MOV      r0,r4
000828  ebfffffe          BL       dhcp_delete_msg
                  |L1.2092|
;;;903        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
;;;904      } else {
;;;905        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
;;;906      }
;;;907      dhcp->tries++;
00082c  e5d4000d          LDRB     r0,[r4,#0xd]
000830  e2800001          ADD      r0,r0,#1
000834  e20000ff          AND      r0,r0,#0xff
;;;908    #if LWIP_DHCP_AUTOIP_COOP
;;;909      if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;910        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;911        autoip_start(netif);
;;;912      }
;;;913    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;914      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
000838  e3500006          CMP      r0,#6
00083c  33a01001          MOVCC    r1,#1
000840  e5c4000d          STRB     r0,[r4,#0xd]          ;907
000844  31a00011          LSLCC    r0,r1,r0
000848  23a0003c          MOVCS    r0,#0x3c
00084c  e0801080          ADD      r1,r0,r0,LSL #1
000850  e0610380          RSB      r0,r1,r0,LSL #7
000854  e59f1050          LDR      r1,|L1.2220|
000858  e0010180          AND      r0,r1,r0,LSL #3
;;;915      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00085c  e2800c01          ADD      r0,r0,#0x100
000860  e3a01f7d          MOV      r1,#0x1f4
000864  e28000f3          ADD      r0,r0,#0xf3
000868  ebfffffe          BL       __aeabi_uidivmod
00086c  e1c401ba          STRH     r0,[r4,#0x1a]
;;;916      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
;;;917      return result;
000870  e1a00006          MOV      r0,r6
;;;918    }
000874  e8bd80f8          POP      {r3-r7,pc}
                  |L1.2168|
                          DCD      ||.text||+0x110
                  |L1.2172|
                          DCD      0x0000067d
                  |L1.2176|
000880  64686370          DCB      "dhcp_create_msg: dhcp != NULL",0
000884  5f637265
000888  6174655f
00088c  6d73673a
000890  20646863
000894  7020213d
000898  204e554c
00089c  4c00    
00089e  00                DCB      0
00089f  00                DCB      0
                  |L1.2208|
                          DCD      ||.text||+0x150
                  |L1.2212|
                          DCD      0x63538263
                  |L1.2216|
                          DCD      ip_addr_broadcast
                  |L1.2220|
                          DCD      0x0000ffff
                          ENDP

                  dhcp_option_long PROC
;;;1293   static void
;;;1294   dhcp_option_long(struct dhcp *dhcp, u32_t value)
0008b0  e92d4070          PUSH     {r4-r6,lr}
;;;1295   {
0008b4  e1a04000          MOV      r4,r0
;;;1296     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
0008b8  e1d001b8          LDRH     r0,[r0,#0x18]
0008bc  e1a05001          MOV      r5,r1                 ;1295
0008c0  e2800004          ADD      r0,r0,#4
0008c4  e3500044          CMP      r0,#0x44
0008c8  9a000004          BLS      |L1.2272|
0008cc  e51f305c          LDR      r3,|L1.2168|
0008d0  e51f0038          LDR      r0,|L1.2208|
0008d4  e3a02e51          MOV      r2,#0x510
0008d8  e28f1fa5          ADR      r1,|L1.2932|
0008dc  ebfffffe          BL       sysprintf
                  |L1.2272|
;;;1297     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
0008e0  e1d401b8          LDRH     r0,[r4,#0x18]
0008e4  e5942014          LDR      r2,[r4,#0x14]
0008e8  e1a01c25          LSR      r1,r5,#24
0008ec  e0822000          ADD      r2,r2,r0
0008f0  e2800001          ADD      r0,r0,#1
0008f4  e1c401b8          STRH     r0,[r4,#0x18]
0008f8  e5c210f0          STRB     r1,[r2,#0xf0]
;;;1298     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
0008fc  e1d401b8          LDRH     r0,[r4,#0x18]
000900  e5942014          LDR      r2,[r4,#0x14]
000904  e1a01825          LSR      r1,r5,#16
000908  e0822000          ADD      r2,r2,r0
00090c  e2800001          ADD      r0,r0,#1
000910  e1c401b8          STRH     r0,[r4,#0x18]
000914  e5c210f0          STRB     r1,[r2,#0xf0]
;;;1299     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000918  e1d401b8          LDRH     r0,[r4,#0x18]
00091c  e5942014          LDR      r2,[r4,#0x14]
000920  e1a01425          LSR      r1,r5,#8
000924  e0822000          ADD      r2,r2,r0
000928  e2800001          ADD      r0,r0,#1
00092c  e1c401b8          STRH     r0,[r4,#0x18]
000930  e5c210f0          STRB     r1,[r2,#0xf0]
;;;1300     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
000934  e1d401b8          LDRH     r0,[r4,#0x18]
000938  e5941014          LDR      r1,[r4,#0x14]
00093c  e0811000          ADD      r1,r1,r0
000940  e2800001          ADD      r0,r0,#1
000944  e1c401b8          STRH     r0,[r4,#0x18]
000948  e5c150f0          STRB     r5,[r1,#0xf0]
;;;1301   }
00094c  e8bd8070          POP      {r4-r6,pc}
;;;1302   
                          ENDP

                  dhcp_select PROC
;;;282    static err_t
;;;283    dhcp_select(struct netif *netif)
000950  e92d40f8          PUSH     {r3-r7,lr}
;;;284    {
;;;285      struct dhcp *dhcp = netif->dhcp;
;;;286      err_t result;
;;;287      u16_t msecs;
;;;288    
;;;289      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;290      dhcp_set_state(dhcp, DHCP_REQUESTING);
000954  e5904020          LDR      r4,[r0,#0x20]
000958  e1a05000          MOV      r5,r0                 ;284
00095c  e3a01001          MOV      r1,#1
000960  e1a00004          MOV      r0,r4
000964  ebfffffe          BL       dhcp_set_state
;;;291    
;;;292      /* create and initialize the DHCP message header */
;;;293      result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000968  e3a02003          MOV      r2,#3
00096c  e1a01004          MOV      r1,r4
000970  e1a00005          MOV      r0,r5
000974  ebfffffe          BL       dhcp_create_msg
000978  e1b06000          MOVS     r6,r0
;;;294      if (result == ERR_OK) {
00097c  1a000037          BNE      |L1.2656|
;;;295        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000980  e3a02002          MOV      r2,#2
000984  e3a01039          MOV      r1,#0x39
000988  e1a00004          MOV      r0,r4
00098c  ebfffffe          BL       dhcp_option
;;;296        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000990  e1d512b4          LDRH     r1,[r5,#0x24]
000994  e1a00004          MOV      r0,r4
000998  ebfffffe          BL       dhcp_option_short
;;;297    
;;;298        /* MUST request the offered IP address */
;;;299        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
00099c  e3a02004          MOV      r2,#4
0009a0  e3a01032          MOV      r1,#0x32
0009a4  e1a00004          MOV      r0,r4
0009a8  ebfffffe          BL       dhcp_option
;;;300        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
0009ac  e5940024          LDR      r0,[r4,#0x24]
0009b0  ebfffffe          BL       lwip_ntohl
0009b4  e1a01000          MOV      r1,r0
0009b8  e1a00004          MOV      r0,r4
0009bc  ebfffffe          BL       dhcp_option_long
;;;301    
;;;302        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
0009c0  e3a02004          MOV      r2,#4
0009c4  e3a01036          MOV      r1,#0x36
0009c8  e1a00004          MOV      r0,r4
0009cc  ebfffffe          BL       dhcp_option
;;;303        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
0009d0  e5940020          LDR      r0,[r4,#0x20]
0009d4  ebfffffe          BL       lwip_ntohl
0009d8  e1a01000          MOV      r1,r0
0009dc  e1a00004          MOV      r0,r4
0009e0  ebfffffe          BL       dhcp_option_long
;;;304    
;;;305        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
0009e4  e3a02004          MOV      r2,#4
0009e8  e3a01037          MOV      r1,#0x37
0009ec  e1a00004          MOV      r0,r4
0009f0  ebfffffe          BL       dhcp_option
;;;306        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
0009f4  e3a01001          MOV      r1,#1
0009f8  e1a00004          MOV      r0,r4
0009fc  ebfffffe          BL       dhcp_option_byte
;;;307        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000a00  e3a01003          MOV      r1,#3
000a04  e1a00004          MOV      r0,r4
000a08  ebfffffe          BL       dhcp_option_byte
;;;308        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000a0c  e3a0101c          MOV      r1,#0x1c
000a10  e1a00004          MOV      r0,r4
000a14  ebfffffe          BL       dhcp_option_byte
;;;309        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000a18  e3a01006          MOV      r1,#6
000a1c  e1a00004          MOV      r0,r4
000a20  ebfffffe          BL       dhcp_option_byte
;;;310    
;;;311    #if LWIP_NETIF_HOSTNAME
;;;312        dhcp_option_hostname(dhcp, netif);
;;;313    #endif /* LWIP_NETIF_HOSTNAME */
;;;314    
;;;315        dhcp_option_trailer(dhcp);
000a24  e1a00004          MOV      r0,r4
000a28  ebfffffe          BL       dhcp_option_trailer
;;;316        /* shrink the pbuf to the actual content length */
;;;317        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000a2c  e1d401b8          LDRH     r0,[r4,#0x18]
000a30  e28000f0          ADD      r0,r0,#0xf0
000a34  e3c01801          BIC      r1,r0,#0x10000
000a38  e5940010          LDR      r0,[r4,#0x10]
000a3c  ebfffffe          BL       pbuf_realloc
;;;318    
;;;319        /* send broadcast to any DHCP server */
;;;320        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000a40  e58d5000          STR      r5,[sp,#0]
000a44  e51f21a4          LDR      r2,|L1.2216|
000a48  e5940004          LDR      r0,[r4,#4]
000a4c  e5941010          LDR      r1,[r4,#0x10]
000a50  e3a03043          MOV      r3,#0x43
000a54  ebfffffe          BL       udp_sendto_if
;;;321        dhcp_delete_msg(dhcp);
000a58  e1a00004          MOV      r0,r4
000a5c  ebfffffe          BL       dhcp_delete_msg
                  |L1.2656|
;;;322        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
;;;323      } else {
;;;324        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
;;;325      }
;;;326      dhcp->tries++;
000a60  e5d4000d          LDRB     r0,[r4,#0xd]
000a64  e2800001          ADD      r0,r0,#1
000a68  e20000ff          AND      r0,r0,#0xff
;;;327      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
000a6c  e3500006          CMP      r0,#6
000a70  33a01001          MOVCC    r1,#1
000a74  e5c4000d          STRB     r0,[r4,#0xd]          ;326
000a78  31a00011          LSLCC    r0,r1,r0
000a7c  23a0003c          MOVCS    r0,#0x3c
000a80  e0801080          ADD      r1,r0,r0,LSL #1
000a84  e0610380          RSB      r0,r1,r0,LSL #7
000a88  e51f11e4          LDR      r1,|L1.2220|
000a8c  e0010180          AND      r0,r1,r0,LSL #3
;;;328      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000a90  e2800c01          ADD      r0,r0,#0x100
000a94  e3a01f7d          MOV      r1,#0x1f4
000a98  e28000f3          ADD      r0,r0,#0xf3
000a9c  ebfffffe          BL       __aeabi_uidivmod
000aa0  e1c401ba          STRH     r0,[r4,#0x1a]
;;;329      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
;;;330      return result;
000aa4  e1a00006          MOV      r0,r6
;;;331    }
000aa8  e8bd80f8          POP      {r3-r7,pc}
;;;332    
                          ENDP

                  dhcp_renew PROC
;;;1021   err_t
;;;1022   dhcp_renew(struct netif *netif)
000aac  e92d40f8          PUSH     {r3-r7,lr}
;;;1023   {
;;;1024     struct dhcp *dhcp = netif->dhcp;
;;;1025     err_t result;
;;;1026     u16_t msecs;
;;;1027     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
;;;1028     dhcp_set_state(dhcp, DHCP_RENEWING);
000ab0  e5904020          LDR      r4,[r0,#0x20]
000ab4  e1a05000          MOV      r5,r0                 ;1023
000ab8  e3a01005          MOV      r1,#5
000abc  e1a00004          MOV      r0,r4
000ac0  ebfffffe          BL       dhcp_set_state
;;;1029   
;;;1030     /* create and initialize the DHCP message header */
;;;1031     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000ac4  e3a02003          MOV      r2,#3
000ac8  e1a01004          MOV      r1,r4
000acc  e1a00005          MOV      r0,r5
000ad0  ebfffffe          BL       dhcp_create_msg
000ad4  e1b06000          MOVS     r6,r0
;;;1032     if (result == ERR_OK) {
000ad8  1a000015          BNE      |L1.2868|
;;;1033       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000adc  e3a02002          MOV      r2,#2
000ae0  e3a01039          MOV      r1,#0x39
000ae4  e1a00004          MOV      r0,r4
000ae8  ebfffffe          BL       dhcp_option
;;;1034       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000aec  e1d512b4          LDRH     r1,[r5,#0x24]
000af0  e1a00004          MOV      r0,r4
000af4  ebfffffe          BL       dhcp_option_short
;;;1035   
;;;1036   #if 0
;;;1037       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1038       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1039   #endif
;;;1040   
;;;1041   #if 0
;;;1042       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1043       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1044   #endif
;;;1045   
;;;1046   #if LWIP_NETIF_HOSTNAME
;;;1047       dhcp_option_hostname(dhcp, netif);
;;;1048   #endif /* LWIP_NETIF_HOSTNAME */
;;;1049   
;;;1050       /* append DHCP message trailer */
;;;1051       dhcp_option_trailer(dhcp);
000af8  e1a00004          MOV      r0,r4
000afc  ebfffffe          BL       dhcp_option_trailer
;;;1052   
;;;1053       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000b00  e1d401b8          LDRH     r0,[r4,#0x18]
000b04  e28000f0          ADD      r0,r0,#0xf0
000b08  e3c01801          BIC      r1,r0,#0x10000
000b0c  e5940010          LDR      r0,[r4,#0x10]
000b10  ebfffffe          BL       pbuf_realloc
;;;1054   
;;;1055       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000b14  e58d5000          STR      r5,[sp,#0]
000b18  e5940004          LDR      r0,[r4,#4]
000b1c  e5941010          LDR      r1,[r4,#0x10]
000b20  e3a03043          MOV      r3,#0x43
000b24  e2842020          ADD      r2,r4,#0x20
000b28  ebfffffe          BL       udp_sendto_if
;;;1056       dhcp_delete_msg(dhcp);
000b2c  e1a00004          MOV      r0,r4
000b30  ebfffffe          BL       dhcp_delete_msg
                  |L1.2868|
;;;1057   
;;;1058       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
;;;1059     } else {
;;;1060       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
;;;1061     }
;;;1062     dhcp->tries++;
000b34  e5d4000d          LDRB     r0,[r4,#0xd]
000b38  e2800001          ADD      r0,r0,#1
000b3c  e20000ff          AND      r0,r0,#0xff
;;;1063     /* back-off on retries, but to a maximum of 20 seconds */
;;;1064     msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
000b40  e350000a          CMP      r0,#0xa
000b44  33a01e7d          MOVCC    r1,#0x7d0
000b48  e5c4000d          STRB     r0,[r4,#0xd]          ;1062
000b4c  31600180          SMULBBCC r0,r0,r1
000b50  259f005c          LDRCS    r0,|L1.2996|
;;;1065     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000b54  e3a01f7d          MOV      r1,#0x1f4
000b58  e3c00807          BIC      r0,r0,#0x70000        ;1064
000b5c  e2800c01          ADD      r0,r0,#0x100
000b60  e28000f3          ADD      r0,r0,#0xf3
000b64  ebfffffe          BL       __aeabi_uidivmod
000b68  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1066     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
;;;1067     return result;
000b6c  e1a00006          MOV      r0,r6
;;;1068   }
000b70  e8bd80f8          POP      {r3-r7,pc}
                  |L1.2932|
000b74  64686370          DCB      "dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPT"
000b78  5f6f7074
000b7c  696f6e5f
000b80  6c6f6e67
000b84  3a206468
000b88  63702d3e
000b8c  6f707469
000b90  6f6e735f
000b94  6f75745f
000b98  6c656e20
000b9c  2b203420
000ba0  3c3d2044
000ba4  4843505f
000ba8  4f5054  
000bab  494f4e53          DCB      "IONS_LEN",0
000baf  5f4c454e
000bb3  00      
                  |L1.2996|
                          DCD      0x00004e20
                          ENDP

                  dhcp_rebind PROC
;;;1075   static err_t
;;;1076   dhcp_rebind(struct netif *netif)
000bb8  e92d40f8          PUSH     {r3-r7,lr}
;;;1077   {
;;;1078     struct dhcp *dhcp = netif->dhcp;
;;;1079     err_t result;
;;;1080     u16_t msecs;
;;;1081     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
;;;1082     dhcp_set_state(dhcp, DHCP_REBINDING);
000bbc  e5904020          LDR      r4,[r0,#0x20]
000bc0  e1a05000          MOV      r5,r0                 ;1077
000bc4  e3a01004          MOV      r1,#4
000bc8  e1a00004          MOV      r0,r4
000bcc  ebfffffe          BL       dhcp_set_state
;;;1083   
;;;1084     /* create and initialize the DHCP message header */
;;;1085     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000bd0  e3a02003          MOV      r2,#3
000bd4  e1a01004          MOV      r1,r4
000bd8  e1a00005          MOV      r0,r5
000bdc  ebfffffe          BL       dhcp_create_msg
000be0  e1b06000          MOVS     r6,r0
;;;1086     if (result == ERR_OK) {
000be4  1a000015          BNE      |L1.3136|
;;;1087       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000be8  e3a02002          MOV      r2,#2
000bec  e3a01039          MOV      r1,#0x39
000bf0  e1a00004          MOV      r0,r4
000bf4  ebfffffe          BL       dhcp_option
;;;1088       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000bf8  e1d512b4          LDRH     r1,[r5,#0x24]
000bfc  e1a00004          MOV      r0,r4
000c00  ebfffffe          BL       dhcp_option_short
;;;1089   
;;;1090   #if LWIP_NETIF_HOSTNAME
;;;1091       dhcp_option_hostname(dhcp, netif);
;;;1092   #endif /* LWIP_NETIF_HOSTNAME */
;;;1093   
;;;1094   #if 0
;;;1095       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1096       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1097   
;;;1098       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1099       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1100   #endif
;;;1101   
;;;1102       dhcp_option_trailer(dhcp);
000c04  e1a00004          MOV      r0,r4
000c08  ebfffffe          BL       dhcp_option_trailer
;;;1103   
;;;1104       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000c0c  e1d401b8          LDRH     r0,[r4,#0x18]
000c10  e28000f0          ADD      r0,r0,#0xf0
000c14  e3c01801          BIC      r1,r0,#0x10000
000c18  e5940010          LDR      r0,[r4,#0x10]
000c1c  ebfffffe          BL       pbuf_realloc
;;;1105   
;;;1106       /* broadcast to server */
;;;1107       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000c20  e58d5000          STR      r5,[sp,#0]
000c24  e51f2384          LDR      r2,|L1.2216|
000c28  e5940004          LDR      r0,[r4,#4]
000c2c  e5941010          LDR      r1,[r4,#0x10]
000c30  e3a03043          MOV      r3,#0x43
000c34  ebfffffe          BL       udp_sendto_if
;;;1108       dhcp_delete_msg(dhcp);
000c38  e1a00004          MOV      r0,r4
000c3c  ebfffffe          BL       dhcp_delete_msg
                  |L1.3136|
;;;1109       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
;;;1110     } else {
;;;1111       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
;;;1112     }
;;;1113     dhcp->tries++;
000c40  e5d4000d          LDRB     r0,[r4,#0xd]
000c44  e2800001          ADD      r0,r0,#1
000c48  e20000ff          AND      r0,r0,#0xff
;;;1114     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000c4c  e350000a          CMP      r0,#0xa
000c50  33a01ffa          MOVCC    r1,#0x3e8
000c54  e5c4000d          STRB     r0,[r4,#0xd]          ;1113
000c58  31600180          SMULBBCC r0,r0,r1
000c5c  259f04b8          LDRCS    r0,|L1.4380|
;;;1115     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000c60  e3a01f7d          MOV      r1,#0x1f4
000c64  e3c00803          BIC      r0,r0,#0x30000        ;1114
000c68  e2800c01          ADD      r0,r0,#0x100
000c6c  e28000f3          ADD      r0,r0,#0xf3
000c70  ebfffffe          BL       __aeabi_uidivmod
000c74  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1116     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
;;;1117     return result;
000c78  e1a00006          MOV      r0,r6
;;;1118   }
000c7c  e8bd80f8          POP      {r3-r7,pc}
;;;1119   
                          ENDP

                  dhcp_coarse_tmr PROC
;;;336    void
;;;337    dhcp_coarse_tmr()
000c80  e59f0498          LDR      r0,|L1.4384|
;;;338    {
000c84  e92d4010          PUSH     {r4,lr}
;;;339      struct netif *netif = netif_list;
000c88  e5904000          LDR      r4,[r0,#0]  ; netif_list
000c8c  ea00000e          B        |L1.3276|
                  |L1.3216|
;;;340      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
;;;341      /* iterate through all network interfaces */
;;;342      while (netif != NULL) {
;;;343        /* only act on DHCP configured interfaces */
;;;344        if (netif->dhcp != NULL) {
000c90  e5940020          LDR      r0,[r4,#0x20]
000c94  e3500000          CMP      r0,#0
000c98  0a00000a          BEQ      |L1.3272|
;;;345          /* timer is active (non zero), and triggers (zeroes) now? */
;;;346          if (netif->dhcp->t2_timeout-- == 1) {
000c9c  e1d011be          LDRH     r1,[r0,#0x1e]
000ca0  e2412001          SUB      r2,r1,#1
000ca4  e3510001          CMP      r1,#1
000ca8  e1c021be          STRH     r2,[r0,#0x1e]
000cac  0a000009          BEQ      |L1.3288|
;;;347            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
;;;348            /* this clients' rebind timeout triggered */
;;;349            dhcp_t2_timeout(netif);
;;;350          /* timer is active (non zero), and triggers (zeroes) now */
;;;351          } else if (netif->dhcp->t1_timeout-- == 1) {
000cb0  e5940020          LDR      r0,[r4,#0x20]
000cb4  e1d011bc          LDRH     r1,[r0,#0x1c]
000cb8  e2412001          SUB      r2,r1,#1
000cbc  e3510001          CMP      r1,#1
000cc0  e1c021bc          STRH     r2,[r0,#0x1c]
000cc4  0a00000b          BEQ      |L1.3320|
                  |L1.3272|
;;;352            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
;;;353            /* this clients' renewal timeout triggered */
;;;354            dhcp_t1_timeout(netif);
;;;355          }
;;;356        }
;;;357        /* proceed to next netif */
;;;358        netif = netif->next;
000cc8  e5944000          LDR      r4,[r4,#0]
                  |L1.3276|
000ccc  e3540000          CMP      r4,#0                 ;342
000cd0  1affffee          BNE      |L1.3216|
;;;359      }
;;;360    }
000cd4  e8bd8010          POP      {r4,pc}
                  |L1.3288|
000cd8  e5941020          LDR      r1,[r4,#0x20]
000cdc  e1a00004          MOV      r0,r4                 ;349
000ce0  e5d1100c          LDRB     r1,[r1,#0xc]          ;349
000ce4  e3510001          CMP      r1,#1                 ;349
000ce8  1351000a          CMPNE    r1,#0xa               ;349
000cec  13510005          CMPNE    r1,#5                 ;349
000cf0  0bfffffe          BLEQ     dhcp_rebind
000cf4  eafffff3          B        |L1.3272|
                  |L1.3320|
000cf8  e5941020          LDR      r1,[r4,#0x20]         ;349
000cfc  e1a00004          MOV      r0,r4                 ;354
000d00  e5d1100c          LDRB     r1,[r1,#0xc]          ;354
000d04  e3510001          CMP      r1,#1                 ;354
000d08  1351000a          CMPNE    r1,#0xa               ;354
000d0c  13510005          CMPNE    r1,#5                 ;354
000d10  0bfffffe          BLEQ     dhcp_renew
000d14  eaffffeb          B        |L1.3272|
;;;361    
                          ENDP

                  dhcp_reboot PROC
;;;1125   static err_t
;;;1126   dhcp_reboot(struct netif *netif)
000d18  e92d40f8          PUSH     {r3-r7,lr}
;;;1127   {
;;;1128     struct dhcp *dhcp = netif->dhcp;
;;;1129     err_t result;
;;;1130     u16_t msecs;
;;;1131     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
;;;1132     dhcp_set_state(dhcp, DHCP_REBOOTING);
000d1c  e5904020          LDR      r4,[r0,#0x20]
000d20  e1a06000          MOV      r6,r0                 ;1127
000d24  e3a01003          MOV      r1,#3
000d28  e1a00004          MOV      r0,r4
000d2c  ebfffffe          BL       dhcp_set_state
;;;1133   
;;;1134     /* create and initialize the DHCP message header */
;;;1135     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000d30  e3a02003          MOV      r2,#3
000d34  e1a01004          MOV      r1,r4
000d38  e1a00006          MOV      r0,r6
000d3c  ebfffffe          BL       dhcp_create_msg
000d40  e1b05000          MOVS     r5,r0
;;;1136     if (result == ERR_OK) {
000d44  1a00001e          BNE      |L1.3524|
;;;1137       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000d48  e3a02002          MOV      r2,#2
000d4c  e3a01039          MOV      r1,#0x39
000d50  e1a00004          MOV      r0,r4
000d54  ebfffffe          BL       dhcp_option
;;;1138       dhcp_option_short(dhcp, 576);
000d58  e3a01d09          MOV      r1,#0x240
000d5c  e1a00004          MOV      r0,r4
000d60  ebfffffe          BL       dhcp_option_short
;;;1139   
;;;1140       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000d64  e3a02004          MOV      r2,#4
000d68  e3a01032          MOV      r1,#0x32
000d6c  e1a00004          MOV      r0,r4
000d70  ebfffffe          BL       dhcp_option
;;;1141       dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000d74  e5940024          LDR      r0,[r4,#0x24]
000d78  ebfffffe          BL       lwip_ntohl
000d7c  e1a01000          MOV      r1,r0
000d80  e1a00004          MOV      r0,r4
000d84  ebfffffe          BL       dhcp_option_long
;;;1142   
;;;1143       dhcp_option_trailer(dhcp);
000d88  e1a00004          MOV      r0,r4
000d8c  ebfffffe          BL       dhcp_option_trailer
;;;1144   
;;;1145       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000d90  e1d401b8          LDRH     r0,[r4,#0x18]
000d94  e28000f0          ADD      r0,r0,#0xf0
000d98  e3c01801          BIC      r1,r0,#0x10000
000d9c  e5940010          LDR      r0,[r4,#0x10]
000da0  ebfffffe          BL       pbuf_realloc
;;;1146   
;;;1147       /* broadcast to server */
;;;1148       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000da4  e58d6000          STR      r6,[sp,#0]
000da8  e51f2508          LDR      r2,|L1.2216|
000dac  e5940004          LDR      r0,[r4,#4]
000db0  e5941010          LDR      r1,[r4,#0x10]
000db4  e3a03043          MOV      r3,#0x43
000db8  ebfffffe          BL       udp_sendto_if
;;;1149       dhcp_delete_msg(dhcp);
000dbc  e1a00004          MOV      r0,r4
000dc0  ebfffffe          BL       dhcp_delete_msg
                  |L1.3524|
;;;1150       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
;;;1151     } else {
;;;1152       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
;;;1153     }
;;;1154     dhcp->tries++;
000dc4  e5d4000d          LDRB     r0,[r4,#0xd]
000dc8  e2800001          ADD      r0,r0,#1
000dcc  e20000ff          AND      r0,r0,#0xff
;;;1155     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000dd0  e350000a          CMP      r0,#0xa
000dd4  33a01ffa          MOVCC    r1,#0x3e8
000dd8  e5c4000d          STRB     r0,[r4,#0xd]          ;1154
000ddc  31600180          SMULBBCC r0,r0,r1
000de0  259f0334          LDRCS    r0,|L1.4380|
;;;1156     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000de4  e3a01f7d          MOV      r1,#0x1f4
000de8  e3c00803          BIC      r0,r0,#0x30000        ;1155
000dec  e2800c01          ADD      r0,r0,#0x100
000df0  e28000f3          ADD      r0,r0,#0xf3
000df4  ebfffffe          BL       __aeabi_uidivmod
000df8  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1157     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
;;;1158     return result;
000dfc  e1a00005          MOV      r0,r5
;;;1159   }
000e00  e8bd80f8          POP      {r3-r7,pc}
;;;1160   
                          ENDP

                  dhcp_release PROC
;;;1167   err_t
;;;1168   dhcp_release(struct netif *netif)
000e04  e92d40f8          PUSH     {r3-r7,lr}
;;;1169   {
;;;1170     struct dhcp *dhcp = netif->dhcp;
;;;1171     err_t result;
;;;1172     u16_t msecs;
;;;1173     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
;;;1174   
;;;1175     /* idle DHCP client */
;;;1176     dhcp_set_state(dhcp, DHCP_OFF);
000e08  e5904020          LDR      r4,[r0,#0x20]
000e0c  e1a05000          MOV      r5,r0                 ;1169
000e10  e3a01000          MOV      r1,#0
000e14  e1a00004          MOV      r0,r4
000e18  ebfffffe          BL       dhcp_set_state
;;;1177     /* clean old DHCP offer */
;;;1178     ip_addr_set_zero(&dhcp->server_ip_addr);
000e1c  e3a00000          MOV      r0,#0
;;;1179     ip_addr_set_zero(&dhcp->offered_ip_addr);
000e20  e5840020          STR      r0,[r4,#0x20]
;;;1180     ip_addr_set_zero(&dhcp->offered_sn_mask);
000e24  e5840024          STR      r0,[r4,#0x24]
;;;1181     ip_addr_set_zero(&dhcp->offered_gw_addr);
000e28  e5840028          STR      r0,[r4,#0x28]
;;;1182   #if LWIP_DHCP_BOOTP_FILE
;;;1183     ip_addr_set_zero(&dhcp->offered_si_addr);
;;;1184   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1185     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
000e2c  e584002c          STR      r0,[r4,#0x2c]
000e30  e5840038          STR      r0,[r4,#0x38]
000e34  e5840034          STR      r0,[r4,#0x34]
;;;1186     
;;;1187     /* create and initialize the DHCP message header */
;;;1188     result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
000e38  e5840030          STR      r0,[r4,#0x30]
000e3c  e3a02007          MOV      r2,#7
000e40  e1a01004          MOV      r1,r4
000e44  e1a00005          MOV      r0,r5
000e48  ebfffffe          BL       dhcp_create_msg
000e4c  e1b06000          MOVS     r6,r0
;;;1189     if (result == ERR_OK) {
000e50  1a00000e          BNE      |L1.3728|
;;;1190       dhcp_option_trailer(dhcp);
000e54  e1a00004          MOV      r0,r4
000e58  ebfffffe          BL       dhcp_option_trailer
;;;1191   
;;;1192       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000e5c  e1d401b8          LDRH     r0,[r4,#0x18]
000e60  e28000f0          ADD      r0,r0,#0xf0
000e64  e3c01801          BIC      r1,r0,#0x10000
000e68  e5940010          LDR      r0,[r4,#0x10]
000e6c  ebfffffe          BL       pbuf_realloc
;;;1193   
;;;1194       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000e70  e58d5000          STR      r5,[sp,#0]
000e74  e5940004          LDR      r0,[r4,#4]
000e78  e5941010          LDR      r1,[r4,#0x10]
000e7c  e3a03043          MOV      r3,#0x43
000e80  e2842020          ADD      r2,r4,#0x20
000e84  ebfffffe          BL       udp_sendto_if
;;;1195       dhcp_delete_msg(dhcp);
000e88  e1a00004          MOV      r0,r4
000e8c  ebfffffe          BL       dhcp_delete_msg
                  |L1.3728|
;;;1196       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
;;;1197     } else {
;;;1198       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
;;;1199     }
;;;1200     dhcp->tries++;
000e90  e5d4000d          LDRB     r0,[r4,#0xd]
000e94  e2800001          ADD      r0,r0,#1
000e98  e20000ff          AND      r0,r0,#0xff
;;;1201     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000e9c  e350000a          CMP      r0,#0xa
000ea0  33a01ffa          MOVCC    r1,#0x3e8
000ea4  e5c4000d          STRB     r0,[r4,#0xd]          ;1200
000ea8  31600180          SMULBBCC r0,r0,r1
000eac  259f0268          LDRCS    r0,|L1.4380|
;;;1202     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000eb0  e3a01f7d          MOV      r1,#0x1f4
000eb4  e3c00803          BIC      r0,r0,#0x30000        ;1201
000eb8  e2800c01          ADD      r0,r0,#0x100
000ebc  e28000f3          ADD      r0,r0,#0xf3
000ec0  ebfffffe          BL       __aeabi_uidivmod
000ec4  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1203     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
;;;1204     /* bring the interface down */
;;;1205     netif_set_down(netif);
000ec8  e1a00005          MOV      r0,r5
000ecc  ebfffffe          BL       netif_set_down
;;;1206     /* remove IP address from interface */
;;;1207     netif_set_ipaddr(netif, IP_ADDR_ANY);
000ed0  e59f124c          LDR      r1,|L1.4388|
000ed4  e1a00005          MOV      r0,r5
000ed8  ebfffffe          BL       netif_set_ipaddr
;;;1208     netif_set_gw(netif, IP_ADDR_ANY);
000edc  e59f1240          LDR      r1,|L1.4388|
000ee0  e1a00005          MOV      r0,r5
000ee4  ebfffffe          BL       netif_set_gw
;;;1209     netif_set_netmask(netif, IP_ADDR_ANY);
000ee8  e59f1234          LDR      r1,|L1.4388|
000eec  e1a00005          MOV      r0,r5
000ef0  ebfffffe          BL       netif_set_netmask
;;;1210     
;;;1211     return result;
000ef4  e1a00006          MOV      r0,r6
;;;1212   }
000ef8  e8bd80f8          POP      {r3-r7,pc}
;;;1213   
                          ENDP

                  dhcp_bind PROC
;;;926    static void
;;;927    dhcp_bind(struct netif *netif)
000efc  e92d41fc          PUSH     {r2-r8,lr}
;;;928    {
000f00  e1b06000          MOVS     r6,r0
;;;929      u32_t timeout;
;;;930      struct dhcp *dhcp;
;;;931      ip_addr_t sn_mask, gw_addr;
;;;932      LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
000f04  051f3694          LDREQ    r3,|L1.2168|
000f08  03a02fe9          MOVEQ    r2,#0x3a4
000f0c  028f1f85          ADREQ    r1,|L1.4392|
000f10  0a000030          BEQ      |L1.4056|
;;;933      dhcp = netif->dhcp;
000f14  e5964020          LDR      r4,[r6,#0x20]
;;;934      LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
000f18  e3540000          CMP      r4,#0
000f1c  051f36ac          LDREQ    r3,|L1.2168|
000f20  059f221c          LDREQ    r2,|L1.4420|
000f24  028f1f87          ADREQ    r1,|L1.4424|
000f28  0a00002a          BEQ      |L1.4056|
;;;935      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;936    
;;;937      /* temporary DHCP lease? */
;;;938      if (dhcp->offered_t1_renew != 0xffffffffUL) {
;;;939        /* set renewal period timer */
;;;940        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;941        timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;942        if(timeout > 0xffff) {
;;;943          timeout = 0xffff;
000f2c  e5940034          LDR      r0,[r4,#0x34]
;;;944        }
;;;945        dhcp->t1_timeout = (u16_t)timeout;
;;;946        if (dhcp->t1_timeout == 0) {
;;;947          dhcp->t1_timeout = 1;
000f30  e3a07001          MOV      r7,#1
000f34  e3700001          CMN      r0,#1                 ;938
000f38  e0675807          RSB      r5,r7,r7,LSL #16      ;943
000f3c  0a000008          BEQ      |L1.3940|
000f40  e3a0103c          MOV      r1,#0x3c              ;941
000f44  e280001e          ADD      r0,r0,#0x1e           ;941
000f48  ebfffffe          BL       __aeabi_uidivmod
000f4c  e3500801          CMP      r0,#0x10000           ;942
000f50  21a00005          MOVCS    r0,r5                 ;943
000f54  e1a00800          LSL      r0,r0,#16             ;945
000f58  e1b00820          LSRS     r0,r0,#16             ;945
000f5c  e1c401bc          STRH     r0,[r4,#0x1c]         ;945
000f60  01c471bc          STRHEQ   r7,[r4,#0x1c]
                  |L1.3940|
;;;948        }
;;;949        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;950      }
;;;951      /* set renewal period timer */
;;;952      if (dhcp->offered_t2_rebind != 0xffffffffUL) {
000f64  e5940038          LDR      r0,[r4,#0x38]
000f68  e3700001          CMN      r0,#1
000f6c  0a000008          BEQ      |L1.3988|
;;;953        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;954        timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
000f70  e3a0103c          MOV      r1,#0x3c
000f74  e280001e          ADD      r0,r0,#0x1e
000f78  ebfffffe          BL       __aeabi_uidivmod
;;;955        if(timeout > 0xffff) {
000f7c  e3500801          CMP      r0,#0x10000
;;;956          timeout = 0xffff;
000f80  21a00005          MOVCS    r0,r5
;;;957        }
;;;958        dhcp->t2_timeout = (u16_t)timeout;
000f84  e1a00800          LSL      r0,r0,#16
000f88  e1b00820          LSRS     r0,r0,#16
000f8c  e1c401be          STRH     r0,[r4,#0x1e]
;;;959        if (dhcp->t2_timeout == 0) {
;;;960          dhcp->t2_timeout = 1;
000f90  01c471be          STRHEQ   r7,[r4,#0x1e]
                  |L1.3988|
;;;961        }
;;;962        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;963      }
;;;964    
;;;965      /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
;;;966      if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
000f94  e1d411bc          LDRH     r1,[r4,#0x1c]
000f98  e1d401be          LDRH     r0,[r4,#0x1e]
000f9c  e1510000          CMP      r1,r0
000fa0  3a000002          BCC      |L1.4016|
000fa4  e3500000          CMP      r0,#0
;;;967        dhcp->t1_timeout = 0;
000fa8  13a00000          MOVNE    r0,#0
000fac  11c401bc          STRHNE   r0,[r4,#0x1c]
                  |L1.4016|
;;;968      }
;;;969    
;;;970      if (dhcp->subnet_mask_given) {
000fb0  e5d4000e          LDRB     r0,[r4,#0xe]
000fb4  e3500000          CMP      r0,#0
;;;971        /* copy offered network mask */
;;;972        ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
000fb8  15940028          LDRNE    r0,[r4,#0x28]
000fbc  0a000008          BEQ      |L1.4068|
                  |L1.4032|
;;;973      } else {
;;;974        /* subnet mask not given, choose a safe subnet mask given the network class */
;;;975        u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
;;;976        if (first_octet <= 127) {
;;;977          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
000fc0  e58d0000          STR      r0,[sp,#0]
                  |L1.4036|
;;;978        } else if (first_octet >= 192) {
;;;979          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
;;;980        } else {
;;;981          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
;;;982        }
;;;983      }
;;;984    
;;;985      ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
000fc4  e594002c          LDR      r0,[r4,#0x2c]
;;;986      /* gateway address not given? */
;;;987      if (ip_addr_isany(&gw_addr)) {
000fc8  e3500000          CMP      r0,#0
000fcc  e58d0004          STR      r0,[sp,#4]            ;985
000fd0  1a000011          BNE      |L1.4124|
000fd4  ea00000b          B        |L1.4104|
                  |L1.4056|
000fd8  e51f0740          LDR      r0,|L1.2208|
000fdc  ebfffffe          BL       sysprintf
;;;988        /* copy network address */
;;;989        ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
;;;990        /* use first host address on network as gateway */
;;;991        ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
;;;992      }
;;;993    
;;;994    #if LWIP_DHCP_AUTOIP_COOP
;;;995      if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;996        autoip_stop(netif);
;;;997        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;998      }
;;;999    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1000   
;;;1001     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
;;;1002       ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;1003     netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
;;;1004     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
;;;1005       ip4_addr_get_u32(&sn_mask)));
;;;1006     netif_set_netmask(netif, &sn_mask);
;;;1007     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
;;;1008       ip4_addr_get_u32(&gw_addr)));
;;;1009     netif_set_gw(netif, &gw_addr);
;;;1010     /* bring the interface up */
;;;1011     netif_set_up(netif);
;;;1012     /* netif is now bound to DHCP leased address */
;;;1013     dhcp_set_state(dhcp, DHCP_BOUND);
;;;1014   }
000fe0  e8bd81fc          POP      {r2-r8,pc}
                  |L1.4068|
000fe4  e5d40024          LDRB     r0,[r4,#0x24]         ;975
000fe8  e350007f          CMP      r0,#0x7f              ;976
000fec  93a000ff          MOVLS    r0,#0xff              ;977
000ff0  9afffff2          BLS      |L1.4032|
000ff4  e35000c0          CMP      r0,#0xc0              ;978
000ff8  23e004ff          MVNCS    r0,#0xff000000        ;979
000ffc  358d5000          STRCC    r5,[sp,#0]            ;981
001000  3affffef          BCC      |L1.4036|
001004  eaffffed          B        |L1.4032|
                  |L1.4104|
001008  e5940024          LDR      r0,[r4,#0x24]         ;989
00100c  e59d1000          LDR      r1,[sp,#0]            ;989
001010  e0000001          AND      r0,r0,r1              ;989
001014  e3800401          ORR      r0,r0,#0x1000000      ;991
001018  e58d0004          STR      r0,[sp,#4]            ;991
                  |L1.4124|
00101c  e2841024          ADD      r1,r4,#0x24           ;1003
001020  e1a00006          MOV      r0,r6                 ;1003
001024  ebfffffe          BL       netif_set_ipaddr
001028  e1a0100d          MOV      r1,sp                 ;1006
00102c  e1a00006          MOV      r0,r6                 ;1006
001030  ebfffffe          BL       netif_set_netmask
001034  e28d1004          ADD      r1,sp,#4              ;1009
001038  e1a00006          MOV      r0,r6                 ;1009
00103c  ebfffffe          BL       netif_set_gw
001040  e1a00006          MOV      r0,r6                 ;1011
001044  ebfffffe          BL       netif_set_up
001048  e3a0100a          MOV      r1,#0xa               ;1013
00104c  e1a00004          MOV      r0,r4                 ;1013
001050  ebfffffe          BL       dhcp_set_state
001054  e8bd81fc          POP      {r2-r8,pc}
;;;1015   
                          ENDP

                  dhcp_fine_tmr PROC
;;;368    void
;;;369    dhcp_fine_tmr()
001058  e92d4070          PUSH     {r4-r6,lr}
;;;370    {
;;;371      struct netif *netif = netif_list;
00105c  e59f00bc          LDR      r0,|L1.4384|
001060  e3a05000          MOV      r5,#0
001064  e5904000          LDR      r4,[r0,#0]  ; netif_list
001068  ea00000b          B        |L1.4252|
                  |L1.4204|
;;;372      /* loop through netif's */
;;;373      while (netif != NULL) {
;;;374        /* only act on DHCP configured interfaces */
;;;375        if (netif->dhcp != NULL) {
00106c  e5940020          LDR      r0,[r4,#0x20]
001070  e3500000          CMP      r0,#0
001074  0a000007          BEQ      |L1.4248|
;;;376          /* timer is active (non zero), and is about to trigger now */      
;;;377          if (netif->dhcp->request_timeout > 1) {
001078  e1d011ba          LDRH     r1,[r0,#0x1a]
00107c  e3510001          CMP      r1,#1
001080  82411001          SUBHI    r1,r1,#1
;;;378            netif->dhcp->request_timeout--;
001084  81c011ba          STRHHI   r1,[r0,#0x1a]
001088  8a000002          BHI      |L1.4248|
;;;379          }
;;;380          else if (netif->dhcp->request_timeout == 1) {
;;;381            netif->dhcp->request_timeout--;
00108c  01c051ba          STRHEQ   r5,[r0,#0x1a]
;;;382            /* { netif->dhcp->request_timeout == 0 } */
;;;383            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
;;;384            /* this client's request timeout triggered */
;;;385            dhcp_timeout(netif);
001090  01a00004          MOVEQ    r0,r4
001094  0bfffffe          BLEQ     dhcp_timeout
                  |L1.4248|
;;;386          }
;;;387        }
;;;388        /* proceed to next network interface */
;;;389        netif = netif->next;
001098  e5944000          LDR      r4,[r4,#0]
                  |L1.4252|
00109c  e3540000          CMP      r4,#0                 ;373
0010a0  1afffff1          BNE      |L1.4204|
;;;390      }
;;;391    }
0010a4  e8bd8070          POP      {r4-r6,pc}
;;;392    
                          ENDP

                  dhcp_set_struct PROC
;;;586    void
;;;587    dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
0010a8  e92d4070          PUSH     {r4-r6,lr}
;;;588    {
0010ac  e1b04000          MOVS     r4,r0
0010b0  e1a05001          MOV      r5,r1
0010b4  1a000004          BNE      |L1.4300|
;;;589      LWIP_ASSERT("netif != NULL", netif != NULL);
0010b8  e51f3848          LDR      r3,|L1.2168|
0010bc  e59f209c          LDR      r2,|L1.4448|
0010c0  e51f0828          LDR      r0,|L1.2208|
0010c4  e28f1098          ADR      r1,|L1.4452|
0010c8  ebfffffe          BL       sysprintf
                  |L1.4300|
;;;590      LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
0010cc  e3550000          CMP      r5,#0
0010d0  1a000004          BNE      |L1.4328|
0010d4  e51f3864          LDR      r3,|L1.2168|
0010d8  e59f2094          LDR      r2,|L1.4468|
0010dc  e51f0844          LDR      r0,|L1.2208|
0010e0  e28f1090          ADR      r1,|L1.4472|
0010e4  ebfffffe          BL       sysprintf
                  |L1.4328|
;;;591      LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
0010e8  e5940020          LDR      r0,[r4,#0x20]
0010ec  e3500000          CMP      r0,#0
0010f0  0a000004          BEQ      |L1.4360|
0010f4  e51f3884          LDR      r3,|L1.2168|
0010f8  e59f2088          LDR      r2,|L1.4488|
0010fc  e51f0864          LDR      r0,|L1.2208|
001100  e28f1084          ADR      r1,|L1.4492|
001104  ebfffffe          BL       sysprintf
                  |L1.4360|
;;;592    
;;;593      /* clear data structure */
;;;594      memset(dhcp, 0, sizeof(struct dhcp));
001108  e3a0103c          MOV      r1,#0x3c
00110c  e1a00005          MOV      r0,r5
001110  ebfffffe          BL       __aeabi_memclr4
;;;595      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;596      netif->dhcp = dhcp;
001114  e5845020          STR      r5,[r4,#0x20]
;;;597    }
001118  e8bd8070          POP      {r4-r6,pc}
                  |L1.4380|
                          DCD      0x00002710
                  |L1.4384|
                          DCD      netif_list
                  |L1.4388|
                          DCD      ip_addr_any
                  |L1.4392|
001128  64686370          DCB      "dhcp_bind: netif != NULL",0
00112c  5f62696e
001130  643a206e
001134  65746966
001138  20213d20
00113c  4e554c4c
001140  00      
001141  00                DCB      0
001142  00                DCB      0
001143  00                DCB      0
                  |L1.4420|
                          DCD      0x000003a6
                  |L1.4424|
001148  64686370          DCB      "dhcp_bind: dhcp != NULL",0
00114c  5f62696e
001150  643a2064
001154  68637020
001158  213d204e
00115c  554c4c00
                  |L1.4448|
                          DCD      0x0000024d
                  |L1.4452|
001164  6e657469          DCB      "netif != NULL",0
001168  6620213d
00116c  204e554c
001170  4c00    
001172  00                DCB      0
001173  00                DCB      0
                  |L1.4468|
                          DCD      0x0000024e
                  |L1.4472|
001178  64686370          DCB      "dhcp != NULL",0
00117c  20213d20
001180  4e554c4c
001184  00      
001185  00                DCB      0
001186  00                DCB      0
001187  00                DCB      0
                  |L1.4488|
                          DCD      0x0000024f
                  |L1.4492|
00118c  6e657469          DCB      "netif already has a struct dhcp set",0
001190  6620616c
001194  72656164
001198  79206861
00119c  73206120
0011a0  73747275
0011a4  63742064
0011a8  68637020
0011ac  73657400
                          ENDP

                  dhcp_cleanup PROC
;;;605     */
;;;606    void dhcp_cleanup(struct netif *netif)
0011b0  e92d4010          PUSH     {r4,lr}
;;;607    {
0011b4  e1b04000          MOVS     r4,r0
0011b8  1a000004          BNE      |L1.4560|
;;;608      LWIP_ASSERT("netif != NULL", netif != NULL);
0011bc  e51f394c          LDR      r3,|L1.2168|
0011c0  e51f0928          LDR      r0,|L1.2208|
0011c4  e3a02e26          MOV      r2,#0x260
0011c8  e24f106c          ADR      r1,|L1.4452|
0011cc  ebfffffe          BL       sysprintf
                  |L1.4560|
;;;609    
;;;610      if (netif->dhcp != NULL) {
0011d0  e5940020          LDR      r0,[r4,#0x20]
0011d4  e3500000          CMP      r0,#0
;;;611        mem_free(netif->dhcp);
;;;612        netif->dhcp = NULL;
;;;613      }
;;;614    }
0011d8  08bd8010          POPEQ    {r4,pc}
0011dc  ebfffffe          BL       mem_free
0011e0  e3a00000          MOV      r0,#0                 ;612
0011e4  e5840020          STR      r0,[r4,#0x20]         ;612
0011e8  e8bd8010          POP      {r4,pc}
;;;615    
                          ENDP

                  dhcp_stop PROC
;;;1219   void
;;;1220   dhcp_stop(struct netif *netif)
0011ec  e92d4010          PUSH     {r4,lr}
;;;1221   {
;;;1222     struct dhcp *dhcp;
;;;1223     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
0011f0  e3500000          CMP      r0,#0
0011f4  0a000017          BEQ      |L1.4696|
;;;1224     dhcp = netif->dhcp;
;;;1225     /* Remove the flag that says this netif is handled by DHCP. */
;;;1226     netif->flags &= ~NETIF_FLAG_DHCP;
0011f8  e5d0102d          LDRB     r1,[r0,#0x2d]
0011fc  e5904020          LDR      r4,[r0,#0x20]         ;1224
001200  e3c11008          BIC      r1,r1,#8
;;;1227   
;;;1228     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
;;;1229     /* netif is DHCP configured? */
;;;1230     if (dhcp != NULL) {
001204  e3540000          CMP      r4,#0
001208  e5c0102d          STRB     r1,[r0,#0x2d]         ;1226
;;;1231   #if LWIP_DHCP_AUTOIP_COOP
;;;1232       if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1233         autoip_stop(netif);
;;;1234         dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1235       }
;;;1236   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1237   
;;;1238       if (dhcp->pcb != NULL) {
;;;1239         udp_remove(dhcp->pcb);
;;;1240         dhcp->pcb = NULL;
;;;1241       }
;;;1242       LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
;;;1243       dhcp_set_state(dhcp, DHCP_OFF);
;;;1244     }
;;;1245   }
00120c  08bd8010          POPEQ    {r4,pc}
001210  e5940004          LDR      r0,[r4,#4]            ;1238
001214  e3500000          CMP      r0,#0                 ;1238
001218  0a000002          BEQ      |L1.4648|
00121c  ebfffffe          BL       udp_remove
001220  e3a00000          MOV      r0,#0                 ;1240
001224  e5840004          STR      r0,[r4,#4]            ;1240
                  |L1.4648|
001228  e5940008          LDR      r0,[r4,#8]            ;1242
00122c  e3500000          CMP      r0,#0                 ;1242
001230  0a000004          BEQ      |L1.4680|
001234  e51f39c4          LDR      r3,|L1.2168|
001238  e59f22d8          LDR      r2,|L1.5400|
00123c  e51f09a4          LDR      r0,|L1.2208|
001240  e28f1fb5          ADR      r1,|L1.5404|
001244  ebfffffe          BL       sysprintf
                  |L1.4680|
001248  e1a00004          MOV      r0,r4                 ;1243
00124c  e8bd4010          POP      {r4,lr}               ;1243
001250  e3a01000          MOV      r1,#0                 ;1243
001254  eafffffe          B        dhcp_set_state
                  |L1.4696|
001258  e8bd4010          POP      {r4,lr}               ;1223
00125c  e51f39ec          LDR      r3,|L1.2168|
001260  e59f22c8          LDR      r2,|L1.5424|
001264  e51f09cc          LDR      r0,|L1.2208|
001268  e28f1fb1          ADR      r1,|L1.5428|
00126c  eafffffe          B        sysprintf
;;;1246   
                          ENDP

                  dhcp_parse_reply PROC
;;;1336   static err_t
;;;1337   dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
001270  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1338   {
;;;1339     u8_t *options;
;;;1340     u16_t offset;
;;;1341     u16_t offset_max;
;;;1342     u16_t options_idx;
;;;1343     u16_t options_idx_max;
;;;1344     struct pbuf *q;
;;;1345     int parse_file_as_options = 0;
001274  e3a01000          MOV      r1,#0
001278  e24dd00c          SUB      sp,sp,#0xc            ;1338
00127c  e1a04000          MOV      r4,r0                 ;1338
;;;1346     int parse_sname_as_options = 0;
001280  e1a0b001          MOV      r11,r1
001284  e58d1004          STR      r1,[sp,#4]            ;1345
;;;1347   
;;;1348     /* clear received options */
;;;1349     dhcp_clear_all_options(dhcp);
001288  e59f02c0          LDR      r0,|L1.5456|
00128c  e3a0100a          MOV      r1,#0xa
001290  ebfffffe          BL       __aeabi_memclr4
;;;1350     /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
;;;1351     if (p->len < DHCP_SNAME_OFS) {
001294  e59d1010          LDR      r1,[sp,#0x10]
001298  e1d110ba          LDRH     r1,[r1,#0xa]
00129c  e351002c          CMP      r1,#0x2c
0012a0  3a000015          BCC      |L1.4860|
;;;1352       return ERR_BUF;
;;;1353     }
;;;1354     dhcp->msg_in = (struct dhcp_msg *)p->payload;
0012a4  e59d1010          LDR      r1,[sp,#0x10]
;;;1355   #if LWIP_DHCP_BOOTP_FILE
;;;1356     /* clear boot file name */
;;;1357     dhcp->boot_file_name[0] = 0;
;;;1358   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1359   
;;;1360     /* parse options */
;;;1361   
;;;1362     /* start with options field */
;;;1363     options_idx = DHCP_OPTIONS_OFS;
0012a8  e3a060f0          MOV      r6,#0xf0
0012ac  e5911004          LDR      r1,[r1,#4]            ;1354
;;;1364     /* parse options to the end of the received packet */
;;;1365     options_idx_max = p->tot_len;
0012b0  e5841008          STR      r1,[r4,#8]
0012b4  e59d0010          LDR      r0,[sp,#0x10]
0012b8  e1d080b8          LDRH     r8,[r0,#8]
                  |L1.4796|
;;;1366   again:
;;;1367     q = p;
0012bc  e59d7010          LDR      r7,[sp,#0x10]
;;;1368     while((q != NULL) && (options_idx >= q->len)) {
0012c0  ea000006          B        |L1.4832|
                  |L1.4804|
;;;1369       options_idx -= q->len;
0012c4  e0461000          SUB      r1,r6,r0
;;;1370       options_idx_max -= q->len;
0012c8  e0480000          SUB      r0,r8,r0
;;;1371       q = q->next;
0012cc  e5977000          LDR      r7,[r7,#0]
0012d0  e1a06801          LSL      r6,r1,#16             ;1369
0012d4  e1a08800          LSL      r8,r0,#16             ;1370
0012d8  e1a06826          LSR      r6,r6,#16             ;1369
0012dc  e1a08828          LSR      r8,r8,#16             ;1370
                  |L1.4832|
0012e0  e3570000          CMP      r7,#0                 ;1368
0012e4  0a000004          BEQ      |L1.4860|
0012e8  e1d700ba          LDRH     r0,[r7,#0xa]          ;1368
0012ec  e1500006          CMP      r0,r6                 ;1368
;;;1372     }
;;;1373     if (q == NULL) {
;;;1374       return ERR_BUF;
;;;1375     }
;;;1376     offset = options_idx;
;;;1377     offset_max = options_idx_max;
;;;1378     options = (u8_t*)q->payload;
0012f0  8597a004          LDRHI    r10,[r7,#4]
0012f4  9afffff2          BLS      |L1.4804|
0012f8  ea0000f6          B        |L1.5848|
                  |L1.4860|
0012fc  e3e00001          MVN      r0,#1                 ;1374
                  |L1.4864|
001300  e28dd014          ADD      sp,sp,#0x14           ;1374
;;;1379     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1380     while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
;;;1381       u8_t op = options[offset];
;;;1382       u8_t len;
;;;1383       u8_t decode_len = 0;
;;;1384       int decode_idx = -1;
;;;1385       u16_t val_offset = offset + 2;
;;;1386       /* len byte might be in the next pbuf */
;;;1387       if (offset + 1 < q->len) {
;;;1388         len = options[offset + 1];
;;;1389       } else {
;;;1390         len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
;;;1391       }
;;;1392       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1393       decode_len = len;
;;;1394       switch(op) {
;;;1395         /* case(DHCP_OPTION_END): handled above */
;;;1396         case(DHCP_OPTION_PAD):
;;;1397           /* special option: no len encoded */
;;;1398           decode_len = len = 0;
;;;1399           /* will be increased below */
;;;1400           offset--;
;;;1401           break;
;;;1402         case(DHCP_OPTION_SUBNET_MASK):
;;;1403           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1404           decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
;;;1405           break;
;;;1406         case(DHCP_OPTION_ROUTER):
;;;1407           decode_len = 4; /* only copy the first given router */
;;;1408           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1409           decode_idx = DHCP_OPTION_IDX_ROUTER;
;;;1410           break;
;;;1411         case(DHCP_OPTION_DNS_SERVER):
;;;1412           /* special case: there might be more than one server */
;;;1413           LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1414           /* limit number of DNS servers */
;;;1415           decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
;;;1416           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1417           decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
;;;1418           break;
;;;1419         case(DHCP_OPTION_LEASE_TIME):
;;;1420           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1421           decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
;;;1422           break;
;;;1423         case(DHCP_OPTION_OVERLOAD):
;;;1424           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1425           decode_idx = DHCP_OPTION_IDX_OVERLOAD;
;;;1426           break;
;;;1427         case(DHCP_OPTION_MESSAGE_TYPE):
;;;1428           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1429           decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
;;;1430           break;
;;;1431         case(DHCP_OPTION_SERVER_ID):
;;;1432           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1433           decode_idx = DHCP_OPTION_IDX_SERVER_ID;
;;;1434           break;
;;;1435         case(DHCP_OPTION_T1):
;;;1436           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1437           decode_idx = DHCP_OPTION_IDX_T1;
;;;1438           break;
;;;1439         case(DHCP_OPTION_T2):
;;;1440           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1441           decode_idx = DHCP_OPTION_IDX_T2;
;;;1442           break;
;;;1443         default:
;;;1444           decode_len = 0;
;;;1445           LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
;;;1446           break;
;;;1447       }
;;;1448       offset += len + 2;
;;;1449       if (decode_len > 0) {
;;;1450         u32_t value = 0;
;;;1451         u16_t copy_len;
;;;1452   decode_next:
;;;1453         LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
;;;1454         if (!dhcp_option_given(dhcp, decode_idx)) {
;;;1455           copy_len = LWIP_MIN(decode_len, 4);
;;;1456           pbuf_copy_partial(q, &value, copy_len, val_offset);
;;;1457           if (decode_len > 4) {
;;;1458             /* decode more than one u32_t */
;;;1459             LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
;;;1460             dhcp_got_option(dhcp, decode_idx);
;;;1461             dhcp_set_option_value(dhcp, decode_idx, htonl(value));
;;;1462             decode_len -= 4;
;;;1463             val_offset += 4;
;;;1464             decode_idx++;
;;;1465             goto decode_next;
;;;1466           } else if (decode_len == 4) {
;;;1467             value = ntohl(value);
;;;1468           } else {
;;;1469             LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
;;;1470             value = ((u8_t*)&value)[0];
;;;1471           }
;;;1472           dhcp_got_option(dhcp, decode_idx);
;;;1473           dhcp_set_option_value(dhcp, decode_idx, value);
;;;1474         }
;;;1475       }
;;;1476       if (offset >= q->len) {
;;;1477         offset -= q->len;
;;;1478         offset_max -= q->len;
;;;1479         if ((offset < offset_max) && offset_max) {
;;;1480           q = q->next;
;;;1481           LWIP_ASSERT("next pbuf was null", q);
;;;1482           options = (u8_t*)q->payload;
;;;1483         } else {
;;;1484           // We've run out of bytes, probably no end marker. Don't proceed.
;;;1485           break;
;;;1486         }
;;;1487       }
;;;1488     }
;;;1489     /* is this an overloaded message? */
;;;1490     if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
;;;1491       u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1492       dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1493       if (overload == DHCP_OVERLOAD_FILE) {
;;;1494         parse_file_as_options = 1;
;;;1495         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
;;;1496       } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1497         parse_sname_as_options = 1;
;;;1498         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
;;;1499       } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
;;;1500         parse_sname_as_options = 1;
;;;1501         parse_file_as_options = 1;
;;;1502         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
;;;1503       } else {
;;;1504         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
;;;1505       }
;;;1506   #if LWIP_DHCP_BOOTP_FILE
;;;1507       if (!parse_file_as_options) {
;;;1508         /* only do this for ACK messages */
;;;1509         if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
;;;1510           (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
;;;1511         /* copy bootp file name, don't care for sname (server hostname) */
;;;1512         pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
;;;1513         /* make sure the string is really NULL-terminated */
;;;1514         dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
;;;1515       }
;;;1516   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1517     }
;;;1518     if (parse_file_as_options) {
;;;1519       /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
;;;1520       parse_file_as_options = 0;
;;;1521       options_idx = DHCP_FILE_OFS;
;;;1522       options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
;;;1523       goto again;
;;;1524     } else if (parse_sname_as_options) {
;;;1525       parse_sname_as_options = 0;
;;;1526       options_idx = DHCP_SNAME_OFS;
;;;1527       options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
;;;1528       goto again;
;;;1529     }
;;;1530     return ERR_OK;
;;;1531   }
001304  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4872|
001308  e2860002          ADD      r0,r6,#2              ;1385
00130c  e3c09801          BIC      r9,r0,#0x10000        ;1385
001310  e1d700ba          LDRH     r0,[r7,#0xa]          ;1387
001314  e2862001          ADD      r2,r6,#1              ;1387
001318  e3e04000          MVN      r4,#0                 ;1384
00131c  e1520000          CMP      r2,r0                 ;1387
001320  308a0006          ADDCC    r0,r10,r6             ;1388
001324  35d00001          LDRBCC   r0,[r0,#1]            ;1388
001328  3a000003          BCC      |L1.4924|
00132c  e5970000          LDR      r0,[r7,#0]            ;1390
001330  e3500000          CMP      r0,#0                 ;1390
001334  15900004          LDRNE    r0,[r0,#4]            ;1390
001338  15d00000          LDRBNE   r0,[r0,#0]            ;1390
                  |L1.4924|
00133c  e3510034          CMP      r1,#0x34              ;1394
001340  e1a05000          MOV      r5,r0                 ;1393
001344  0a000051          BEQ      |L1.5264|
001348  ca00000c          BGT      |L1.4992|
00134c  e3510003          CMP      r1,#3                 ;1394
001350  0a000033          BEQ      |L1.5156|
001354  ca000004          BGT      |L1.4972|
001358  e3510000          CMP      r1,#0                 ;1394
00135c  0a000023          BEQ      |L1.5104|
001360  e3510001          CMP      r1,#1                 ;1394
001364  0a000027          BEQ      |L1.5128|
001368  ea00000c          B        |L1.5024|
                  |L1.4972|
00136c  e3510006          CMP      r1,#6                 ;1394
001370  0a000033          BEQ      |L1.5188|
001374  e3510033          CMP      r1,#0x33              ;1394
001378  0a00003e          BEQ      |L1.5240|
00137c  ea000007          B        |L1.5024|
                  |L1.4992|
001380  e3510035          CMP      r1,#0x35              ;1394
001384  0a00004b          BEQ      |L1.5304|
001388  e3510036          CMP      r1,#0x36              ;1394
00138c  0a00004f          BEQ      |L1.5328|
001390  e351003a          CMP      r1,#0x3a              ;1394
001394  0a000053          BEQ      |L1.5352|
001398  e351003b          CMP      r1,#0x3b              ;1394
00139c  0a000057          BEQ      |L1.5376|
                  |L1.5024|
0013a0  e3a05000          MOV      r5,#0                 ;1444
                  |L1.5028|
0013a4  e0800006          ADD      r0,r0,r6              ;1448
0013a8  e2800002          ADD      r0,r0,#2              ;1448
0013ac  e3550000          CMP      r5,#0                 ;1449
0013b0  e3c06803          BIC      r6,r0,#0x30000        ;1448
0013b4  13a00000          MOVNE    r0,#0                 ;1450
0013b8  158d0000          STRNE    r0,[sp,#0]            ;1450
0013bc  0a0000ad          BEQ      |L1.5752|
                  |L1.5056|
0013c0  e354000a          CMP      r4,#0xa               ;1453
0013c4  3a000004          BCC      |L1.5084|
0013c8  e51f3b58          LDR      r3,|L1.2168|
0013cc  e59f2180          LDR      r2,|L1.5460|
0013d0  e51f0b38          LDR      r0,|L1.2208|
0013d4  e28f1f5f          ADR      r1,|L1.5464|
0013d8  ebfffffe          BL       sysprintf
                  |L1.5084|
0013dc  e59f016c          LDR      r0,|L1.5456|
0013e0  e7d00004          LDRB     r0,[r0,r4]            ;1454
0013e4  e3500000          CMP      r0,#0                 ;1454
0013e8  0a000075          BEQ      |L1.5572|
0013ec  ea0000a1          B        |L1.5752|
                  |L1.5104|
0013f0  e2461001          SUB      r1,r6,#1              ;1400
0013f4  e3a00000          MOV      r0,#0                 ;1398
0013f8  e1a06801          LSL      r6,r1,#16             ;1400
0013fc  e1a05000          MOV      r5,r0                 ;1398
001400  e1a06826          LSR      r6,r6,#16             ;1400
001404  eaffffe6          B        |L1.5028|
                  |L1.5128|
001408  e3500004          CMP      r0,#4                 ;1403
00140c  151f3b9c          LDRNE    r3,|L1.2168|
001410  159f2154          LDRNE    r2,|L1.5484|
001414  03a04006          MOVEQ    r4,#6                 ;1404
001418  0affffe1          BEQ      |L1.5028|
                  |L1.5148|
00141c  e28f1f53          ADR      r1,|L1.5488|
001420  ea000020          B        |L1.5288|
                  |L1.5156|
001424  e3500004          CMP      r0,#4                 ;1408
001428  351f3bb8          LDRCC    r3,|L1.2168|
00142c  e3a05004          MOV      r5,#4                 ;1407
001430  33a02d16          MOVCC    r2,#0x580             ;1408
001434  23a04007          MOVCS    r4,#7                 ;1409
001438  2affffd9          BCS      |L1.5028|
                  |L1.5180|
00143c  e28f1f4e          ADR      r1,|L1.5500|
001440  ea000018          B        |L1.5288|
                  |L1.5188|
001444  e3100003          TST      r0,#3                 ;1413
001448  151f3bd8          LDRNE    r3,|L1.2168|
00144c  159f213c          LDRNE    r2,|L1.5520|
001450  128f1f4f          ADRNE    r1,|L1.5524|
001454  1a000013          BNE      |L1.5288|
001458  e3500008          CMP      r0,#8                 ;1415
00145c  23a05008          MOVCS    r5,#8                 ;1415
001460  e1500005          CMP      r0,r5                 ;1416
001464  351f3bf4          LDRCC    r3,|L1.2168|
001468  359f2134          LDRCC    r2,|L1.5540|
00146c  23a04008          MOVCS    r4,#8                 ;1417
001470  3afffff1          BCC      |L1.5180|
001474  eaffffca          B        |L1.5028|
                  |L1.5240|
001478  e3500004          CMP      r0,#4                 ;1420
00147c  151f3c0c          LDRNE    r3,|L1.2168|
001480  159f2120          LDRNE    r2,|L1.5544|
001484  03a04003          MOVEQ    r4,#3                 ;1421
001488  1affffe3          BNE      |L1.5148|
00148c  eaffffc4          B        |L1.5028|
                  |L1.5264|
001490  e3500001          CMP      r0,#1                 ;1424
001494  151f3c24          LDRNE    r3,|L1.2168|
001498  13a02e59          MOVNE    r2,#0x590             ;1424
00149c  03a04000          MOVEQ    r4,#0                 ;1425
0014a0  0affffbf          BEQ      |L1.5028|
                  |L1.5284|
0014a4  e28f1c01          ADR      r1,|L1.5548|
                  |L1.5288|
0014a8  e51f0c10          LDR      r0,|L1.2208|
0014ac  ebfffffe          BL       sysprintf
0014b0  e3e00005          MVN      r0,#5                 ;1469
0014b4  eaffff91          B        |L1.4864|
                  |L1.5304|
0014b8  e3500001          CMP      r0,#1                 ;1428
0014bc  151f3c4c          LDRNE    r3,|L1.2168|
0014c0  159f20f0          LDRNE    r2,|L1.5560|
0014c4  03a04001          MOVEQ    r4,#1                 ;1429
0014c8  1afffff5          BNE      |L1.5284|
0014cc  eaffffb4          B        |L1.5028|
                  |L1.5328|
0014d0  e3500004          CMP      r0,#4                 ;1432
0014d4  151f3c64          LDRNE    r3,|L1.2168|
0014d8  159f20dc          LDRNE    r2,|L1.5564|
0014dc  03a04002          MOVEQ    r4,#2                 ;1433
0014e0  1affffcd          BNE      |L1.5148|
0014e4  eaffffae          B        |L1.5028|
                  |L1.5352|
0014e8  e3500004          CMP      r0,#4                 ;1436
0014ec  151f3c7c          LDRNE    r3,|L1.2168|
0014f0  159f20c8          LDRNE    r2,|L1.5568|
0014f4  03a04004          MOVEQ    r4,#4                 ;1437
0014f8  1affffc7          BNE      |L1.5148|
0014fc  eaffffa8          B        |L1.5028|
                  |L1.5376|
001500  e3500004          CMP      r0,#4                 ;1440
001504  151f3c94          LDRNE    r3,|L1.2168|
001508  13a02e5a          MOVNE    r2,#0x5a0             ;1440
00150c  03a04005          MOVEQ    r4,#5                 ;1441
001510  1affffc1          BNE      |L1.5148|
001514  eaffffa2          B        |L1.5028|
                  |L1.5400|
                          DCD      0x000004da
                  |L1.5404|
00151c  7265706c          DCB      "reply wasn't freed",0
001520  79207761
001524  736e2774
001528  20667265
00152c  656400  
00152f  00                DCB      0
                  |L1.5424|
                          DCD      0x000004c7
                  |L1.5428|
001534  64686370          DCB      "dhcp_stop: netif != NULL",0
001538  5f73746f
00153c  703a206e
001540  65746966
001544  20213d20
001548  4e554c4c
00154c  00      
00154d  00                DCB      0
00154e  00                DCB      0
00154f  00                DCB      0
                  |L1.5456|
                          DCD      ||.bss||+0x28
                  |L1.5460|
                          DCD      0x000005ad
                  |L1.5464|
001558  63686563          DCB      "check decode_idx",0
00155c  6b206465
001560  636f6465
001564  5f696478
001568  00      
001569  00                DCB      0
00156a  00                DCB      0
00156b  00                DCB      0
                  |L1.5484|
                          DCD      0x0000057b
                  |L1.5488|
001570  6c656e20          DCB      "len == 4",0
001574  3d3d2034
001578  00      
001579  00                DCB      0
00157a  00                DCB      0
00157b  00                DCB      0
                  |L1.5500|
00157c  6c656e20          DCB      "len >= decode_len",0
001580  3e3d2064
001584  65636f64
001588  655f6c65
00158c  6e00    
00158e  00                DCB      0
00158f  00                DCB      0
                  |L1.5520|
                          DCD      0x00000585
                  |L1.5524|
001594  6c656e20          DCB      "len % 4 == 0",0
001598  25203420
00159c  3d3d2030
0015a0  00      
0015a1  00                DCB      0
0015a2  00                DCB      0
0015a3  00                DCB      0
                  |L1.5540|
                          DCD      0x00000588
                  |L1.5544|
                          DCD      0x0000058c
                  |L1.5548|
0015ac  6c656e20          DCB      "len == 1",0
0015b0  3d3d2031
0015b4  00      
0015b5  00                DCB      0
0015b6  00                DCB      0
0015b7  00                DCB      0
                  |L1.5560|
                          DCD      0x00000594
                  |L1.5564|
                          DCD      0x00000598
                  |L1.5568|
                          DCD      0x0000059c
                  |L1.5572|
0015c4  e3550004          CMP      r5,#4                 ;1455
0015c8  31a02005          MOVCC    r2,r5                 ;1455
0015cc  23a02004          MOVCS    r2,#4                 ;1455
0015d0  e1a03009          MOV      r3,r9                 ;1456
0015d4  e1a0100d          MOV      r1,sp                 ;1456
0015d8  e1a00007          MOV      r0,r7                 ;1456
0015dc  ebfffffe          BL       pbuf_copy_partial
0015e0  e3550004          CMP      r5,#4                 ;1457
0015e4  9a000011          BLS      |L1.5680|
0015e8  e3150003          TST      r5,#3                 ;1459
0015ec  151f3d7c          LDRNE    r3,|L1.2168|
0015f0  159f22f8          LDRNE    r2,|L1.6384|
0015f4  128f1fbe          ADRNE    r1,|L1.6388|
0015f8  1affffaa          BNE      |L1.5288|
0015fc  e51f10b4          LDR      r1,|L1.5456|
001600  e3a00001          MOV      r0,#1                 ;1460
001604  e7c10004          STRB     r0,[r1,r4]            ;1460
001608  e59d0000          LDR      r0,[sp,#0]            ;1461
00160c  ebfffffe          BL       lwip_htonl
001610  e59f12f0          LDR      r1,|L1.6408|
001614  e7810104          STR      r0,[r1,r4,LSL #2]     ;1461
001618  e2450004          SUB      r0,r5,#4              ;1462
00161c  e20050ff          AND      r5,r0,#0xff           ;1462
001620  e2890004          ADD      r0,r9,#4              ;1463
001624  e3c09801          BIC      r9,r0,#0x10000        ;1463
001628  e2844001          ADD      r4,r4,#1              ;1463
00162c  eaffff63          B        |L1.5056|
                  |L1.5680|
001630  e3550004          CMP      r5,#4                 ;1466
001634  0a000006          BEQ      |L1.5716|
001638  e3550001          CMP      r5,#1                 ;1469
00163c  05dd0000          LDRBEQ   r0,[sp,#0]            ;1470
001640  151f3dd0          LDRNE    r3,|L1.2168|
001644  159f22c0          LDRNE    r2,|L1.6412|
001648  128f1d0b          ADRNE    r1,|L1.6416|
00164c  0a000002          BEQ      |L1.5724|
001650  eaffff94          B        |L1.5288|
                  |L1.5716|
001654  e59d0000          LDR      r0,[sp,#0]            ;1467
001658  ebfffffe          BL       lwip_ntohl
                  |L1.5724|
00165c  e51f1114          LDR      r1,|L1.5456|
001660  e58d0000          STR      r0,[sp,#0]            ;1467
001664  e3a00001          MOV      r0,#1                 ;1472
001668  e7c10004          STRB     r0,[r1,r4]            ;1472
00166c  e2410028          SUB      r0,r1,#0x28           ;1473
001670  e59d1000          LDR      r1,[sp,#0]            ;1473
001674  e7801104          STR      r1,[r0,r4,LSL #2]     ;1473
                  |L1.5752|
001678  e1d700ba          LDRH     r0,[r7,#0xa]          ;1476
00167c  e1500006          CMP      r0,r6                 ;1476
001680  8a000012          BHI      |L1.5840|
001684  e0461000          SUB      r1,r6,r0              ;1477
001688  e0480000          SUB      r0,r8,r0              ;1478
00168c  e1a06801          LSL      r6,r1,#16             ;1477
001690  e1a08800          LSL      r8,r0,#16             ;1478
001694  e1a06826          LSR      r6,r6,#16             ;1477
001698  e1a08828          LSR      r8,r8,#16             ;1478
00169c  e1560008          CMP      r6,r8                 ;1479
0016a0  2a000010          BCS      |L1.5864|
0016a4  e3580000          CMP      r8,#0                 ;1479
0016a8  0a00000e          BEQ      |L1.5864|
0016ac  e5977000          LDR      r7,[r7,#0]            ;1480
0016b0  e3570000          CMP      r7,#0                 ;1481
0016b4  1a000004          BNE      |L1.5836|
0016b8  e51f3e48          LDR      r3,|L1.2168|
0016bc  e59f2260          LDR      r2,|L1.6436|
0016c0  e51f0e28          LDR      r0,|L1.2208|
0016c4  e28f1f97          ADR      r1,|L1.6440|
0016c8  ebfffffe          BL       sysprintf
                  |L1.5836|
0016cc  e597a004          LDR      r10,[r7,#4]           ;1482
                  |L1.5840|
0016d0  e3570000          CMP      r7,#0                 ;1380
0016d4  0a000003          BEQ      |L1.5864|
                  |L1.5848|
0016d8  e7da1006          LDRB     r1,[r10,r6]           ;1380
0016dc  e35100ff          CMP      r1,#0xff              ;1380
0016e0  11560008          CMPNE    r6,r8                 ;1380
0016e4  3affff07          BCC      |L1.4872|
                  |L1.5864|
0016e8  e51f11a0          LDR      r1,|L1.5456|
0016ec  e5d10000          LDRB     r0,[r1,#0]            ;1490  ; dhcp_rx_options_given
0016f0  e3500000          CMP      r0,#0                 ;1490
0016f4  0a00000b          BEQ      |L1.5928|
0016f8  e2410028          SUB      r0,r1,#0x28           ;1491
0016fc  e5900000          LDR      r0,[r0,#0]            ;1491  ; dhcp_rx_options_val
001700  e3a02000          MOV      r2,#0                 ;1492
001704  e3500001          CMP      r0,#1                 ;1493
001708  e5c12000          STRB     r2,[r1,#0]            ;1492  ; dhcp_rx_options_given
00170c  0a000008          BEQ      |L1.5940|
001710  e3500002          CMP      r0,#2                 ;1496
001714  03a0b001          MOVEQ    r11,#1                ;1497
001718  0a000002          BEQ      |L1.5928|
00171c  e3500003          CMP      r0,#3                 ;1499
001720  03a0b001          MOVEQ    r11,#1                ;1500
001724  0a000002          BEQ      |L1.5940|
                  |L1.5928|
001728  e59d0004          LDR      r0,[sp,#4]            ;1518
00172c  e3500000          CMP      r0,#0                 ;1518
001730  0a000004          BEQ      |L1.5960|
                  |L1.5940|
001734  e3a00000          MOV      r0,#0                 ;1520
001738  e3a0606c          MOV      r6,#0x6c              ;1521
00173c  e3a080ec          MOV      r8,#0xec              ;1522
001740  e58d0004          STR      r0,[sp,#4]            ;1522
001744  eafffedc          B        |L1.4796|
                  |L1.5960|
001748  e35b0000          CMP      r11,#0                ;1524
00174c  13a0b000          MOVNE    r11,#0                ;1525
001750  13a0602c          MOVNE    r6,#0x2c              ;1526
001754  13a0806c          MOVNE    r8,#0x6c              ;1527
001758  03a00000          MOVEQ    r0,#0                 ;1530
00175c  1afffed6          BNE      |L1.4796|
001760  eafffee6          B        |L1.4864|
;;;1532   
                          ENDP

                  dhcp_recv PROC
;;;1536   static void
;;;1537   dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
001764  e92d41f0          PUSH     {r4-r8,lr}
;;;1538   {
;;;1539     struct netif *netif = (struct netif *)arg;
;;;1540     struct dhcp *dhcp = netif->dhcp;
;;;1541     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
001768  e5904020          LDR      r4,[r0,#0x20]
00176c  e1a05000          MOV      r5,r0                 ;1538
;;;1542     u8_t msg_type;
;;;1543     u8_t i;
;;;1544     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
;;;1545       ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
;;;1546     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
;;;1547     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
;;;1548     /* prevent warnings about unused arguments */
;;;1549     LWIP_UNUSED_ARG(pcb);
;;;1550     LWIP_UNUSED_ARG(addr);
;;;1551     LWIP_UNUSED_ARG(port);
;;;1552   
;;;1553     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
001770  e5940008          LDR      r0,[r4,#8]
001774  e5926004          LDR      r6,[r2,#4]
001778  e3500000          CMP      r0,#0
00177c  e1a07002          MOV      r7,r2                 ;1538
001780  0a000004          BEQ      |L1.6040|
001784  e51f3f14          LDR      r3,|L1.2168|
001788  e59f21ac          LDR      r2,|L1.6460|
00178c  e51f0ef4          LDR      r0,|L1.2208|
001790  e24f1f9f          ADR      r1,|L1.5404|
001794  ebfffffe          BL       sysprintf
                  |L1.6040|
;;;1554   
;;;1555     if (p->len < DHCP_MIN_REPLY_LEN) {
001798  e1d700ba          LDRH     r0,[r7,#0xa]
00179c  e3a08000          MOV      r8,#0
0017a0  e350002c          CMP      r0,#0x2c
;;;1556       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
;;;1557       goto free_pbuf_and_return;
;;;1558     }
;;;1559   
;;;1560     if (reply_msg->op != DHCP_BOOTREPLY) {
0017a4  25d60000          LDRBCS   r0,[r6,#0]
0017a8  23500002          CMPCS    r0,#2
;;;1561       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
;;;1562       goto free_pbuf_and_return;
;;;1563     }
;;;1564     /* iterate through hardware address and match against DHCP message */
;;;1565     for (i = 0; i < netif->hwaddr_len; i++) {
0017ac  05d51026          LDRBEQ   r1,[r5,#0x26]
0017b0  03a00000          MOVEQ    r0,#0
0017b4  1a000070          BNE      |L1.6524|
0017b8  ea000007          B        |L1.6108|
                  |L1.6076|
;;;1566       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
0017bc  e0852000          ADD      r2,r5,r0
0017c0  e0863000          ADD      r3,r6,r0
0017c4  e5d22027          LDRB     r2,[r2,#0x27]
0017c8  e5d3301c          LDRB     r3,[r3,#0x1c]
0017cc  e1520003          CMP      r2,r3
0017d0  02800001          ADDEQ    r0,r0,#1
0017d4  020000ff          ANDEQ    r0,r0,#0xff           ;1565
0017d8  1a000067          BNE      |L1.6524|
                  |L1.6108|
0017dc  e1510000          CMP      r1,r0                 ;1565
0017e0  8afffff5          BHI      |L1.6076|
;;;1567         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1568           ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
;;;1569           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1570         goto free_pbuf_and_return;
;;;1571       }
;;;1572     }
;;;1573     /* match transaction ID against what we expected */
;;;1574     if (ntohl(reply_msg->xid) != dhcp->xid) {
0017e4  e2860004          ADD      r0,r6,#4
0017e8  ebfffffe          BL       __aeabi_uread4
0017ec  ebfffffe          BL       lwip_ntohl
0017f0  e5941000          LDR      r1,[r4,#0]
0017f4  e1500001          CMP      r0,r1
0017f8  1a00005f          BNE      |L1.6524|
;;;1575       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1576         ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
;;;1577       goto free_pbuf_and_return;
;;;1578     }
;;;1579     /* option fields could be unfold? */
;;;1580     if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
0017fc  e1a01007          MOV      r1,r7
001800  e1a00004          MOV      r0,r4
001804  ebfffffe          BL       dhcp_parse_reply
001808  e3500000          CMP      r0,#0
00180c  1a00005a          BNE      |L1.6524|
;;;1581       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1582         ("problem unfolding DHCP message - too short on memory?\n"));
;;;1583       goto free_pbuf_and_return;
;;;1584     }
;;;1585   
;;;1586     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
;;;1587     /* obtain pointer to DHCP message type */
;;;1588     if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
001810  e51f12c8          LDR      r1,|L1.5456|
001814  e5d10001          LDRB     r0,[r1,#1]  ; dhcp_rx_options_given
001818  e3500000          CMP      r0,#0
00181c  0a000056          BEQ      |L1.6524|
;;;1589       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
;;;1590       goto free_pbuf_and_return;
;;;1591     }
;;;1592   
;;;1593     /* read DHCP message type */
;;;1594     msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
001820  e2412028          SUB      r2,r1,#0x28
001824  e5d20004          LDRB     r0,[r2,#4]  ; dhcp_rx_options_val
;;;1595     /* message type is DHCP ACK? */
;;;1596     if (msg_type == DHCP_ACK) {
001828  e3500005          CMP      r0,#5
00182c  0a000006          BEQ      |L1.6220|
;;;1597       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
;;;1598       /* in requesting state? */
;;;1599       if (dhcp->state == DHCP_REQUESTING) {
;;;1600         dhcp_handle_ack(netif);
;;;1601   #if DHCP_DOES_ARP_CHECK
;;;1602         /* check if the acknowledged lease address is already in use */
;;;1603         dhcp_check(netif);
;;;1604   #else
;;;1605         /* bind interface to the acknowledged lease address */
;;;1606         dhcp_bind(netif);
;;;1607   #endif
;;;1608       }
;;;1609       /* already bound to the given lease address? */
;;;1610       else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
;;;1611         dhcp_bind(netif);
;;;1612       }
;;;1613     }
;;;1614     /* received a DHCP_NAK in appropriate state? */
;;;1615     else if ((msg_type == DHCP_NAK) &&
001830  e3500006          CMP      r0,#6
001834  0a000014          BEQ      |L1.6284|
;;;1616       ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
;;;1617        (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
;;;1618       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
;;;1619       dhcp_handle_nak(netif);
;;;1620     }
;;;1621     /* received a DHCP_OFFER in DHCP_SELECTING state? */
;;;1622     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
001838  e3500002          CMP      r0,#2
00183c  05d4000c          LDRBEQ   r0,[r4,#0xc]
001840  03500006          CMPEQ    r0,#6
001844  0a00003d          BEQ      |L1.6464|
001848  ea00004b          B        |L1.6524|
                  |L1.6220|
00184c  e5d4000c          LDRB     r0,[r4,#0xc]          ;1599
001850  e3500001          CMP      r0,#1                 ;1599
001854  0a000004          BEQ      |L1.6252|
001858  e3500003          CMP      r0,#3                 ;1610
00185c  13500004          CMPNE    r0,#4                 ;1610
001860  13500005          CMPNE    r0,#5                 ;1610
001864  0a000005          BEQ      |L1.6272|
001868  ea000043          B        |L1.6524|
                  |L1.6252|
00186c  e1a00005          MOV      r0,r5                 ;1600
001870  ebfffffe          BL       dhcp_handle_ack
001874  e1a00005          MOV      r0,r5                 ;1603
001878  ebfffffe          BL       dhcp_check
00187c  ea00003e          B        |L1.6524|
                  |L1.6272|
001880  e1a00005          MOV      r0,r5                 ;1611
001884  ebfffffe          BL       dhcp_bind
001888  ea00003b          B        |L1.6524|
                  |L1.6284|
00188c  e5d4000c          LDRB     r0,[r4,#0xc]          ;1616
001890  e3500003          CMP      r0,#3                 ;1616
001894  13500001          CMPNE    r0,#1                 ;1616
001898  0a000002          BEQ      |L1.6312|
00189c  e3500004          CMP      r0,#4                 ;1617
0018a0  13500005          CMPNE    r0,#5                 ;1617
0018a4  1a000034          BNE      |L1.6524|
                  |L1.6312|
0018a8  e5956020          LDR      r6,[r5,#0x20]         ;1617
0018ac  e1a00005          MOV      r0,r5                 ;1617
0018b0  ebfffffe          BL       netif_set_down
0018b4  e51f1798          LDR      r1,|L1.4388|
0018b8  e1a00005          MOV      r0,r5                 ;1617
0018bc  ebfffffe          BL       netif_set_ipaddr
0018c0  e51f17a4          LDR      r1,|L1.4388|
0018c4  e1a00005          MOV      r0,r5                 ;1617
0018c8  ebfffffe          BL       netif_set_gw
0018cc  e51f17b0          LDR      r1,|L1.4388|
0018d0  e1a00005          MOV      r0,r5                 ;1617
0018d4  ebfffffe          BL       netif_set_netmask
0018d8  e3a0100c          MOV      r1,#0xc               ;1617
0018dc  e1a00006          MOV      r0,r6                 ;1617
0018e0  ebfffffe          BL       dhcp_set_state
0018e4  e1a00005          MOV      r0,r5                 ;1617
0018e8  ebfffffe          BL       dhcp_discover
0018ec  ea000022          B        |L1.6524|
                  |L1.6384|
                          DCD      0x000005b3
                  |L1.6388|
0018f4  6465636f          DCB      "decode_len % 4 == 0",0
0018f8  64655f6c
0018fc  656e2025
001900  2034203d
001904  3d203000
                  |L1.6408|
                          DCD      ||.bss||
                  |L1.6412|
                          DCD      0x000005bd
                  |L1.6416|
001910  696e7661          DCB      "invalid decode_len",0
001914  6c696420
001918  6465636f
00191c  64655f6c
001920  656e00  
001923  00                DCB      0
                  |L1.6436|
                          DCD      0x000005c9
                  |L1.6440|
001928  6e657874          DCB      "next pbuf was null",0
00192c  20706275
001930  66207761
001934  73206e75
001938  6c6c00  
00193b  00                DCB      0
                  |L1.6460|
                          DCD      0x00000611
                  |L1.6464|
;;;1623       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
;;;1624       dhcp->request_timeout = 0;
001940  e1c481ba          STRH     r8,[r4,#0x1a]
001944  e5d10002          LDRB     r0,[r1,#2]  ; dhcp_rx_options_given
;;;1625       /* remember offered lease */
;;;1626       dhcp_handle_offer(netif);
001948  e1a06005          MOV      r6,r5
00194c  e5955020          LDR      r5,[r5,#0x20]
001950  e3500000          CMP      r0,#0
001954  0a000008          BEQ      |L1.6524|
001958  e5920008          LDR      r0,[r2,#8]  ; dhcp_rx_options_val
00195c  ebfffffe          BL       lwip_htonl
001960  e5850020          STR      r0,[r5,#0x20]
001964  e5950008          LDR      r0,[r5,#8]
001968  e2800010          ADD      r0,r0,#0x10
00196c  ebfffffe          BL       __aeabi_uread4
001970  e5850024          STR      r0,[r5,#0x24]
001974  e1a00006          MOV      r0,r6
001978  ebfffffe          BL       dhcp_select
                  |L1.6524|
;;;1627     }
;;;1628   free_pbuf_and_return:
;;;1629     dhcp->msg_in = NULL;
;;;1630     pbuf_free(p);
00197c  e1a00007          MOV      r0,r7
001980  e5848008          STR      r8,[r4,#8]
001984  e8bd41f0          POP      {r4-r8,lr}
001988  eafffffe          B        pbuf_free
;;;1631   }
;;;1632   
                          ENDP

                  dhcp_start PROC
;;;628    err_t
;;;629    dhcp_start(struct netif *netif)
00198c  e92d4070          PUSH     {r4-r6,lr}
;;;630    {
001990  e1b05000          MOVS     r5,r0
001994  0a00003d          BEQ      |L1.6800|
;;;631      struct dhcp *dhcp;
;;;632      err_t result = ERR_OK;
;;;633    
;;;634      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
;;;635      dhcp = netif->dhcp;
;;;636      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;637      /* Remove the flag that says this netif is handled by DHCP,
;;;638         it is set when we succeeded starting. */
;;;639      netif->flags &= ~NETIF_FLAG_DHCP;
001998  e5d5002d          LDRB     r0,[r5,#0x2d]
00199c  e5954020          LDR      r4,[r5,#0x20]         ;635
0019a0  e3c00008          BIC      r0,r0,#8
;;;640    
;;;641      /* check hwtype of the netif */
;;;642      if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
0019a4  e3100020          TST      r0,#0x20
0019a8  e5c5002d          STRB     r0,[r5,#0x2d]         ;639
0019ac  0a00003c          BEQ      |L1.6820|
;;;643        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
;;;644        return ERR_ARG;
;;;645      }
;;;646    
;;;647      /* check MTU of the netif */
;;;648      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
0019b0  e1d502b4          LDRH     r0,[r5,#0x24]
0019b4  e3500d09          CMP      r0,#0x240
0019b8  3a000040          BCC      |L1.6848|
;;;649        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;650        return ERR_MEM;
;;;651      }
;;;652    
;;;653      /* no DHCP client attached yet? */
;;;654      if (dhcp == NULL) {
0019bc  e3540000          CMP      r4,#0
0019c0  0a000039          BEQ      |L1.6828|
;;;655        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
;;;656        dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
;;;657        if (dhcp == NULL) {
;;;658          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;659          return ERR_MEM;
;;;660        }
;;;661        /* store this dhcp client in the netif */
;;;662        netif->dhcp = dhcp;
;;;663        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;664      /* already has DHCP client attached */
;;;665      } else {
;;;666        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
;;;667        if (dhcp->pcb != NULL) {
0019c4  e5940004          LDR      r0,[r4,#4]
0019c8  e3500000          CMP      r0,#0
;;;668          udp_remove(dhcp->pcb);
0019cc  1bfffffe          BLNE     udp_remove
;;;669        }
;;;670        LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
0019d0  e5940010          LDR      r0,[r4,#0x10]
0019d4  e3500000          CMP      r0,#0
0019d8  0a000004          BEQ      |L1.6640|
0019dc  e59f31ec          LDR      r3,|L1.7120|
0019e0  e59f21ec          LDR      r2,|L1.7124|
0019e4  e59f0204          LDR      r0,|L1.7152|
0019e8  e28f1f7a          ADR      r1,|L1.7128|
0019ec  ebfffffe          BL       sysprintf
                  |L1.6640|
;;;671        LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
0019f0  e5940008          LDR      r0,[r4,#8]
0019f4  e3500000          CMP      r0,#0
0019f8  0a000004          BEQ      |L1.6672|
0019fc  e59f31cc          LDR      r3,|L1.7120|
001a00  e59f21ec          LDR      r2,|L1.7156|
001a04  e59f11ec          LDR      r1,|L1.7160|
001a08  e59f01e0          LDR      r0,|L1.7152|
001a0c  ebfffffe          BL       sysprintf
                  |L1.6672|
;;;672      }
;;;673        
;;;674      /* clear data structure */
;;;675      memset(dhcp, 0, sizeof(struct dhcp));
001a10  e3a0103c          MOV      r1,#0x3c
001a14  e1a00004          MOV      r0,r4
001a18  ebfffffe          BL       __aeabi_memclr4
;;;676      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;677      /* allocate UDP PCB */
;;;678      dhcp->pcb = udp_new();
001a1c  ebfffffe          BL       udp_new
;;;679      if (dhcp->pcb == NULL) {
001a20  e3500000          CMP      r0,#0
001a24  e5840004          STR      r0,[r4,#4]            ;678
001a28  0a000024          BEQ      |L1.6848|
;;;680        LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
;;;681        return ERR_MEM;
;;;682      }
;;;683      ip_set_option(dhcp->pcb, SOF_BROADCAST);
001a2c  e5d01008          LDRB     r1,[r0,#8]
;;;684      /* set up local and remote port for the pcb */
;;;685      udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
001a30  e3a02044          MOV      r2,#0x44
001a34  e3811020          ORR      r1,r1,#0x20           ;683
001a38  e5c01008          STRB     r1,[r0,#8]            ;683
001a3c  e51f1920          LDR      r1,|L1.4388|
001a40  e5940004          LDR      r0,[r4,#4]
001a44  ebfffffe          BL       udp_bind
;;;686      udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
001a48  e51f192c          LDR      r1,|L1.4388|
001a4c  e5940004          LDR      r0,[r4,#4]
001a50  e3a02043          MOV      r2,#0x43
001a54  ebfffffe          BL       udp_connect
;;;687      /* set up the recv callback and argument */
;;;688      udp_recv(dhcp->pcb, dhcp_recv, netif);
001a58  e59f119c          LDR      r1,|L1.7164|
001a5c  e5940004          LDR      r0,[r4,#4]
001a60  e1a02005          MOV      r2,r5
001a64  ebfffffe          BL       udp_recv
;;;689      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;690      /* (re)start the DHCP negotiation */
;;;691      result = dhcp_discover(netif);
001a68  e1a00005          MOV      r0,r5
001a6c  ebfffffe          BL       dhcp_discover
;;;692      if (result != ERR_OK) {
001a70  e3500000          CMP      r0,#0
;;;693        /* free resources allocated above */
;;;694        dhcp_stop(netif);
;;;695        return ERR_MEM;
;;;696      }
;;;697      /* Set the flag that says this netif is handled by DHCP. */
;;;698      netif->flags |= NETIF_FLAG_DHCP;
001a74  05d5102d          LDRBEQ   r1,[r5,#0x2d]
001a78  03811008          ORREQ    r1,r1,#8
001a7c  05c5102d          STRBEQ   r1,[r5,#0x2d]
;;;699      return result;
;;;700    }
001a80  08bd8070          POPEQ    {r4-r6,pc}
001a84  e1a00005          MOV      r0,r5                 ;694
001a88  ebfffffe          BL       dhcp_stop
001a8c  ea00000b          B        |L1.6848|
                  |L1.6800|
001a90  e59f3138          LDR      r3,|L1.7120|
001a94  e59f2164          LDR      r2,|L1.7168|
001a98  e59f1164          LDR      r1,|L1.7172|
001a9c  e59f014c          LDR      r0,|L1.7152|
001aa0  ebfffffe          BL       sysprintf
                  |L1.6820|
001aa4  e3e0000d          MVN      r0,#0xd               ;644
001aa8  e8bd8070          POP      {r4-r6,pc}
                  |L1.6828|
001aac  e3a0003c          MOV      r0,#0x3c              ;656
001ab0  ebfffffe          BL       mem_malloc
001ab4  e1b04000          MOVS     r4,r0                 ;656
001ab8  15854020          STRNE    r4,[r5,#0x20]         ;662
001abc  1affffd3          BNE      |L1.6672|
                  |L1.6848|
001ac0  e3e00000          MVN      r0,#0                 ;681
001ac4  e8bd8070          POP      {r4-r6,pc}
;;;701    
                          ENDP

                  dhcp_inform PROC
;;;711    void
;;;712    dhcp_inform(struct netif *netif)
001ac8  e92d4030          PUSH     {r4,r5,lr}
;;;713    {
001acc  e1b05000          MOVS     r5,r0
001ad0  e24dd044          SUB      sp,sp,#0x44
001ad4  0a00000b          BEQ      |L1.6920|
;;;714      struct dhcp dhcp;
;;;715      err_t result = ERR_OK;
;;;716      struct udp_pcb *pcb;
;;;717    
;;;718      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
;;;719    
;;;720      memset(&dhcp, 0, sizeof(struct dhcp));
001ad8  e3a0103c          MOV      r1,#0x3c
001adc  e28d0004          ADD      r0,sp,#4
001ae0  ebfffffe          BL       __aeabi_memclr4
;;;721      dhcp_set_state(&dhcp, DHCP_INFORM);
001ae4  e3a01008          MOV      r1,#8
001ae8  e28d0004          ADD      r0,sp,#4
001aec  ebfffffe          BL       dhcp_set_state
;;;722    
;;;723      if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
001af0  e5950020          LDR      r0,[r5,#0x20]
001af4  e3500000          CMP      r0,#0
001af8  15904004          LDRNE    r4,[r0,#4]
001afc  13540000          CMPNE    r4,#0
001b00  0a000007          BEQ      |L1.6948|
001b04  ea000011          B        |L1.6992|
                  |L1.6920|
001b08  e59f30c0          LDR      r3,|L1.7120|
001b0c  e59f20f4          LDR      r2,|L1.7176|
001b10  e59f10ec          LDR      r1,|L1.7172|
001b14  e59f00d4          LDR      r0,|L1.7152|
001b18  ebfffffe          BL       sysprintf
                  |L1.6940|
;;;724        /* re-use existing pcb */
;;;725        pcb = netif->dhcp->pcb;
;;;726      } else {
;;;727        pcb = udp_new();
;;;728        if (pcb == NULL) {
;;;729          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
;;;730          return;
;;;731        }
;;;732        dhcp.pcb = pcb;
;;;733        ip_set_option(dhcp.pcb, SOF_BROADCAST);
;;;734        udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;735        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
;;;736      }
;;;737      /* create and initialize the DHCP message header */
;;;738      result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
;;;739      if (result == ERR_OK) {
;;;740        dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;741        dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
;;;742    
;;;743        dhcp_option_trailer(&dhcp);
;;;744    
;;;745        pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
;;;746    
;;;747        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;748        udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;749        dhcp_delete_msg(&dhcp);
;;;750      } else {
;;;751        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
;;;752      }
;;;753    
;;;754      if (dhcp.pcb != NULL) {
;;;755        /* otherwise, the existing pcb was used */
;;;756        udp_remove(dhcp.pcb);
;;;757      }
;;;758    }
001b1c  e28dd044          ADD      sp,sp,#0x44
001b20  e8bd8030          POP      {r4,r5,pc}
                  |L1.6948|
001b24  ebfffffe          BL       udp_new
001b28  e1b04000          MOVS     r4,r0                 ;727
001b2c  0afffffa          BEQ      |L1.6940|
001b30  e58d4008          STR      r4,[sp,#8]            ;732
001b34  e5d40008          LDRB     r0,[r4,#8]            ;733
001b38  e51f1a1c          LDR      r1,|L1.4388|
001b3c  e3a02044          MOV      r2,#0x44              ;734
001b40  e3800020          ORR      r0,r0,#0x20           ;733
001b44  e5c40008          STRB     r0,[r4,#8]            ;733
001b48  e59d0008          LDR      r0,[sp,#8]            ;734
001b4c  ebfffffe          BL       udp_bind
                  |L1.6992|
001b50  e3a02008          MOV      r2,#8                 ;738
001b54  e28d1004          ADD      r1,sp,#4              ;738
001b58  e1a00005          MOV      r0,r5                 ;738
001b5c  ebfffffe          BL       dhcp_create_msg
001b60  e3500000          CMP      r0,#0                 ;739
001b64  1a000015          BNE      |L1.7104|
001b68  e3a02002          MOV      r2,#2                 ;740
001b6c  e3a01039          MOV      r1,#0x39              ;740
001b70  e28d0004          ADD      r0,sp,#4              ;740
001b74  ebfffffe          BL       dhcp_option
001b78  e1d512b4          LDRH     r1,[r5,#0x24]         ;741
001b7c  e28d0004          ADD      r0,sp,#4              ;741
001b80  ebfffffe          BL       dhcp_option_short
001b84  e28d0004          ADD      r0,sp,#4              ;743
001b88  ebfffffe          BL       dhcp_option_trailer
001b8c  e1dd01bc          LDRH     r0,[sp,#0x1c]         ;745
001b90  e28000f0          ADD      r0,r0,#0xf0           ;745
001b94  e3c01801          BIC      r1,r0,#0x10000        ;745
001b98  e59d0014          LDR      r0,[sp,#0x14]         ;745
001b9c  ebfffffe          BL       pbuf_realloc
001ba0  e58d5000          STR      r5,[sp,#0]            ;748
001ba4  e59f2060          LDR      r2,|L1.7180|
001ba8  e59d1014          LDR      r1,[sp,#0x14]         ;748
001bac  e3a03043          MOV      r3,#0x43              ;748
001bb0  e1a00004          MOV      r0,r4                 ;748
001bb4  ebfffffe          BL       udp_sendto_if
001bb8  e28d0004          ADD      r0,sp,#4              ;749
001bbc  ebfffffe          BL       dhcp_delete_msg
                  |L1.7104|
001bc0  e59d0008          LDR      r0,[sp,#8]            ;754
001bc4  e3500000          CMP      r0,#0                 ;754
001bc8  1bfffffe          BLNE     udp_remove
001bcc  eaffffd2          B        |L1.6940|
                  |L1.7120|
                          DCD      ||.text||+0x110
                  |L1.7124|
                          DCD      0x0000029e
                  |L1.7128|
001bd8  70627566          DCB      "pbuf p_out wasn't freed",0
001bdc  20705f6f
001be0  75742077
001be4  61736e27
001be8  74206672
001bec  65656400
                  |L1.7152|
                          DCD      ||.text||+0x150
                  |L1.7156|
                          DCD      0x0000029f
                  |L1.7160|
                          DCD      ||.text||+0x151c
                  |L1.7164|
                          DCD      dhcp_recv
                  |L1.7168|
                          DCD      0x0000027a
                  |L1.7172|
                          DCD      ||.text||+0x1164
                  |L1.7176|
                          DCD      0x000002ce
                  |L1.7180|
                          DCD      ip_addr_broadcast
                          ENDP

                  dhcp_network_changed PROC
;;;765    void
;;;766    dhcp_network_changed(struct netif *netif)
001c10  e92d4070          PUSH     {r4-r6,lr}
;;;767    {
;;;768      struct dhcp *dhcp = netif->dhcp;
001c14  e5904020          LDR      r4,[r0,#0x20]
001c18  e1a05000          MOV      r5,r0                 ;767
;;;769      if (!dhcp)
001c1c  e3540000          CMP      r4,#0
;;;770        return;
;;;771      switch (dhcp->state) {
;;;772      case DHCP_REBINDING:
;;;773      case DHCP_RENEWING:
;;;774      case DHCP_BOUND:
;;;775      case DHCP_REBOOTING:
;;;776        netif_set_down(netif);
;;;777        dhcp->tries = 0;
;;;778        dhcp_reboot(netif);
;;;779        break;
;;;780      case DHCP_OFF:
;;;781        /* stay off */
;;;782        break;
;;;783      default:
;;;784        dhcp->tries = 0;
;;;785    #if LWIP_DHCP_AUTOIP_COOP
;;;786        if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;787          autoip_stop(netif);
;;;788          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;789        }
;;;790    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;791        dhcp_discover(netif);
;;;792        break;
;;;793      }
;;;794    }
001c20  08bd8070          POPEQ    {r4-r6,pc}
001c24  e5d4100c          LDRB     r1,[r4,#0xc]          ;771
001c28  e3a06000          MOV      r6,#0                 ;771
001c2c  e3510004          CMP      r1,#4                 ;771
001c30  0a00000a          BEQ      |L1.7264|
001c34  ca000006          BGT      |L1.7252|
001c38  e3510000          CMP      r1,#0                 ;771
001c3c  08bd8070          POPEQ    {r4-r6,pc}
001c40  e3510003          CMP      r1,#3                 ;771
001c44  0a000005          BEQ      |L1.7264|
                  |L1.7240|
001c48  e5c4600d          STRB     r6,[r4,#0xd]          ;784
001c4c  e8bd4070          POP      {r4-r6,lr}            ;791
001c50  eafffffe          B        dhcp_discover
                  |L1.7252|
001c54  e3510005          CMP      r1,#5                 ;771
001c58  1351000a          CMPNE    r1,#0xa               ;771
001c5c  1afffff9          BNE      |L1.7240|
                  |L1.7264|
001c60  ebfffffe          BL       netif_set_down
001c64  e1a00005          MOV      r0,r5                 ;778
001c68  e5c4600d          STRB     r6,[r4,#0xd]          ;777
001c6c  e8bd4070          POP      {r4-r6,lr}            ;778
001c70  eafffffe          B        dhcp_reboot
;;;795    
                          ENDP

                  dhcp_arp_reply PROC
;;;802     */
;;;803    void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
001c74  e3500000          CMP      r0,#0
;;;804    {
001c78  0a000009          BEQ      |L1.7332|
;;;805      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
;;;806      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
;;;807      /* is a DHCP client doing an ARP check? */
;;;808      if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
001c7c  e5902020          LDR      r2,[r0,#0x20]
001c80  e3520000          CMP      r2,#0
;;;809        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
;;;810          ip4_addr_get_u32(addr)));
;;;811        /* did a host respond with the address we
;;;812           were offered by the DHCP server? */
;;;813        if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
;;;814          /* we will not accept the offered address */
;;;815          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
;;;816            ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;817          dhcp_decline(netif);
;;;818        }
;;;819      }
;;;820    }
001c84  012fff1e          BXEQ     lr
001c88  e5d2300c          LDRB     r3,[r2,#0xc]          ;808
001c8c  e3530008          CMP      r3,#8                 ;808
001c90  05911000          LDREQ    r1,[r1,#0]            ;813
001c94  05922024          LDREQ    r2,[r2,#0x24]         ;813
001c98  01510002          CMPEQ    r1,r2                 ;813
001c9c  112fff1e          BXNE     lr
001ca0  eafffffe          B        dhcp_decline
                  |L1.7332|
001ca4  e51f30dc          LDR      r3,|L1.7120|
001ca8  e59f2288          LDR      r2,|L1.7992|
001cac  e51f10b0          LDR      r1,|L1.7172|
001cb0  e51f00c8          LDR      r0,|L1.7152|
001cb4  eafffffe          B        sysprintf
;;;821    
                          ENDP

                  dhcp_set_state PROC
;;;1252   static void
;;;1253   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
001cb8  e5d0200c          LDRB     r2,[r0,#0xc]
;;;1254   {
;;;1255     if (new_state != dhcp->state) {
001cbc  e1520001          CMP      r2,r1
;;;1256       dhcp->state = new_state;
;;;1257       dhcp->tries = 0;
;;;1258       dhcp->request_timeout = 0;
;;;1259     }
;;;1260   }
001cc0  012fff1e          BXEQ     lr
001cc4  e5c0100c          STRB     r1,[r0,#0xc]          ;1256
001cc8  e3a01000          MOV      r1,#0                 ;1257
001ccc  e5c0100d          STRB     r1,[r0,#0xd]          ;1257
001cd0  e1c011ba          STRH     r1,[r0,#0x1a]         ;1258
001cd4  e12fff1e          BX       lr
;;;1261   
                          ENDP

                  dhcp_check PROC
;;;224    static void
;;;225    dhcp_check(struct netif *netif)
001cd8  e92d4070          PUSH     {r4-r6,lr}
;;;226    {
;;;227      struct dhcp *dhcp = netif->dhcp;
;;;228      err_t result;
;;;229      u16_t msecs;
;;;230      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
;;;231        (s16_t)netif->name[1]));
;;;232      dhcp_set_state(dhcp, DHCP_CHECKING);
001cdc  e5904020          LDR      r4,[r0,#0x20]
001ce0  e1a05000          MOV      r5,r0                 ;226
001ce4  e3a01008          MOV      r1,#8
001ce8  e1a00004          MOV      r0,r4
001cec  ebfffffe          BL       dhcp_set_state
;;;233      /* create an ARP query for the offered IP address, expecting that no host
;;;234         responds, as the IP address should not be in use. */
;;;235      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
001cf0  e3a02000          MOV      r2,#0
001cf4  e2841024          ADD      r1,r4,#0x24
001cf8  e1a00005          MOV      r0,r5
001cfc  ebfffffe          BL       etharp_query
;;;236      if (result != ERR_OK) {
;;;237        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
;;;238      }
;;;239      dhcp->tries++;
001d00  e5d4000d          LDRB     r0,[r4,#0xd]
001d04  e2800001          ADD      r0,r0,#1
001d08  e5c4000d          STRB     r0,[r4,#0xd]
;;;240      msecs = 500;
;;;241      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
001d0c  e3a00001          MOV      r0,#1
001d10  e1c401ba          STRH     r0,[r4,#0x1a]
;;;242      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
;;;243    }
001d14  e8bd8070          POP      {r4-r6,pc}
;;;244    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

                  dhcp_timeout PROC
;;;401    static void
;;;402    dhcp_timeout(struct netif *netif)
001d18  e92d4010          PUSH     {r4,lr}
;;;403    {
;;;404      struct dhcp *dhcp = netif->dhcp;
001d1c  e5902020          LDR      r2,[r0,#0x20]
001d20  e1a04000          MOV      r4,r0                 ;403
;;;405      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
;;;406      /* back-off period has passed, or server selection timed out */
;;;407      if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
001d24  e5d2100c          LDRB     r1,[r2,#0xc]
001d28  e351000c          CMP      r1,#0xc
001d2c  13510006          CMPNE    r1,#6
001d30  0a00000f          BEQ      |L1.7540|
;;;408        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
;;;409        dhcp_discover(netif);
;;;410      /* receiving the requested lease timed out */
;;;411      } else if (dhcp->state == DHCP_REQUESTING) {
001d34  e3510001          CMP      r1,#1
001d38  0a00000f          BEQ      |L1.7548|
;;;412        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
;;;413        if (dhcp->tries <= 5) {
;;;414          dhcp_select(netif);
;;;415        } else {
;;;416          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
;;;417          dhcp_release(netif);
;;;418          dhcp_discover(netif);
;;;419        }
;;;420    #if DHCP_DOES_ARP_CHECK
;;;421      /* received no ARP reply for the offered address (which is good) */
;;;422      } else if (dhcp->state == DHCP_CHECKING) {
001d3c  e3510008          CMP      r1,#8
001d40  0a000017          BEQ      |L1.7588|
;;;423        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
;;;424        if (dhcp->tries <= 1) {
;;;425          dhcp_check(netif);
;;;426        /* no ARP replies on the offered address,
;;;427           looks like the IP address is indeed free */
;;;428        } else {
;;;429          /* bind the interface to the offered address */
;;;430          dhcp_bind(netif);
;;;431        }
;;;432    #endif /* DHCP_DOES_ARP_CHECK */
;;;433      }
;;;434      /* did not get response to renew request? */
;;;435      else if (dhcp->state == DHCP_RENEWING) {
001d44  e3510005          CMP      r1,#5
001d48  0a00001d          BEQ      |L1.7620|
;;;436        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
;;;437        /* just retry renewal */
;;;438        /* note that the rebind timer will eventually time-out if renew does not work */
;;;439        dhcp_renew(netif);
;;;440      /* did not get response to rebind request? */
;;;441      } else if (dhcp->state == DHCP_REBINDING) {
001d4c  e3510004          CMP      r1,#4
001d50  0a00001d          BEQ      |L1.7628|
;;;442        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
;;;443        if (dhcp->tries <= 8) {
;;;444          dhcp_rebind(netif);
;;;445        } else {
;;;446          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
;;;447          dhcp_release(netif);
;;;448          dhcp_discover(netif);
;;;449        }
;;;450      } else if (dhcp->state == DHCP_REBOOTING) {
001d54  e3510003          CMP      r1,#3
;;;451        if (dhcp->tries < REBOOT_TRIES) {
;;;452          dhcp_reboot(netif);
;;;453        } else {
;;;454          dhcp_discover(netif);
;;;455        }
;;;456      }
;;;457    }
001d58  18bd8010          POPNE    {r4,pc}
001d5c  e5d2000d          LDRB     r0,[r2,#0xd]          ;451
001d60  e3500002          CMP      r0,#2                 ;451
001d64  2a00000c          BCS      |L1.7580|
001d68  e1a00004          MOV      r0,r4                 ;452
001d6c  e8bd4010          POP      {r4,lr}               ;452
001d70  eafffffe          B        dhcp_reboot
                  |L1.7540|
001d74  e8bd4010          POP      {r4,lr}               ;409
001d78  eafffffe          B        dhcp_discover
                  |L1.7548|
001d7c  e5d2000d          LDRB     r0,[r2,#0xd]          ;413
001d80  e3500005          CMP      r0,#5                 ;413
001d84  8a000002          BHI      |L1.7572|
001d88  e1a00004          MOV      r0,r4                 ;414
001d8c  e8bd4010          POP      {r4,lr}               ;414
001d90  eafffffe          B        dhcp_select
                  |L1.7572|
001d94  e1a00004          MOV      r0,r4                 ;417
001d98  ebfffffe          BL       dhcp_release
                  |L1.7580|
001d9c  e1a00004          MOV      r0,r4                 ;454
001da0  eafffff3          B        |L1.7540|
                  |L1.7588|
001da4  e5d2000d          LDRB     r0,[r2,#0xd]          ;424
001da8  e3500001          CMP      r0,#1                 ;424
001dac  e1a00004          MOV      r0,r4                 ;430
001db0  8a000001          BHI      |L1.7612|
001db4  e8bd4010          POP      {r4,lr}               ;425
001db8  eafffffe          B        dhcp_check
                  |L1.7612|
001dbc  e8bd4010          POP      {r4,lr}               ;430
001dc0  eafffffe          B        dhcp_bind
                  |L1.7620|
001dc4  e8bd4010          POP      {r4,lr}               ;439
001dc8  eafffffe          B        dhcp_renew
                  |L1.7628|
001dcc  e5d2000d          LDRB     r0,[r2,#0xd]          ;443
001dd0  e3500008          CMP      r0,#8                 ;443
001dd4  8affffee          BHI      |L1.7572|
001dd8  e1a00004          MOV      r0,r4                 ;444
001ddc  e8bd4010          POP      {r4,lr}               ;444
001de0  eafffffe          B        dhcp_rebind
;;;458    
                          ENDP

                  dhcp_handle_ack PROC
;;;507    static void
;;;508    dhcp_handle_ack(struct netif *netif)
001de4  e92d41f0          PUSH     {r4-r8,lr}
;;;509    {
;;;510      struct dhcp *dhcp = netif->dhcp;
;;;511    #if LWIP_DNS
;;;512      u8_t n;
;;;513    #endif /* LWIP_DNS */
;;;514    
;;;515      /* clear options we might not get from the ACK */
;;;516      ip_addr_set_zero(&dhcp->offered_sn_mask);
001de8  e5904020          LDR      r4,[r0,#0x20]
001dec  e3a07000          MOV      r7,#0
;;;517      ip_addr_set_zero(&dhcp->offered_gw_addr);
;;;518    #if LWIP_DHCP_BOOTP_FILE
;;;519      ip_addr_set_zero(&dhcp->offered_si_addr);
;;;520    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;521    
;;;522      /* lease time given? */
;;;523      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
001df0  e51f68a8          LDR      r6,|L1.5456|
001df4  e5847028          STR      r7,[r4,#0x28]         ;517
001df8  e584702c          STR      r7,[r4,#0x2c]
001dfc  e5d60003          LDRB     r0,[r6,#3]  ; dhcp_rx_options_given
;;;524        /* remember offered lease time */
;;;525        dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
001e00  e2465028          SUB      r5,r6,#0x28
001e04  e3500000          CMP      r0,#0                 ;523
001e08  1595000c          LDRNE    r0,[r5,#0xc]  ; dhcp_rx_options_val
001e0c  15840030          STRNE    r0,[r4,#0x30]
;;;526      }
;;;527      /* renewal period given? */
;;;528      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
001e10  e5d60004          LDRB     r0,[r6,#4]  ; dhcp_rx_options_given
001e14  e3500000          CMP      r0,#0
;;;529        /* remember given renewal period */
;;;530        dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
;;;531      } else {
;;;532        /* calculate safe periods for renewal */
;;;533        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
001e18  05940030          LDREQ    r0,[r4,#0x30]
001e1c  15950010          LDRNE    r0,[r5,#0x10]         ;530  ; dhcp_rx_options_val
001e20  01a000a0          LSREQ    r0,r0,#1
001e24  e5840034          STR      r0,[r4,#0x34]
;;;534      }
;;;535    
;;;536      /* renewal period given? */
;;;537      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
001e28  e5d60005          LDRB     r0,[r6,#5]  ; dhcp_rx_options_given
001e2c  e3500000          CMP      r0,#0
;;;538        /* remember given rebind period */
;;;539        dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
001e30  15950014          LDRNE    r0,[r5,#0x14]  ; dhcp_rx_options_val
;;;540      } else {
;;;541        /* calculate safe periods for rebinding */
;;;542        dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
001e34  05940030          LDREQ    r0,[r4,#0x30]
;;;543      }
;;;544    
;;;545      /* (y)our internet address */
;;;546      ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
001e38  e5840038          STR      r0,[r4,#0x38]
001e3c  e5940008          LDR      r0,[r4,#8]
001e40  e2800010          ADD      r0,r0,#0x10
001e44  ebfffffe          BL       __aeabi_uread4
001e48  e5840024          STR      r0,[r4,#0x24]
;;;547    
;;;548    #if LWIP_DHCP_BOOTP_FILE
;;;549      /* copy boot server address,
;;;550         boot file name copied in dhcp_parse_reply if not overloaded */
;;;551      ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
;;;552    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;553    
;;;554      /* subnet mask given? */
;;;555      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
001e4c  e5d60006          LDRB     r0,[r6,#6]  ; dhcp_rx_options_given
001e50  e3500000          CMP      r0,#0
;;;556        /* remember given subnet mask */
;;;557        ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
;;;558        dhcp->subnet_mask_given = 1;
;;;559      } else {
;;;560        dhcp->subnet_mask_given = 0;
001e54  05c4700e          STRBEQ   r7,[r4,#0xe]
001e58  0a000004          BEQ      |L1.7792|
001e5c  e5950018          LDR      r0,[r5,#0x18]         ;557  ; dhcp_rx_options_val
001e60  ebfffffe          BL       lwip_htonl
001e64  e5840028          STR      r0,[r4,#0x28]         ;557
001e68  e3a00001          MOV      r0,#1                 ;558
001e6c  e5c4000e          STRB     r0,[r4,#0xe]          ;558
                  |L1.7792|
;;;561      }
;;;562    
;;;563      /* gateway router */
;;;564      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
001e70  e5d60007          LDRB     r0,[r6,#7]  ; dhcp_rx_options_given
001e74  e3500000          CMP      r0,#0
;;;565        ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
;;;566      }
;;;567      
;;;568    #if LWIP_DNS
;;;569      /* DNS servers */
;;;570      n = 0;
;;;571      while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
;;;572        ip_addr_t dns_addr;
;;;573        ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
;;;574        dns_setserver(n, &dns_addr);
;;;575        n++;
;;;576      }
;;;577    #endif /* LWIP_DNS */
;;;578    }
001e78  08bd81f0          POPEQ    {r4-r8,pc}
001e7c  e595001c          LDR      r0,[r5,#0x1c]         ;565  ; dhcp_rx_options_val
001e80  ebfffffe          BL       lwip_htonl
001e84  e584002c          STR      r0,[r4,#0x2c]         ;565
001e88  e8bd81f0          POP      {r4-r8,pc}
;;;579    
                          ENDP

                  dhcp_decline PROC
;;;831    static err_t
;;;832    dhcp_decline(struct netif *netif)
001e8c  e92d40f8          PUSH     {r3-r7,lr}
;;;833    {
;;;834      struct dhcp *dhcp = netif->dhcp;
;;;835      err_t result = ERR_OK;
;;;836      u16_t msecs;
;;;837      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
;;;838      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
001e90  e5904020          LDR      r4,[r0,#0x20]
001e94  e1a06000          MOV      r6,r0                 ;833
001e98  e3a0100c          MOV      r1,#0xc
001e9c  e1a00004          MOV      r0,r4
001ea0  ebfffffe          BL       dhcp_set_state
;;;839      /* create and initialize the DHCP message header */
;;;840      result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
001ea4  e3a02004          MOV      r2,#4
001ea8  e1a01004          MOV      r1,r4
001eac  e1a00006          MOV      r0,r6
001eb0  ebfffffe          BL       dhcp_create_msg
001eb4  e1b05000          MOVS     r5,r0
;;;841      if (result == ERR_OK) {
001eb8  1a000017          BNE      |L1.7964|
;;;842        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
001ebc  e3a02004          MOV      r2,#4
001ec0  e3a01032          MOV      r1,#0x32
001ec4  e1a00004          MOV      r0,r4
001ec8  ebfffffe          BL       dhcp_option
;;;843        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
001ecc  e5940024          LDR      r0,[r4,#0x24]
001ed0  ebfffffe          BL       lwip_ntohl
001ed4  e1a01000          MOV      r1,r0
001ed8  e1a00004          MOV      r0,r4
001edc  ebfffffe          BL       dhcp_option_long
;;;844    
;;;845        dhcp_option_trailer(dhcp);
001ee0  e1a00004          MOV      r0,r4
001ee4  ebfffffe          BL       dhcp_option_trailer
;;;846        /* resize pbuf to reflect true size of options */
;;;847        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
001ee8  e1d401b8          LDRH     r0,[r4,#0x18]
001eec  e28000f0          ADD      r0,r0,#0xf0
001ef0  e3c01801          BIC      r1,r0,#0x10000
001ef4  e5940010          LDR      r0,[r4,#0x10]
001ef8  ebfffffe          BL       pbuf_realloc
;;;848    
;;;849        /* per section 4.4.4, broadcast DECLINE messages */
;;;850        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
001efc  e58d6000          STR      r6,[sp,#0]
001f00  e51f22fc          LDR      r2,|L1.7180|
001f04  e5940004          LDR      r0,[r4,#4]
001f08  e5941010          LDR      r1,[r4,#0x10]
001f0c  e3a03043          MOV      r3,#0x43
001f10  ebfffffe          BL       udp_sendto_if
;;;851        dhcp_delete_msg(dhcp);
001f14  e1a00004          MOV      r0,r4
001f18  ebfffffe          BL       dhcp_delete_msg
                  |L1.7964|
;;;852        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
;;;853      } else {
;;;854        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;855          ("dhcp_decline: could not allocate DHCP request\n"));
;;;856      }
;;;857      dhcp->tries++;
001f1c  e5d4000d          LDRB     r0,[r4,#0xd]
001f20  e2800001          ADD      r0,r0,#1
001f24  e5c4000d          STRB     r0,[r4,#0xd]
;;;858      msecs = 10*1000;
;;;859      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
001f28  e3a00014          MOV      r0,#0x14
001f2c  e1c401ba          STRH     r0,[r4,#0x1a]
;;;860      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
;;;861      return result;
001f30  e1a00005          MOV      r0,r5
;;;862    }
001f34  e8bd80f8          POP      {r3-r7,pc}
;;;863    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

                  |L1.7992|
                          DCD      0x00000325

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dhcp_rx_options_val
                          %        40
                  dhcp_rx_options_given
                          %        10

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  64686370          DCB      "dhcp_option: dhcp->options_out_len + 2 + option_len <= "
000004  5f6f7074
000008  696f6e3a
00000c  20646863
000010  702d3e6f
000014  7074696f
000018  6e735f6f
00001c  75745f6c
000020  656e202b
000024  2032202b
000028  206f7074
00002c  696f6e5f
000030  6c656e20
000034  3c3d20  
000037  44484350          DCB      "DHCP_OPTIONS_LEN",0
00003b  5f4f5054
00003f  494f4e53
000043  5f4c454e
000047  00      
000048  64686370          DCB      "dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OP"
00004c  5f6f7074
000050  696f6e5f
000054  73686f72
000058  743a2064
00005c  6863702d
000060  3e6f7074
000064  696f6e73
000068  5f6f7574
00006c  5f6c656e
000070  202b2032
000074  203c3d20
000078  44484350
00007c  5f4f50  
00007f  54494f4e          DCB      "TIONS_LEN",0
000083  535f4c45
000087  4e00    

                          AREA ||.data||, DATA, ALIGN=2

                  xid
                          DCD      0xabcd0000
