; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\dhcp.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dhcp.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\dhcp.crf lwip-1.4.1\src\core\dhcp.c]
                          ARM

                          AREA ||i.dhcp_arp_reply||, CODE, READONLY, ALIGN=2

                  dhcp_arp_reply PROC
;;;802     */
;;;803    void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;804    {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;805      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
00000c  e1a00000          MOV      r0,r0
000010  e3540000          CMP      r4,#0
000014  1a000007          BNE      |L1.56|
000018  e1a00000          MOV      r0,r0
00001c  e28f3058          ADR      r3,|L1.124|
000020  e59f2070          LDR      r2,|L1.152|
000024  e28f1070          ADR      r1,|L1.156|
000028  e28f007c          ADR      r0,|L1.172|
00002c  ebfffffe          BL       sysprintf
000030  e1a00000          MOV      r0,r0
                  |L1.52|
;;;806      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
;;;807      /* is a DHCP client doing an ARP check? */
;;;808      if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
;;;809        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
;;;810          ip4_addr_get_u32(addr)));
;;;811        /* did a host respond with the address we
;;;812           were offered by the DHCP server? */
;;;813        if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
;;;814          /* we will not accept the offered address */
;;;815          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
;;;816            ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;817          dhcp_decline(netif);
;;;818        }
;;;819      }
;;;820    }
000034  e8bd8070          POP      {r4-r6,pc}
                  |L1.56|
000038  e1a00000          MOV      r0,r0                 ;805
00003c  e5940020          LDR      r0,[r4,#0x20]         ;808
000040  e3500000          CMP      r0,#0                 ;808
000044  0a00000a          BEQ      |L1.116|
000048  e5940020          LDR      r0,[r4,#0x20]         ;808
00004c  e5d0000c          LDRB     r0,[r0,#0xc]          ;808
000050  e3500008          CMP      r0,#8                 ;808
000054  1a000006          BNE      |L1.116|
000058  e5950000          LDR      r0,[r5,#0]            ;813
00005c  e5941020          LDR      r1,[r4,#0x20]         ;813
000060  e5911024          LDR      r1,[r1,#0x24]         ;813
000064  e1500001          CMP      r0,r1                 ;813
000068  1a000001          BNE      |L1.116|
00006c  e1a00004          MOV      r0,r4                 ;817
000070  ebfffffe          BL       dhcp_decline
                  |L1.116|
000074  e1a00000          MOV      r0,r0
000078  eaffffed          B        |L1.52|
;;;821    
                          ENDP

                  |L1.124|
00007c  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000080  2d312e34
000084  2e315c73
000088  72635c63
00008c  6f72655c
000090  64686370
000094  2e6300  
000097  00                DCB      0
                  |L1.152|
                          DCD      0x00000325
                  |L1.156|
00009c  6e657469          DCB      "netif != NULL",0
0000a0  6620213d
0000a4  204e554c
0000a8  4c00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
0000ac  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000b0  7274696f
0000b4  6e202225
0000b8  73222066
0000bc  61696c65
0000c0  64206174
0000c4  206c696e
0000c8  65202564
0000cc  20696e20
0000d0  25730a00

                          AREA ||i.dhcp_bind||, CODE, READONLY, ALIGN=2

                  dhcp_bind PROC
;;;926    static void
;;;927    dhcp_bind(struct netif *netif)
000000  e92d407c          PUSH     {r2-r6,lr}
;;;928    {
000004  e1a06000          MOV      r6,r0
;;;929      u32_t timeout;
;;;930      struct dhcp *dhcp;
;;;931      ip_addr_t sn_mask, gw_addr;
;;;932      LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
000008  e1a00000          MOV      r0,r0
00000c  e3560000          CMP      r6,#0
000010  1a000007          BNE      |L2.52|
000014  e1a00000          MOV      r0,r0
000018  e28f3f71          ADR      r3,|L2.484|
00001c  e3a02fe9          MOV      r2,#0x3a4
000020  e28f1f76          ADR      r1,|L2.512|
000024  e28f0e1f          ADR      r0,|L2.540|
000028  ebfffffe          BL       sysprintf
00002c  e1a00000          MOV      r0,r0
                  |L2.48|
;;;933      dhcp = netif->dhcp;
;;;934      LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
;;;935      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;936    
;;;937      /* temporary DHCP lease? */
;;;938      if (dhcp->offered_t1_renew != 0xffffffffUL) {
;;;939        /* set renewal period timer */
;;;940        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;941        timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;942        if(timeout > 0xffff) {
;;;943          timeout = 0xffff;
;;;944        }
;;;945        dhcp->t1_timeout = (u16_t)timeout;
;;;946        if (dhcp->t1_timeout == 0) {
;;;947          dhcp->t1_timeout = 1;
;;;948        }
;;;949        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;950      }
;;;951      /* set renewal period timer */
;;;952      if (dhcp->offered_t2_rebind != 0xffffffffUL) {
;;;953        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;954        timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;955        if(timeout > 0xffff) {
;;;956          timeout = 0xffff;
;;;957        }
;;;958        dhcp->t2_timeout = (u16_t)timeout;
;;;959        if (dhcp->t2_timeout == 0) {
;;;960          dhcp->t2_timeout = 1;
;;;961        }
;;;962        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;963      }
;;;964    
;;;965      /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
;;;966      if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
;;;967        dhcp->t1_timeout = 0;
;;;968      }
;;;969    
;;;970      if (dhcp->subnet_mask_given) {
;;;971        /* copy offered network mask */
;;;972        ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
;;;973      } else {
;;;974        /* subnet mask not given, choose a safe subnet mask given the network class */
;;;975        u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
;;;976        if (first_octet <= 127) {
;;;977          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
;;;978        } else if (first_octet >= 192) {
;;;979          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
;;;980        } else {
;;;981          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
;;;982        }
;;;983      }
;;;984    
;;;985      ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
;;;986      /* gateway address not given? */
;;;987      if (ip_addr_isany(&gw_addr)) {
;;;988        /* copy network address */
;;;989        ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
;;;990        /* use first host address on network as gateway */
;;;991        ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
;;;992      }
;;;993    
;;;994    #if LWIP_DHCP_AUTOIP_COOP
;;;995      if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;996        autoip_stop(netif);
;;;997        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;998      }
;;;999    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1000   
;;;1001     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
;;;1002       ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;1003     netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
;;;1004     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
;;;1005       ip4_addr_get_u32(&sn_mask)));
;;;1006     netif_set_netmask(netif, &sn_mask);
;;;1007     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
;;;1008       ip4_addr_get_u32(&gw_addr)));
;;;1009     netif_set_gw(netif, &gw_addr);
;;;1010     /* bring the interface up */
;;;1011     netif_set_up(netif);
;;;1012     /* netif is now bound to DHCP leased address */
;;;1013     dhcp_set_state(dhcp, DHCP_BOUND);
;;;1014   }
000030  e8bd807c          POP      {r2-r6,pc}
                  |L2.52|
000034  e1a00000          MOV      r0,r0                 ;932
000038  e5964020          LDR      r4,[r6,#0x20]         ;933
00003c  e1a00000          MOV      r0,r0                 ;934
000040  e3540000          CMP      r4,#0                 ;934
000044  1a000007          BNE      |L2.104|
000048  e1a00000          MOV      r0,r0                 ;934
00004c  e28f3e19          ADR      r3,|L2.484|
000050  e59f21ec          LDR      r2,|L2.580|
000054  e28f1f7b          ADR      r1,|L2.584|
000058  e28f0f6f          ADR      r0,|L2.540|
00005c  ebfffffe          BL       sysprintf
000060  e1a00000          MOV      r0,r0                 ;934
000064  eafffff1          B        |L2.48|
                  |L2.104|
000068  e1a00000          MOV      r0,r0                 ;934
00006c  e5940034          LDR      r0,[r4,#0x34]         ;938
000070  e3700001          CMN      r0,#1                 ;938
000074  0a00000d          BEQ      |L2.176|
000078  e5941034          LDR      r1,[r4,#0x34]         ;941
00007c  e281001e          ADD      r0,r1,#0x1e           ;941
000080  e3a0103c          MOV      r1,#0x3c              ;941
000084  ebfffffe          BL       __aeabi_uidivmod
000088  e1a05000          MOV      r5,r0                 ;941
00008c  e3550801          CMP      r5,#0x10000           ;942
000090  3a000000          BCC      |L2.152|
000094  e59f51c4          LDR      r5,|L2.608|
                  |L2.152|
000098  e1c451bc          STRH     r5,[r4,#0x1c]         ;945
00009c  e1d401bc          LDRH     r0,[r4,#0x1c]         ;946
0000a0  e3500000          CMP      r0,#0                 ;946
0000a4  1a000001          BNE      |L2.176|
0000a8  e3a00001          MOV      r0,#1                 ;947
0000ac  e1c401bc          STRH     r0,[r4,#0x1c]         ;947
                  |L2.176|
0000b0  e5940038          LDR      r0,[r4,#0x38]         ;952
0000b4  e3700001          CMN      r0,#1                 ;952
0000b8  0a00000d          BEQ      |L2.244|
0000bc  e5941038          LDR      r1,[r4,#0x38]         ;954
0000c0  e281001e          ADD      r0,r1,#0x1e           ;954
0000c4  e3a0103c          MOV      r1,#0x3c              ;954
0000c8  ebfffffe          BL       __aeabi_uidivmod
0000cc  e1a05000          MOV      r5,r0                 ;954
0000d0  e3550801          CMP      r5,#0x10000           ;955
0000d4  3a000000          BCC      |L2.220|
0000d8  e59f5180          LDR      r5,|L2.608|
                  |L2.220|
0000dc  e1c451be          STRH     r5,[r4,#0x1e]         ;958
0000e0  e1d401be          LDRH     r0,[r4,#0x1e]         ;959
0000e4  e3500000          CMP      r0,#0                 ;959
0000e8  1a000001          BNE      |L2.244|
0000ec  e3a00001          MOV      r0,#1                 ;960
0000f0  e1c401be          STRH     r0,[r4,#0x1e]         ;960
                  |L2.244|
0000f4  e1d401bc          LDRH     r0,[r4,#0x1c]         ;966
0000f8  e1d411be          LDRH     r1,[r4,#0x1e]         ;966
0000fc  e1500001          CMP      r0,r1                 ;966
000100  ba000004          BLT      |L2.280|
000104  e1d401be          LDRH     r0,[r4,#0x1e]         ;966
000108  e3500000          CMP      r0,#0                 ;966
00010c  da000001          BLE      |L2.280|
000110  e3a00000          MOV      r0,#0                 ;967
000114  e1c401bc          STRH     r0,[r4,#0x1c]         ;967
                  |L2.280|
000118  e5d4000e          LDRB     r0,[r4,#0xe]          ;970
00011c  e3500000          CMP      r0,#0                 ;970
000120  0a000002          BEQ      |L2.304|
000124  e5940028          LDR      r0,[r4,#0x28]         ;972
000128  e58d0004          STR      r0,[sp,#4]            ;972
00012c  ea00000d          B        |L2.360|
                  |L2.304|
000130  e5d40024          LDRB     r0,[r4,#0x24]         ;975
000134  e350007f          CMP      r0,#0x7f              ;976
000138  ca000002          BGT      |L2.328|
00013c  e3a010ff          MOV      r1,#0xff              ;977
000140  e58d1004          STR      r1,[sp,#4]            ;977
000144  ea000006          B        |L2.356|
                  |L2.328|
000148  e35000c0          CMP      r0,#0xc0              ;978
00014c  ba000002          BLT      |L2.348|
000150  e3e014ff          MVN      r1,#0xff000000        ;979
000154  e58d1004          STR      r1,[sp,#4]            ;979
000158  ea000001          B        |L2.356|
                  |L2.348|
00015c  e59f10fc          LDR      r1,|L2.608|
000160  e58d1004          STR      r1,[sp,#4]            ;981
                  |L2.356|
000164  e1a00000          MOV      r0,r0                 ;983
                  |L2.360|
000168  e594002c          LDR      r0,[r4,#0x2c]         ;985
00016c  e58d0000          STR      r0,[sp,#0]            ;985
000170  e1a0000d          MOV      r0,sp                 ;987
000174  e3500000          CMP      r0,#0                 ;987
000178  0a000002          BEQ      |L2.392|
00017c  e59d0000          LDR      r0,[sp,#0]            ;987
000180  e3500000          CMP      r0,#0                 ;987
000184  1a000006          BNE      |L2.420|
                  |L2.392|
000188  e5940024          LDR      r0,[r4,#0x24]         ;989
00018c  e59d1004          LDR      r1,[sp,#4]            ;989
000190  e0000001          AND      r0,r0,r1              ;989
000194  e58d0000          STR      r0,[sp,#0]            ;989
000198  e59d0000          LDR      r0,[sp,#0]            ;991
00019c  e3800401          ORR      r0,r0,#0x1000000      ;991
0001a0  e58d0000          STR      r0,[sp,#0]            ;991
                  |L2.420|
0001a4  e2841024          ADD      r1,r4,#0x24           ;1003
0001a8  e1a00006          MOV      r0,r6                 ;1003
0001ac  ebfffffe          BL       netif_set_ipaddr
0001b0  e28d1004          ADD      r1,sp,#4              ;1006
0001b4  e1a00006          MOV      r0,r6                 ;1006
0001b8  ebfffffe          BL       netif_set_netmask
0001bc  e1a0100d          MOV      r1,sp                 ;1009
0001c0  e1a00006          MOV      r0,r6                 ;1009
0001c4  ebfffffe          BL       netif_set_gw
0001c8  e1a00006          MOV      r0,r6                 ;1011
0001cc  ebfffffe          BL       netif_set_up
0001d0  e3a0100a          MOV      r1,#0xa               ;1013
0001d4  e1a00004          MOV      r0,r4                 ;1013
0001d8  ebfffffe          BL       dhcp_set_state
0001dc  e1a00000          MOV      r0,r0
0001e0  eaffff92          B        |L2.48|
                  |L2.484|
0001e4  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0001e8  2d312e34
0001ec  2e315c73
0001f0  72635c63
0001f4  6f72655c
0001f8  64686370
0001fc  2e6300  
0001ff  00                DCB      0
                  |L2.512|
000200  64686370          DCB      "dhcp_bind: netif != NULL",0
000204  5f62696e
000208  643a206e
00020c  65746966
000210  20213d20
000214  4e554c4c
000218  00      
000219  00                DCB      0
00021a  00                DCB      0
00021b  00                DCB      0
                  |L2.540|
00021c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000220  7274696f
000224  6e202225
000228  73222066
00022c  61696c65
000230  64206174
000234  206c696e
000238  65202564
00023c  20696e20
000240  25730a00
                  |L2.580|
                          DCD      0x000003a6
                  |L2.584|
000248  64686370          DCB      "dhcp_bind: dhcp != NULL",0
00024c  5f62696e
000250  643a2064
000254  68637020
000258  213d204e
00025c  554c4c00
                  |L2.608|
                          DCD      0x0000ffff
                          ENDP


                          AREA ||i.dhcp_check||, CODE, READONLY, ALIGN=2

                  dhcp_check PROC
;;;224    static void
;;;225    dhcp_check(struct netif *netif)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;226    {
000004  e1a05000          MOV      r5,r0
;;;227      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;228      err_t result;
;;;229      u16_t msecs;
;;;230      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
;;;231        (s16_t)netif->name[1]));
;;;232      dhcp_set_state(dhcp, DHCP_CHECKING);
00000c  e3a01008          MOV      r1,#8
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       dhcp_set_state
;;;233      /* create an ARP query for the offered IP address, expecting that no host
;;;234         responds, as the IP address should not be in use. */
;;;235      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
000018  e3a02000          MOV      r2,#0
00001c  e2841024          ADD      r1,r4,#0x24
000020  e1a00005          MOV      r0,r5
000024  ebfffffe          BL       etharp_query
000028  e1a07000          MOV      r7,r0
;;;236      if (result != ERR_OK) {
;;;237        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
;;;238      }
;;;239      dhcp->tries++;
00002c  e5d4000d          LDRB     r0,[r4,#0xd]
000030  e2800001          ADD      r0,r0,#1
000034  e5c4000d          STRB     r0,[r4,#0xd]
;;;240      msecs = 500;
000038  e3a06f7d          MOV      r6,#0x1f4
;;;241      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00003c  e2860c01          ADD      r0,r6,#0x100
000040  e28000f3          ADD      r0,r0,#0xf3
000044  e3a01f7d          MOV      r1,#0x1f4
000048  ebfffffe          BL       __aeabi_idivmod
00004c  e1c401ba          STRH     r0,[r4,#0x1a]
;;;242      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
;;;243    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;244    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP


                          AREA ||i.dhcp_cleanup||, CODE, READONLY, ALIGN=2

                  dhcp_cleanup PROC
;;;605     */
;;;606    void dhcp_cleanup(struct netif *netif)
000000  e92d4010          PUSH     {r4,lr}
;;;607    {
000004  e1a04000          MOV      r4,r0
;;;608      LWIP_ASSERT("netif != NULL", netif != NULL);
000008  e1a00000          MOV      r0,r0
00000c  e3540000          CMP      r4,#0
000010  1a000006          BNE      |L4.48|
000014  e1a00000          MOV      r0,r0
000018  e28f3034          ADR      r3,|L4.84|
00001c  e3a02e26          MOV      r2,#0x260
000020  e28f1048          ADR      r1,|L4.112|
000024  e28f0054          ADR      r0,|L4.128|
000028  ebfffffe          BL       sysprintf
00002c  e1a00000          MOV      r0,r0
                  |L4.48|
000030  e1a00000          MOV      r0,r0
;;;609    
;;;610      if (netif->dhcp != NULL) {
000034  e5940020          LDR      r0,[r4,#0x20]
000038  e3500000          CMP      r0,#0
00003c  0a000003          BEQ      |L4.80|
;;;611        mem_free(netif->dhcp);
000040  e5940020          LDR      r0,[r4,#0x20]
000044  ebfffffe          BL       mem_free
;;;612        netif->dhcp = NULL;
000048  e3a00000          MOV      r0,#0
00004c  e5840020          STR      r0,[r4,#0x20]
                  |L4.80|
;;;613      }
;;;614    }
000050  e8bd8010          POP      {r4,pc}
;;;615    
                          ENDP

                  |L4.84|
000054  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000058  2d312e34
00005c  2e315c73
000060  72635c63
000064  6f72655c
000068  64686370
00006c  2e6300  
00006f  00                DCB      0
                  |L4.112|
000070  6e657469          DCB      "netif != NULL",0
000074  6620213d
000078  204e554c
00007c  4c00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L4.128|
000080  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000084  7274696f
000088  6e202225
00008c  73222066
000090  61696c65
000094  64206174
000098  206c696e
00009c  65202564
0000a0  20696e20
0000a4  25730a00

                          AREA ||i.dhcp_coarse_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_coarse_tmr PROC
;;;336    void
;;;337    dhcp_coarse_tmr()
000000  e92d4010          PUSH     {r4,lr}
;;;338    {
;;;339      struct netif *netif = netif_list;
000004  e59f007c          LDR      r0,|L5.136|
000008  e5904000          LDR      r4,[r0,#0]  ; netif_list
;;;340      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
;;;341      /* iterate through all network interfaces */
;;;342      while (netif != NULL) {
00000c  ea00001a          B        |L5.124|
                  |L5.16|
;;;343        /* only act on DHCP configured interfaces */
;;;344        if (netif->dhcp != NULL) {
000010  e5940020          LDR      r0,[r4,#0x20]
000014  e3500000          CMP      r0,#0
000018  0a000016          BEQ      |L5.120|
;;;345          /* timer is active (non zero), and triggers (zeroes) now? */
;;;346          if (netif->dhcp->t2_timeout-- == 1) {
00001c  e5940020          LDR      r0,[r4,#0x20]
000020  e1d001be          LDRH     r0,[r0,#0x1e]
000024  e5941020          LDR      r1,[r4,#0x20]
000028  e1d111be          LDRH     r1,[r1,#0x1e]
00002c  e2411001          SUB      r1,r1,#1
000030  e5942020          LDR      r2,[r4,#0x20]
000034  e1c211be          STRH     r1,[r2,#0x1e]
000038  e3500001          CMP      r0,#1
00003c  1a000002          BNE      |L5.76|
;;;347            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
;;;348            /* this clients' rebind timeout triggered */
;;;349            dhcp_t2_timeout(netif);
000040  e1a00004          MOV      r0,r4
000044  ebfffffe          BL       dhcp_t2_timeout
000048  ea00000a          B        |L5.120|
                  |L5.76|
;;;350          /* timer is active (non zero), and triggers (zeroes) now */
;;;351          } else if (netif->dhcp->t1_timeout-- == 1) {
00004c  e5940020          LDR      r0,[r4,#0x20]
000050  e1d001bc          LDRH     r0,[r0,#0x1c]
000054  e5941020          LDR      r1,[r4,#0x20]
000058  e1d111bc          LDRH     r1,[r1,#0x1c]
00005c  e2411001          SUB      r1,r1,#1
000060  e5942020          LDR      r2,[r4,#0x20]
000064  e1c211bc          STRH     r1,[r2,#0x1c]
000068  e3500001          CMP      r0,#1
00006c  1a000001          BNE      |L5.120|
;;;352            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
;;;353            /* this clients' renewal timeout triggered */
;;;354            dhcp_t1_timeout(netif);
000070  e1a00004          MOV      r0,r4
000074  ebfffffe          BL       dhcp_t1_timeout
                  |L5.120|
;;;355          }
;;;356        }
;;;357        /* proceed to next netif */
;;;358        netif = netif->next;
000078  e5944000          LDR      r4,[r4,#0]
                  |L5.124|
00007c  e3540000          CMP      r4,#0                 ;342
000080  1affffe2          BNE      |L5.16|
;;;359      }
;;;360    }
000084  e8bd8010          POP      {r4,pc}
;;;361    
                          ENDP

                  |L5.136|
                          DCD      netif_list

                          AREA ||i.dhcp_create_msg||, CODE, READONLY, ALIGN=2

                  dhcp_create_msg PROC
;;;1640   static err_t
;;;1641   dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1642   {
000004  e1a06000          MOV      r6,r0
000008  e1a04001          MOV      r4,r1
00000c  e1a07002          MOV      r7,r2
;;;1643     u16_t i;
;;;1644   #ifndef DHCP_GLOBAL_XID
;;;1645     /** default global transaction identifier starting value (easy to match
;;;1646      *  with a packet analyser). We simply increment for each new request.
;;;1647      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1648      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1649   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1650     static u32_t xid;
;;;1651   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1652     static u32_t xid = 0xABCD0000;
;;;1653   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1654   #else
;;;1655     if (!xid_initialised) {
;;;1656       xid = DHCP_GLOBAL_XID;
;;;1657       xid_initialised = !xid_initialised;
;;;1658     }
;;;1659   #endif
;;;1660     LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
000010  e1a00000          MOV      r0,r0
000014  e3560000          CMP      r6,#0
000018  1a000008          BNE      |L6.64|
00001c  e1a00000          MOV      r0,r0
000020  e28f3e23          ADR      r3,|L6.600|
000024  e59f2248          LDR      r2,|L6.628|
000028  e28f1f92          ADR      r1,|L6.632|
00002c  e28f0f99          ADR      r0,|L6.664|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
000038  e3e0000d          MVN      r0,#0xd
                  |L6.60|
;;;1661     LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
;;;1662     LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
;;;1663     LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
;;;1664     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
;;;1665     if (dhcp->p_out == NULL) {
;;;1666       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1667         ("dhcp_create_msg(): could not allocate pbuf\n"));
;;;1668       return ERR_MEM;
;;;1669     }
;;;1670     LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
;;;1671              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1672   
;;;1673     /* reuse transaction identifier in retransmissions */
;;;1674     if (dhcp->tries == 0) {
;;;1675   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1676       xid = _LWIP_RAND();
;;;1677   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1678       xid++;
;;;1679   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1680     }
;;;1681     dhcp->xid = xid;
;;;1682     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
;;;1683                 ("transaction id xid(%"X32_F")\n", xid));
;;;1684   
;;;1685     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1686   
;;;1687     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1688     /* TODO: make link layer independent */
;;;1689     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1690     dhcp->msg_out->hlen = netif->hwaddr_len;
;;;1691     dhcp->msg_out->hops = 0;
;;;1692     dhcp->msg_out->xid = htonl(dhcp->xid);
;;;1693     dhcp->msg_out->secs = 0;
;;;1694     /* we don't need the broadcast flag since we can receive unicast traffic
;;;1695        before being fully configured! */
;;;1696     dhcp->msg_out->flags = 0;
;;;1697     ip_addr_set_zero(&dhcp->msg_out->ciaddr);
;;;1698     /* set ciaddr to netif->ip_addr based on message_type and state */
;;;1699     if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
;;;1700         ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
;;;1701          ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
;;;1702       ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
;;;1703     }
;;;1704     ip_addr_set_zero(&dhcp->msg_out->yiaddr);
;;;1705     ip_addr_set_zero(&dhcp->msg_out->siaddr);
;;;1706     ip_addr_set_zero(&dhcp->msg_out->giaddr);
;;;1707     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1708       /* copy netif hardware address, pad with zeroes */
;;;1709       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1710     }
;;;1711     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1712       dhcp->msg_out->sname[i] = 0;
;;;1713     }
;;;1714     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1715       dhcp->msg_out->file[i] = 0;
;;;1716     }
;;;1717     dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
;;;1718     dhcp->options_out_len = 0;
;;;1719     /* fill options field with an incrementing array (for debugging purposes) */
;;;1720     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1721       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1722     }
;;;1723     /* Add option MESSAGE_TYPE */
;;;1724     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;1725     dhcp_option_byte(dhcp, message_type);
;;;1726     return ERR_OK;
;;;1727   }
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L6.64|
000040  e1a00000          MOV      r0,r0                 ;1660
000044  e1a00000          MOV      r0,r0                 ;1661
000048  e3540000          CMP      r4,#0                 ;1661
00004c  1a000008          BNE      |L6.116|
000050  e1a00000          MOV      r0,r0                 ;1661
000054  e28f3f7f          ADR      r3,|L6.600|
000058  e59f2260          LDR      r2,|L6.704|
00005c  e28f1e26          ADR      r1,|L6.708|
000060  e28f0e23          ADR      r0,|L6.664|
000064  ebfffffe          BL       sysprintf
000068  e1a00000          MOV      r0,r0                 ;1661
00006c  e3e00005          MVN      r0,#5                 ;1661
000070  eafffff1          B        |L6.60|
                  |L6.116|
000074  e1a00000          MOV      r0,r0                 ;1661
000078  e1a00000          MOV      r0,r0                 ;1662
00007c  e5940010          LDR      r0,[r4,#0x10]         ;1662
000080  e3500000          CMP      r0,#0                 ;1662
000084  0a000006          BEQ      |L6.164|
000088  e1a00000          MOV      r0,r0                 ;1662
00008c  e28f3f71          ADR      r3,|L6.600|
000090  e59f224c          LDR      r2,|L6.740|
000094  e28f1f93          ADR      r1,|L6.744|
000098  e28f0f7e          ADR      r0,|L6.664|
00009c  ebfffffe          BL       sysprintf
0000a0  e1a00000          MOV      r0,r0                 ;1662
                  |L6.164|
0000a4  e1a00000          MOV      r0,r0                 ;1662
0000a8  e1a00000          MOV      r0,r0                 ;1663
0000ac  e5940014          LDR      r0,[r4,#0x14]         ;1663
0000b0  e3500000          CMP      r0,#0                 ;1663
0000b4  0a000006          BEQ      |L6.212|
0000b8  e1a00000          MOV      r0,r0                 ;1663
0000bc  e28f3f65          ADR      r3,|L6.600|
0000c0  e59f2248          LDR      r2,|L6.784|
0000c4  e28f1f92          ADR      r1,|L6.788|
0000c8  e28f0f72          ADR      r0,|L6.664|
0000cc  ebfffffe          BL       sysprintf
0000d0  e1a00000          MOV      r0,r0                 ;1663
                  |L6.212|
0000d4  e1a00000          MOV      r0,r0                 ;1663
0000d8  e3a02000          MOV      r2,#0                 ;1664
0000dc  e3a01f4d          MOV      r1,#0x134             ;1664
0000e0  e1a00002          MOV      r0,r2                 ;1664
0000e4  ebfffffe          BL       pbuf_alloc
0000e8  e5840010          STR      r0,[r4,#0x10]         ;1664
0000ec  e5940010          LDR      r0,[r4,#0x10]         ;1665
0000f0  e3500000          CMP      r0,#0                 ;1665
0000f4  1a000001          BNE      |L6.256|
0000f8  e3e00000          MVN      r0,#0                 ;1668
0000fc  eaffffce          B        |L6.60|
                  |L6.256|
000100  e1a00000          MOV      r0,r0                 ;1670
000104  e5940010          LDR      r0,[r4,#0x10]         ;1670
000108  e1d000ba          LDRH     r0,[r0,#0xa]          ;1670
00010c  e3500f4d          CMP      r0,#0x134             ;1670
000110  2a000006          BCS      |L6.304|
000114  e1a00000          MOV      r0,r0                 ;1670
000118  e28f3f4e          ADR      r3,|L6.600|
00011c  e59f2218          LDR      r2,|L6.828|
000120  e28f1f86          ADR      r1,|L6.832|
000124  e28f0f5b          ADR      r0,|L6.664|
000128  ebfffffe          BL       sysprintf
00012c  e1a00000          MOV      r0,r0                 ;1670
                  |L6.304|
000130  e1a00000          MOV      r0,r0                 ;1670
000134  e5d4000d          LDRB     r0,[r4,#0xd]          ;1674
000138  e3500000          CMP      r0,#0                 ;1674
00013c  1a000004          BNE      |L6.340|
000140  e59f0238          LDR      r0,|L6.896|
000144  e5900000          LDR      r0,[r0,#0]            ;1678  ; xid
000148  e2800001          ADD      r0,r0,#1              ;1678
00014c  e59f122c          LDR      r1,|L6.896|
000150  e5810000          STR      r0,[r1,#0]            ;1678  ; xid
                  |L6.340|
000154  e59f0224          LDR      r0,|L6.896|
000158  e5900000          LDR      r0,[r0,#0]            ;1681  ; xid
00015c  e5840000          STR      r0,[r4,#0]            ;1681
000160  e5940010          LDR      r0,[r4,#0x10]         ;1685
000164  e5900004          LDR      r0,[r0,#4]            ;1685
000168  e5840014          STR      r0,[r4,#0x14]         ;1685
00016c  e3a00001          MOV      r0,#1                 ;1687
000170  e5941014          LDR      r1,[r4,#0x14]         ;1687
000174  e5c10000          STRB     r0,[r1,#0]            ;1687
000178  e5941014          LDR      r1,[r4,#0x14]         ;1689
00017c  e5c10001          STRB     r0,[r1,#1]            ;1689
000180  e5d60026          LDRB     r0,[r6,#0x26]         ;1690
000184  e5941014          LDR      r1,[r4,#0x14]         ;1690
000188  e5c10002          STRB     r0,[r1,#2]            ;1690
00018c  e3a00000          MOV      r0,#0                 ;1691
000190  e5941014          LDR      r1,[r4,#0x14]         ;1691
000194  e5c10003          STRB     r0,[r1,#3]            ;1691
000198  e5940000          LDR      r0,[r4,#0]            ;1692
00019c  ebfffffe          BL       lwip_htonl
0001a0  e1a08000          MOV      r8,r0                 ;1692
0001a4  e5940014          LDR      r0,[r4,#0x14]         ;1692
0001a8  e2801004          ADD      r1,r0,#4              ;1692
0001ac  e1a00008          MOV      r0,r8                 ;1692
0001b0  ebfffffe          BL       __aeabi_uwrite4
0001b4  e3a00000          MOV      r0,#0                 ;1693
0001b8  e5941014          LDR      r1,[r4,#0x14]         ;1693
0001bc  e5c10008          STRB     r0,[r1,#8]            ;1693
0001c0  e5c10009          STRB     r0,[r1,#9]            ;1693
0001c4  e5941014          LDR      r1,[r4,#0x14]         ;1696
0001c8  e5c1000a          STRB     r0,[r1,#0xa]          ;1696
0001cc  e5c1000b          STRB     r0,[r1,#0xb]          ;1696
0001d0  e5940014          LDR      r0,[r4,#0x14]         ;1697
0001d4  e280100c          ADD      r1,r0,#0xc            ;1697
0001d8  e3a00000          MOV      r0,#0                 ;1697
0001dc  ebfffffe          BL       __aeabi_uwrite4
0001e0  e3570008          CMP      r7,#8                 ;1699
0001e4  0a000009          BEQ      |L6.528|
0001e8  e3570004          CMP      r7,#4                 ;1699
0001ec  0a000007          BEQ      |L6.528|
0001f0  e3570003          CMP      r7,#3                 ;1700
0001f4  1a000009          BNE      |L6.544|
0001f8  e5d4000c          LDRB     r0,[r4,#0xc]          ;1701
0001fc  e3500005          CMP      r0,#5                 ;1701
000200  0a000002          BEQ      |L6.528|
000204  e5d4000c          LDRB     r0,[r4,#0xc]          ;1701
000208  e3500004          CMP      r0,#4                 ;1701
00020c  1a000003          BNE      |L6.544|
                  |L6.528|
000210  e5942014          LDR      r2,[r4,#0x14]         ;1702
000214  e282100c          ADD      r1,r2,#0xc            ;1702
000218  e5960004          LDR      r0,[r6,#4]            ;1702
00021c  ebfffffe          BL       __aeabi_uwrite4
                  |L6.544|
000220  e5940014          LDR      r0,[r4,#0x14]         ;1704
000224  e2801010          ADD      r1,r0,#0x10           ;1704
000228  e3a00000          MOV      r0,#0                 ;1704
00022c  ebfffffe          BL       __aeabi_uwrite4
000230  e5940014          LDR      r0,[r4,#0x14]         ;1705
000234  e2801014          ADD      r1,r0,#0x14           ;1705
000238  e3a00000          MOV      r0,#0                 ;1705
00023c  ebfffffe          BL       __aeabi_uwrite4
000240  e5940014          LDR      r0,[r4,#0x14]         ;1706
000244  e2801018          ADD      r1,r0,#0x18           ;1706
000248  e3a00000          MOV      r0,#0                 ;1706
00024c  ebfffffe          BL       __aeabi_uwrite4
000250  e3a05000          MOV      r5,#0                 ;1707
000254  ea000057          B        |L6.952|
                  |L6.600|
000258  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
00025c  2d312e34
000260  2e315c73
000264  72635c63
000268  6f72655c
00026c  64686370
000270  2e6300  
000273  00                DCB      0
                  |L6.628|
                          DCD      0x0000067c
                  |L6.632|
000278  64686370          DCB      "dhcp_create_msg: netif != NULL",0
00027c  5f637265
000280  6174655f
000284  6d73673a
000288  206e6574
00028c  69662021
000290  3d204e55
000294  4c4c00  
000297  00                DCB      0
                  |L6.664|
000298  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00029c  7274696f
0002a0  6e202225
0002a4  73222066
0002a8  61696c65
0002ac  64206174
0002b0  206c696e
0002b4  65202564
0002b8  20696e20
0002bc  25730a00
                  |L6.704|
                          DCD      0x0000067d
                  |L6.708|
0002c4  64686370          DCB      "dhcp_create_msg: dhcp != NULL",0
0002c8  5f637265
0002cc  6174655f
0002d0  6d73673a
0002d4  20646863
0002d8  7020213d
0002dc  204e554c
0002e0  4c00    
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L6.740|
                          DCD      0x0000067e
                  |L6.744|
0002e8  64686370          DCB      "dhcp_create_msg: dhcp->p_out == NULL",0
0002ec  5f637265
0002f0  6174655f
0002f4  6d73673a
0002f8  20646863
0002fc  702d3e70
000300  5f6f7574
000304  203d3d20
000308  4e554c4c
00030c  00      
00030d  00                DCB      0
00030e  00                DCB      0
00030f  00                DCB      0
                  |L6.784|
                          DCD      0x0000067f
                  |L6.788|
000314  64686370          DCB      "dhcp_create_msg: dhcp->msg_out == NULL",0
000318  5f637265
00031c  6174655f
000320  6d73673a
000324  20646863
000328  702d3e6d
00032c  73675f6f
000330  7574203d
000334  3d204e55
000338  4c4c00  
00033b  00                DCB      0
                  |L6.828|
                          DCD      0x00000686
                  |L6.832|
000340  64686370          DCB      "dhcp_create_msg: check that first pbuf can hold struct "
000344  5f637265
000348  6174655f
00034c  6d73673a
000350  20636865
000354  636b2074
000358  68617420
00035c  66697273
000360  74207062
000364  75662063
000368  616e2068
00036c  6f6c6420
000370  73747275
000374  637420  
000377  64686370          DCB      "dhcp_msg",0
00037b  5f6d7367
00037f  00      
                  |L6.896|
                          DCD      xid
                  |L6.900|
000384  e5d60026          LDRB     r0,[r6,#0x26]         ;1709
000388  e1500005          CMP      r0,r5                 ;1709
00038c  da000002          BLE      |L6.924|
000390  e2860027          ADD      r0,r6,#0x27           ;1709
000394  e7d00005          LDRB     r0,[r0,r5]            ;1709
000398  ea000000          B        |L6.928|
                  |L6.924|
00039c  e3a00000          MOV      r0,#0                 ;1709
                  |L6.928|
0003a0  e5941014          LDR      r1,[r4,#0x14]         ;1709
0003a4  e281101c          ADD      r1,r1,#0x1c           ;1709
0003a8  e7c10005          STRB     r0,[r1,r5]            ;1709
0003ac  e2850001          ADD      r0,r5,#1              ;1707
0003b0  e1a05800          LSL      r5,r0,#16             ;1707
0003b4  e1a05825          LSR      r5,r5,#16             ;1707
                  |L6.952|
0003b8  e3550010          CMP      r5,#0x10              ;1707
0003bc  3afffff0          BCC      |L6.900|
0003c0  e3a05000          MOV      r5,#0                 ;1711
0003c4  ea000006          B        |L6.996|
                  |L6.968|
0003c8  e3a00000          MOV      r0,#0                 ;1712
0003cc  e5941014          LDR      r1,[r4,#0x14]         ;1712
0003d0  e281102c          ADD      r1,r1,#0x2c           ;1712
0003d4  e7c10005          STRB     r0,[r1,r5]            ;1712
0003d8  e2850001          ADD      r0,r5,#1              ;1711
0003dc  e1a05800          LSL      r5,r0,#16             ;1711
0003e0  e1a05825          LSR      r5,r5,#16             ;1711
                  |L6.996|
0003e4  e3550040          CMP      r5,#0x40              ;1711
0003e8  3afffff6          BCC      |L6.968|
0003ec  e3a05000          MOV      r5,#0                 ;1714
0003f0  ea000006          B        |L6.1040|
                  |L6.1012|
0003f4  e3a00000          MOV      r0,#0                 ;1715
0003f8  e5941014          LDR      r1,[r4,#0x14]         ;1715
0003fc  e281106c          ADD      r1,r1,#0x6c           ;1715
000400  e7c10005          STRB     r0,[r1,r5]            ;1715
000404  e2850001          ADD      r0,r5,#1              ;1714
000408  e1a05800          LSL      r5,r0,#16             ;1714
00040c  e1a05825          LSR      r5,r5,#16             ;1714
                  |L6.1040|
000410  e3550080          CMP      r5,#0x80              ;1714
000414  3afffff6          BCC      |L6.1012|
000418  e5940014          LDR      r0,[r4,#0x14]         ;1717
00041c  e28010ec          ADD      r1,r0,#0xec           ;1717
000420  e59f0054          LDR      r0,|L6.1148|
000424  ebfffffe          BL       __aeabi_uwrite4
000428  e3a00000          MOV      r0,#0                 ;1718
00042c  e1c401b8          STRH     r0,[r4,#0x18]         ;1718
000430  e3a05000          MOV      r5,#0                 ;1720
000434  ea000005          B        |L6.1104|
                  |L6.1080|
000438  e5941014          LDR      r1,[r4,#0x14]         ;1721
00043c  e28110f0          ADD      r1,r1,#0xf0           ;1721
000440  e7c15005          STRB     r5,[r1,r5]            ;1721
000444  e2850001          ADD      r0,r5,#1              ;1720
000448  e1a05800          LSL      r5,r0,#16             ;1720
00044c  e1a05825          LSR      r5,r5,#16             ;1720
                  |L6.1104|
000450  e3550044          CMP      r5,#0x44              ;1720
000454  3afffff7          BCC      |L6.1080|
000458  e3a02001          MOV      r2,#1                 ;1724
00045c  e3a01035          MOV      r1,#0x35              ;1724
000460  e1a00004          MOV      r0,r4                 ;1724
000464  ebfffffe          BL       dhcp_option
000468  e1a01007          MOV      r1,r7                 ;1725
00046c  e1a00004          MOV      r0,r4                 ;1725
000470  ebfffffe          BL       dhcp_option_byte
000474  e3a00000          MOV      r0,#0                 ;1726
000478  eafffeef          B        |L6.60|
;;;1728   
                          ENDP

                  |L6.1148|
                          DCD      0x63538263

                          AREA ||i.dhcp_decline||, CODE, READONLY, ALIGN=2

                  dhcp_decline PROC
;;;831    static err_t
;;;832    dhcp_decline(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;833    {
000004  e1a05000          MOV      r5,r0
;;;834      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;835      err_t result = ERR_OK;
00000c  e3a06000          MOV      r6,#0
;;;836      u16_t msecs;
;;;837      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
;;;838      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
000010  e3a0100c          MOV      r1,#0xc
000014  e1a00004          MOV      r0,r4
000018  ebfffffe          BL       dhcp_set_state
;;;839      /* create and initialize the DHCP message header */
;;;840      result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
00001c  e3a02004          MOV      r2,#4
000020  e1a01004          MOV      r1,r4
000024  e1a00005          MOV      r0,r5
000028  ebfffffe          BL       dhcp_create_msg
00002c  e1a06000          MOV      r6,r0
;;;841      if (result == ERR_OK) {
000030  e3560000          CMP      r6,#0
000034  1a000018          BNE      |L7.156|
;;;842        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000038  e3a02004          MOV      r2,#4
00003c  e3a01032          MOV      r1,#0x32
000040  e1a00004          MOV      r0,r4
000044  ebfffffe          BL       dhcp_option
;;;843        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000048  e5940024          LDR      r0,[r4,#0x24]
00004c  ebfffffe          BL       lwip_ntohl
000050  e1a08000          MOV      r8,r0
000054  e1a01008          MOV      r1,r8
000058  e1a00004          MOV      r0,r4
00005c  ebfffffe          BL       dhcp_option_long
;;;844    
;;;845        dhcp_option_trailer(dhcp);
000060  e1a00004          MOV      r0,r4
000064  ebfffffe          BL       dhcp_option_trailer
;;;846        /* resize pbuf to reflect true size of options */
;;;847        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000068  e1d421b8          LDRH     r2,[r4,#0x18]
00006c  e28220f0          ADD      r2,r2,#0xf0
000070  e3c21801          BIC      r1,r2,#0x10000
000074  e5940010          LDR      r0,[r4,#0x10]
000078  ebfffffe          BL       pbuf_realloc
;;;848    
;;;849        /* per section 4.4.4, broadcast DECLINE messages */
;;;850        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00007c  e58d5000          STR      r5,[sp,#0]
000080  e3a03043          MOV      r3,#0x43
000084  e59f203c          LDR      r2,|L7.200|
000088  e5940004          LDR      r0,[r4,#4]
00008c  e5941010          LDR      r1,[r4,#0x10]
000090  ebfffffe          BL       udp_sendto_if
;;;851        dhcp_delete_msg(dhcp);
000094  e1a00004          MOV      r0,r4
000098  ebfffffe          BL       dhcp_delete_msg
                  |L7.156|
;;;852        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
;;;853      } else {
;;;854        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;855          ("dhcp_decline: could not allocate DHCP request\n"));
;;;856      }
;;;857      dhcp->tries++;
00009c  e5d4000d          LDRB     r0,[r4,#0xd]
0000a0  e2800001          ADD      r0,r0,#1
0000a4  e5c4000d          STRB     r0,[r4,#0xd]
;;;858      msecs = 10*1000;
0000a8  e59f701c          LDR      r7,|L7.204|
;;;859      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000ac  e2870c01          ADD      r0,r7,#0x100
0000b0  e28000f3          ADD      r0,r0,#0xf3
0000b4  e3a01f7d          MOV      r1,#0x1f4
0000b8  ebfffffe          BL       __aeabi_idivmod
0000bc  e1c401ba          STRH     r0,[r4,#0x1a]
;;;860      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
;;;861      return result;
0000c0  e1a00006          MOV      r0,r6
;;;862    }
0000c4  e8bd83f8          POP      {r3-r9,pc}
;;;863    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

                  |L7.200|
                          DCD      ip_addr_broadcast
                  |L7.204|
                          DCD      0x00002710

                          AREA ||i.dhcp_delete_msg||, CODE, READONLY, ALIGN=2

                  dhcp_delete_msg PROC
;;;1734   static void
;;;1735   dhcp_delete_msg(struct dhcp *dhcp)
000000  e92d4010          PUSH     {r4,lr}
;;;1736   {
000004  e1a04000          MOV      r4,r0
;;;1737     LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
000008  e1a00000          MOV      r0,r0
00000c  e3540000          CMP      r4,#0
000010  1a000007          BNE      |L8.52|
000014  e1a00000          MOV      r0,r0
000018  e28f30a0          ADR      r3,|L8.192|
00001c  e59f20b8          LDR      r2,|L8.220|
000020  e28f10b8          ADR      r1,|L8.224|
000024  e28f00d4          ADR      r0,|L8.256|
000028  ebfffffe          BL       sysprintf
00002c  e1a00000          MOV      r0,r0
                  |L8.48|
;;;1738     LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
;;;1739     LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
;;;1740     if (dhcp->p_out != NULL) {
;;;1741       pbuf_free(dhcp->p_out);
;;;1742     }
;;;1743     dhcp->p_out = NULL;
;;;1744     dhcp->msg_out = NULL;
;;;1745   }
000030  e8bd8010          POP      {r4,pc}
                  |L8.52|
000034  e1a00000          MOV      r0,r0                 ;1737
000038  e1a00000          MOV      r0,r0                 ;1738
00003c  e5940010          LDR      r0,[r4,#0x10]         ;1738
000040  e3500000          CMP      r0,#0                 ;1738
000044  1a000006          BNE      |L8.100|
000048  e1a00000          MOV      r0,r0                 ;1738
00004c  e28f306c          ADR      r3,|L8.192|
000050  e59f20d0          LDR      r2,|L8.296|
000054  e28f10d0          ADR      r1,|L8.300|
000058  e28f00a0          ADR      r0,|L8.256|
00005c  ebfffffe          BL       sysprintf
000060  e1a00000          MOV      r0,r0                 ;1738
                  |L8.100|
000064  e1a00000          MOV      r0,r0                 ;1738
000068  e1a00000          MOV      r0,r0                 ;1739
00006c  e5940014          LDR      r0,[r4,#0x14]         ;1739
000070  e3500000          CMP      r0,#0                 ;1739
000074  1a000006          BNE      |L8.148|
000078  e1a00000          MOV      r0,r0                 ;1739
00007c  e28f303c          ADR      r3,|L8.192|
000080  e59f20cc          LDR      r2,|L8.340|
000084  e28f10cc          ADR      r1,|L8.344|
000088  e28f0070          ADR      r0,|L8.256|
00008c  ebfffffe          BL       sysprintf
000090  e1a00000          MOV      r0,r0                 ;1739
                  |L8.148|
000094  e1a00000          MOV      r0,r0                 ;1739
000098  e5940010          LDR      r0,[r4,#0x10]         ;1740
00009c  e3500000          CMP      r0,#0                 ;1740
0000a0  0a000001          BEQ      |L8.172|
0000a4  e5940010          LDR      r0,[r4,#0x10]         ;1741
0000a8  ebfffffe          BL       pbuf_free
                  |L8.172|
0000ac  e3a00000          MOV      r0,#0                 ;1743
0000b0  e5840010          STR      r0,[r4,#0x10]         ;1743
0000b4  e5840014          STR      r0,[r4,#0x14]         ;1744
0000b8  e1a00000          MOV      r0,r0
0000bc  eaffffdb          B        |L8.48|
;;;1746   
                          ENDP

                  |L8.192|
0000c0  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0000c4  2d312e34
0000c8  2e315c73
0000cc  72635c63
0000d0  6f72655c
0000d4  64686370
0000d8  2e6300  
0000db  00                DCB      0
                  |L8.220|
                          DCD      0x000006c9
                  |L8.224|
0000e0  64686370          DCB      "dhcp_delete_msg: dhcp != NULL",0
0000e4  5f64656c
0000e8  6574655f
0000ec  6d73673a
0000f0  20646863
0000f4  7020213d
0000f8  204e554c
0000fc  4c00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L8.256|
000100  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000104  7274696f
000108  6e202225
00010c  73222066
000110  61696c65
000114  64206174
000118  206c696e
00011c  65202564
000120  20696e20
000124  25730a00
                  |L8.296|
                          DCD      0x000006ca
                  |L8.300|
00012c  64686370          DCB      "dhcp_delete_msg: dhcp->p_out != NULL",0
000130  5f64656c
000134  6574655f
000138  6d73673a
00013c  20646863
000140  702d3e70
000144  5f6f7574
000148  20213d20
00014c  4e554c4c
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L8.340|
                          DCD      0x000006cb
                  |L8.344|
000158  64686370          DCB      "dhcp_delete_msg: dhcp->msg_out != NULL",0
00015c  5f64656c
000160  6574655f
000164  6d73673a
000168  20646863
00016c  702d3e6d
000170  73675f6f
000174  75742021
000178  3d204e55
00017c  4c4c00  
00017f  00                DCB      0

                          AREA ||i.dhcp_discover||, CODE, READONLY, ALIGN=2

                  dhcp_discover PROC
;;;871    static err_t
;;;872    dhcp_discover(struct netif *netif)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;873    {
000004  e1a05000          MOV      r5,r0
;;;874      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;875      err_t result = ERR_OK;
00000c  e3a06000          MOV      r6,#0
;;;876      u16_t msecs;
;;;877      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
;;;878      ip_addr_set_any(&dhcp->offered_ip_addr);
000010  e3a00000          MOV      r0,#0
000014  e5840024          STR      r0,[r4,#0x24]
;;;879      dhcp_set_state(dhcp, DHCP_SELECTING);
000018  e3a01006          MOV      r1,#6
00001c  e1a00004          MOV      r0,r4
000020  ebfffffe          BL       dhcp_set_state
;;;880      /* create and initialize the DHCP message header */
;;;881      result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
000024  e3a02001          MOV      r2,#1
000028  e1a01004          MOV      r1,r4
00002c  e1a00005          MOV      r0,r5
000030  ebfffffe          BL       dhcp_create_msg
000034  e1a06000          MOV      r6,r0
;;;882      if (result == ERR_OK) {
000038  e3560000          CMP      r6,#0
00003c  1a000025          BNE      |L9.216|
;;;883        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
;;;884    
;;;885        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000040  e3a02002          MOV      r2,#2
000044  e3a01039          MOV      r1,#0x39
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       dhcp_option
;;;886        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000050  e1d512b4          LDRH     r1,[r5,#0x24]
000054  e1a00004          MOV      r0,r4
000058  ebfffffe          BL       dhcp_option_short
;;;887    
;;;888        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
00005c  e3a02004          MOV      r2,#4
000060  e3a01037          MOV      r1,#0x37
000064  e1a00004          MOV      r0,r4
000068  ebfffffe          BL       dhcp_option
;;;889        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
00006c  e3a01001          MOV      r1,#1
000070  e1a00004          MOV      r0,r4
000074  ebfffffe          BL       dhcp_option_byte
;;;890        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000078  e3a01003          MOV      r1,#3
00007c  e1a00004          MOV      r0,r4
000080  ebfffffe          BL       dhcp_option_byte
;;;891        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000084  e3a0101c          MOV      r1,#0x1c
000088  e1a00004          MOV      r0,r4
00008c  ebfffffe          BL       dhcp_option_byte
;;;892        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000090  e3a01006          MOV      r1,#6
000094  e1a00004          MOV      r0,r4
000098  ebfffffe          BL       dhcp_option_byte
;;;893    
;;;894        dhcp_option_trailer(dhcp);
00009c  e1a00004          MOV      r0,r4
0000a0  ebfffffe          BL       dhcp_option_trailer
;;;895    
;;;896        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
;;;897        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0000a4  e1d421b8          LDRH     r2,[r4,#0x18]
0000a8  e28220f0          ADD      r2,r2,#0xf0
0000ac  e3c21801          BIC      r1,r2,#0x10000
0000b0  e5940010          LDR      r0,[r4,#0x10]
0000b4  ebfffffe          BL       pbuf_realloc
;;;898    
;;;899        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
;;;900        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
0000b8  e58d5000          STR      r5,[sp,#0]
0000bc  e3a03043          MOV      r3,#0x43
0000c0  e59f2068          LDR      r2,|L9.304|
0000c4  e5940004          LDR      r0,[r4,#4]
0000c8  e5941010          LDR      r1,[r4,#0x10]
0000cc  ebfffffe          BL       udp_sendto_if
;;;901        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
;;;902        dhcp_delete_msg(dhcp);
0000d0  e1a00004          MOV      r0,r4
0000d4  ebfffffe          BL       dhcp_delete_msg
                  |L9.216|
;;;903        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
;;;904      } else {
;;;905        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
;;;906      }
;;;907      dhcp->tries++;
0000d8  e5d4000d          LDRB     r0,[r4,#0xd]
0000dc  e2800001          ADD      r0,r0,#1
0000e0  e5c4000d          STRB     r0,[r4,#0xd]
;;;908    #if LWIP_DHCP_AUTOIP_COOP
;;;909      if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;910        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;911        autoip_start(netif);
;;;912      }
;;;913    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;914      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000e4  e5d4000d          LDRB     r0,[r4,#0xd]
0000e8  e3500006          CMP      r0,#6
0000ec  aa000003          BGE      |L9.256|
0000f0  e5d4000d          LDRB     r0,[r4,#0xd]
0000f4  e3a01001          MOV      r1,#1
0000f8  e1a00011          LSL      r0,r1,r0
0000fc  ea000000          B        |L9.260|
                  |L9.256|
000100  e3a0003c          MOV      r0,#0x3c
                  |L9.260|
000104  e0801080          ADD      r1,r0,r0,LSL #1
000108  e0610380          RSB      r0,r1,r0,LSL #7
00010c  e59f1020          LDR      r1,|L9.308|
000110  e0017180          AND      r7,r1,r0,LSL #3
;;;915      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000114  e2870c01          ADD      r0,r7,#0x100
000118  e28000f3          ADD      r0,r0,#0xf3
00011c  e3a01f7d          MOV      r1,#0x1f4
000120  ebfffffe          BL       __aeabi_idivmod
000124  e1c401ba          STRH     r0,[r4,#0x1a]
;;;916      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
;;;917      return result;
000128  e1a00006          MOV      r0,r6
;;;918    }
00012c  e8bd80f8          POP      {r3-r7,pc}
;;;919    
                          ENDP

                  |L9.304|
                          DCD      ip_addr_broadcast
                  |L9.308|
                          DCD      0x0000ffff

                          AREA ||i.dhcp_fine_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_fine_tmr PROC
;;;368    void
;;;369    dhcp_fine_tmr()
000000  e92d4010          PUSH     {r4,lr}
;;;370    {
;;;371      struct netif *netif = netif_list;
000004  e59f0074          LDR      r0,|L10.128|
000008  e5904000          LDR      r4,[r0,#0]  ; netif_list
;;;372      /* loop through netif's */
;;;373      while (netif != NULL) {
00000c  ea000018          B        |L10.116|
                  |L10.16|
;;;374        /* only act on DHCP configured interfaces */
;;;375        if (netif->dhcp != NULL) {
000010  e5940020          LDR      r0,[r4,#0x20]
000014  e3500000          CMP      r0,#0
000018  0a000014          BEQ      |L10.112|
;;;376          /* timer is active (non zero), and is about to trigger now */      
;;;377          if (netif->dhcp->request_timeout > 1) {
00001c  e5940020          LDR      r0,[r4,#0x20]
000020  e1d001ba          LDRH     r0,[r0,#0x1a]
000024  e3500001          CMP      r0,#1
000028  da000005          BLE      |L10.68|
;;;378            netif->dhcp->request_timeout--;
00002c  e5940020          LDR      r0,[r4,#0x20]
000030  e1d001ba          LDRH     r0,[r0,#0x1a]
000034  e2400001          SUB      r0,r0,#1
000038  e5941020          LDR      r1,[r4,#0x20]
00003c  e1c101ba          STRH     r0,[r1,#0x1a]
000040  ea00000a          B        |L10.112|
                  |L10.68|
;;;379          }
;;;380          else if (netif->dhcp->request_timeout == 1) {
000044  e5940020          LDR      r0,[r4,#0x20]
000048  e1d001ba          LDRH     r0,[r0,#0x1a]
00004c  e3500001          CMP      r0,#1
000050  1a000006          BNE      |L10.112|
;;;381            netif->dhcp->request_timeout--;
000054  e5940020          LDR      r0,[r4,#0x20]
000058  e1d001ba          LDRH     r0,[r0,#0x1a]
00005c  e2400001          SUB      r0,r0,#1
000060  e5941020          LDR      r1,[r4,#0x20]
000064  e1c101ba          STRH     r0,[r1,#0x1a]
;;;382            /* { netif->dhcp->request_timeout == 0 } */
;;;383            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
;;;384            /* this client's request timeout triggered */
;;;385            dhcp_timeout(netif);
000068  e1a00004          MOV      r0,r4
00006c  ebfffffe          BL       dhcp_timeout
                  |L10.112|
;;;386          }
;;;387        }
;;;388        /* proceed to next network interface */
;;;389        netif = netif->next;
000070  e5944000          LDR      r4,[r4,#0]
                  |L10.116|
000074  e3540000          CMP      r4,#0                 ;373
000078  1affffe4          BNE      |L10.16|
;;;390      }
;;;391    }
00007c  e8bd8010          POP      {r4,pc}
;;;392    
                          ENDP

                  |L10.128|
                          DCD      netif_list

                          AREA ||i.dhcp_handle_ack||, CODE, READONLY, ALIGN=2

                  dhcp_handle_ack PROC
;;;507    static void
;;;508    dhcp_handle_ack(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;509    {
000004  e1a05000          MOV      r5,r0
;;;510      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;511    #if LWIP_DNS
;;;512      u8_t n;
;;;513    #endif /* LWIP_DNS */
;;;514    
;;;515      /* clear options we might not get from the ACK */
;;;516      ip_addr_set_zero(&dhcp->offered_sn_mask);
00000c  e3a00000          MOV      r0,#0
000010  e5840028          STR      r0,[r4,#0x28]
;;;517      ip_addr_set_zero(&dhcp->offered_gw_addr);
000014  e584002c          STR      r0,[r4,#0x2c]
;;;518    #if LWIP_DHCP_BOOTP_FILE
;;;519      ip_addr_set_zero(&dhcp->offered_si_addr);
;;;520    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;521    
;;;522      /* lease time given? */
;;;523      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
000018  e59f00d0          LDR      r0,|L11.240|
00001c  e5d00003          LDRB     r0,[r0,#3]  ; dhcp_rx_options_given
000020  e3500000          CMP      r0,#0
000024  0a000002          BEQ      |L11.52|
;;;524        /* remember offered lease time */
;;;525        dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
000028  e59f00c4          LDR      r0,|L11.244|
00002c  e590000c          LDR      r0,[r0,#0xc]  ; dhcp_rx_options_val
000030  e5840030          STR      r0,[r4,#0x30]
                  |L11.52|
;;;526      }
;;;527      /* renewal period given? */
;;;528      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
000034  e59f00b4          LDR      r0,|L11.240|
000038  e5d00004          LDRB     r0,[r0,#4]  ; dhcp_rx_options_given
00003c  e3500000          CMP      r0,#0
000040  0a000003          BEQ      |L11.84|
;;;529        /* remember given renewal period */
;;;530        dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
000044  e59f00a8          LDR      r0,|L11.244|
000048  e5900010          LDR      r0,[r0,#0x10]  ; dhcp_rx_options_val
00004c  e5840034          STR      r0,[r4,#0x34]
000050  ea000002          B        |L11.96|
                  |L11.84|
;;;531      } else {
;;;532        /* calculate safe periods for renewal */
;;;533        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
000054  e5940030          LDR      r0,[r4,#0x30]
000058  e1a000a0          LSR      r0,r0,#1
00005c  e5840034          STR      r0,[r4,#0x34]
                  |L11.96|
;;;534      }
;;;535    
;;;536      /* renewal period given? */
;;;537      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
000060  e59f0088          LDR      r0,|L11.240|
000064  e5d00005          LDRB     r0,[r0,#5]  ; dhcp_rx_options_given
000068  e3500000          CMP      r0,#0
00006c  0a000003          BEQ      |L11.128|
;;;538        /* remember given rebind period */
;;;539        dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
000070  e59f007c          LDR      r0,|L11.244|
000074  e5900014          LDR      r0,[r0,#0x14]  ; dhcp_rx_options_val
000078  e5840038          STR      r0,[r4,#0x38]
00007c  ea000001          B        |L11.136|
                  |L11.128|
;;;540      } else {
;;;541        /* calculate safe periods for rebinding */
;;;542        dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
000080  e5940030          LDR      r0,[r4,#0x30]
000084  e5840038          STR      r0,[r4,#0x38]
                  |L11.136|
;;;543      }
;;;544    
;;;545      /* (y)our internet address */
;;;546      ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
000088  e5941008          LDR      r1,[r4,#8]
00008c  e2810010          ADD      r0,r1,#0x10
000090  ebfffffe          BL       __aeabi_uread4
000094  e5840024          STR      r0,[r4,#0x24]
;;;547    
;;;548    #if LWIP_DHCP_BOOTP_FILE
;;;549      /* copy boot server address,
;;;550         boot file name copied in dhcp_parse_reply if not overloaded */
;;;551      ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
;;;552    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;553    
;;;554      /* subnet mask given? */
;;;555      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
000098  e59f0050          LDR      r0,|L11.240|
00009c  e5d00006          LDRB     r0,[r0,#6]  ; dhcp_rx_options_given
0000a0  e3500000          CMP      r0,#0
0000a4  0a000006          BEQ      |L11.196|
;;;556        /* remember given subnet mask */
;;;557        ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
0000a8  e59f1044          LDR      r1,|L11.244|
0000ac  e5910018          LDR      r0,[r1,#0x18]  ; dhcp_rx_options_val
0000b0  ebfffffe          BL       lwip_htonl
0000b4  e5840028          STR      r0,[r4,#0x28]
;;;558        dhcp->subnet_mask_given = 1;
0000b8  e3a00001          MOV      r0,#1
0000bc  e5c4000e          STRB     r0,[r4,#0xe]
0000c0  ea000001          B        |L11.204|
                  |L11.196|
;;;559      } else {
;;;560        dhcp->subnet_mask_given = 0;
0000c4  e3a00000          MOV      r0,#0
0000c8  e5c4000e          STRB     r0,[r4,#0xe]
                  |L11.204|
;;;561      }
;;;562    
;;;563      /* gateway router */
;;;564      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
0000cc  e59f001c          LDR      r0,|L11.240|
0000d0  e5d00007          LDRB     r0,[r0,#7]  ; dhcp_rx_options_given
0000d4  e3500000          CMP      r0,#0
0000d8  0a000003          BEQ      |L11.236|
;;;565        ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
0000dc  e59f1010          LDR      r1,|L11.244|
0000e0  e591001c          LDR      r0,[r1,#0x1c]  ; dhcp_rx_options_val
0000e4  ebfffffe          BL       lwip_htonl
0000e8  e584002c          STR      r0,[r4,#0x2c]
                  |L11.236|
;;;566      }
;;;567      
;;;568    #if LWIP_DNS
;;;569      /* DNS servers */
;;;570      n = 0;
;;;571      while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
;;;572        ip_addr_t dns_addr;
;;;573        ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
;;;574        dns_setserver(n, &dns_addr);
;;;575        n++;
;;;576      }
;;;577    #endif /* LWIP_DNS */
;;;578    }
0000ec  e8bd8070          POP      {r4-r6,pc}
;;;579    
                          ENDP

                  |L11.240|
                          DCD      dhcp_rx_options_given
                  |L11.244|
                          DCD      dhcp_rx_options_val

                          AREA ||i.dhcp_handle_nak||, CODE, READONLY, ALIGN=2

                  dhcp_handle_nak PROC
;;;196    static void
;;;197    dhcp_handle_nak(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;198    {
000004  e1a04000          MOV      r4,r0
;;;199      struct dhcp *dhcp = netif->dhcp;
000008  e5945020          LDR      r5,[r4,#0x20]
;;;200      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
;;;201        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;202      /* Set the interface down since the address must no longer be used, as per RFC2131 */
;;;203      netif_set_down(netif);
00000c  e1a00004          MOV      r0,r4
000010  ebfffffe          BL       netif_set_down
;;;204      /* remove IP address from interface */
;;;205      netif_set_ipaddr(netif, IP_ADDR_ANY);
000014  e59f1034          LDR      r1,|L12.80|
000018  e1a00004          MOV      r0,r4
00001c  ebfffffe          BL       netif_set_ipaddr
;;;206      netif_set_gw(netif, IP_ADDR_ANY);
000020  e59f1028          LDR      r1,|L12.80|
000024  e1a00004          MOV      r0,r4
000028  ebfffffe          BL       netif_set_gw
;;;207      netif_set_netmask(netif, IP_ADDR_ANY); 
00002c  e59f101c          LDR      r1,|L12.80|
000030  e1a00004          MOV      r0,r4
000034  ebfffffe          BL       netif_set_netmask
;;;208      /* Change to a defined state */
;;;209      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
000038  e3a0100c          MOV      r1,#0xc
00003c  e1a00005          MOV      r0,r5
000040  ebfffffe          BL       dhcp_set_state
;;;210      /* We can immediately restart discovery */
;;;211      dhcp_discover(netif);
000044  e1a00004          MOV      r0,r4
000048  ebfffffe          BL       dhcp_discover
;;;212    }
00004c  e8bd8070          POP      {r4-r6,pc}
;;;213    
                          ENDP

                  |L12.80|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_handle_offer||, CODE, READONLY, ALIGN=2

                  dhcp_handle_offer PROC
;;;251    static void
;;;252    dhcp_handle_offer(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;253    {
000004  e1a05000          MOV      r5,r0
;;;254      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;255      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
;;;256        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;257      /* obtain the server address */
;;;258      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
00000c  e59f0034          LDR      r0,|L13.72|
000010  e5d00002          LDRB     r0,[r0,#2]  ; dhcp_rx_options_given
000014  e3500000          CMP      r0,#0
000018  0a000009          BEQ      |L13.68|
;;;259        ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
00001c  e59f1028          LDR      r1,|L13.76|
000020  e5910008          LDR      r0,[r1,#8]  ; dhcp_rx_options_val
000024  ebfffffe          BL       lwip_htonl
000028  e5840020          STR      r0,[r4,#0x20]
;;;260        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
;;;261          ip4_addr_get_u32(&dhcp->server_ip_addr)));
;;;262        /* remember offered address */
;;;263        ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
00002c  e5941008          LDR      r1,[r4,#8]
000030  e2810010          ADD      r0,r1,#0x10
000034  ebfffffe          BL       __aeabi_uread4
000038  e5840024          STR      r0,[r4,#0x24]
;;;264        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
;;;265          ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;266    
;;;267        dhcp_select(netif);
00003c  e1a00005          MOV      r0,r5
000040  ebfffffe          BL       dhcp_select
                  |L13.68|
;;;268      } else {
;;;269        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;270          ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
;;;271      }
;;;272    }
000044  e8bd8070          POP      {r4-r6,pc}
;;;273    
                          ENDP

                  |L13.72|
                          DCD      dhcp_rx_options_given
                  |L13.76|
                          DCD      dhcp_rx_options_val

                          AREA ||i.dhcp_inform||, CODE, READONLY, ALIGN=2

                  dhcp_inform PROC
;;;711    void
;;;712    dhcp_inform(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;713    {
000004  e24dd040          SUB      sp,sp,#0x40
000008  e1a04000          MOV      r4,r0
;;;714      struct dhcp dhcp;
;;;715      err_t result = ERR_OK;
00000c  e3a06000          MOV      r6,#0
;;;716      struct udp_pcb *pcb;
;;;717    
;;;718      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
000010  e1a00000          MOV      r0,r0
000014  e3540000          CMP      r4,#0
000018  1a000008          BNE      |L14.64|
00001c  e1a00000          MOV      r0,r0
000020  e28f3f4a          ADR      r3,|L14.336|
000024  e59f2140          LDR      r2,|L14.364|
000028  e28f1d05          ADR      r1,|L14.368|
00002c  e28f0f53          ADR      r0,|L14.384|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
                  |L14.56|
;;;719    
;;;720      memset(&dhcp, 0, sizeof(struct dhcp));
;;;721      dhcp_set_state(&dhcp, DHCP_INFORM);
;;;722    
;;;723      if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
;;;724        /* re-use existing pcb */
;;;725        pcb = netif->dhcp->pcb;
;;;726      } else {
;;;727        pcb = udp_new();
;;;728        if (pcb == NULL) {
;;;729          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
;;;730          return;
;;;731        }
;;;732        dhcp.pcb = pcb;
;;;733        ip_set_option(dhcp.pcb, SOF_BROADCAST);
;;;734        udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;735        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
;;;736      }
;;;737      /* create and initialize the DHCP message header */
;;;738      result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
;;;739      if (result == ERR_OK) {
;;;740        dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;741        dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
;;;742    
;;;743        dhcp_option_trailer(&dhcp);
;;;744    
;;;745        pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
;;;746    
;;;747        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;748        udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;749        dhcp_delete_msg(&dhcp);
;;;750      } else {
;;;751        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
;;;752      }
;;;753    
;;;754      if (dhcp.pcb != NULL) {
;;;755        /* otherwise, the existing pcb was used */
;;;756        udp_remove(dhcp.pcb);
;;;757      }
;;;758    }
000038  e28dd040          ADD      sp,sp,#0x40
00003c  e8bd8070          POP      {r4-r6,pc}
                  |L14.64|
000040  e1a00000          MOV      r0,r0                 ;718
000044  e3a0103c          MOV      r1,#0x3c              ;720
000048  e28d0004          ADD      r0,sp,#4              ;720
00004c  ebfffffe          BL       __aeabi_memclr4
000050  e3a01008          MOV      r1,#8                 ;721
000054  e28d0004          ADD      r0,sp,#4              ;721
000058  ebfffffe          BL       dhcp_set_state
00005c  e5940020          LDR      r0,[r4,#0x20]         ;723
000060  e3500000          CMP      r0,#0                 ;723
000064  0a000006          BEQ      |L14.132|
000068  e5940020          LDR      r0,[r4,#0x20]         ;723
00006c  e5900004          LDR      r0,[r0,#4]            ;723
000070  e3500000          CMP      r0,#0                 ;723
000074  0a000002          BEQ      |L14.132|
000078  e5940020          LDR      r0,[r4,#0x20]         ;725
00007c  e5905004          LDR      r5,[r0,#4]            ;725
000080  ea00000e          B        |L14.192|
                  |L14.132|
000084  ebfffffe          BL       udp_new
000088  e1a05000          MOV      r5,r0                 ;727
00008c  e3550000          CMP      r5,#0                 ;728
000090  1a000000          BNE      |L14.152|
000094  eaffffe7          B        |L14.56|
                  |L14.152|
000098  e58d5008          STR      r5,[sp,#8]            ;732
00009c  e59d0008          LDR      r0,[sp,#8]            ;733
0000a0  e5d00008          LDRB     r0,[r0,#8]            ;733
0000a4  e3800020          ORR      r0,r0,#0x20           ;733
0000a8  e59d1008          LDR      r1,[sp,#8]            ;733
0000ac  e5c10008          STRB     r0,[r1,#8]            ;733
0000b0  e3a02044          MOV      r2,#0x44              ;734
0000b4  e59f10ec          LDR      r1,|L14.424|
0000b8  e59d0008          LDR      r0,[sp,#8]            ;734
0000bc  ebfffffe          BL       udp_bind
                  |L14.192|
0000c0  e3a02008          MOV      r2,#8                 ;738
0000c4  e28d1004          ADD      r1,sp,#4              ;738
0000c8  e1a00004          MOV      r0,r4                 ;738
0000cc  ebfffffe          BL       dhcp_create_msg
0000d0  e1a06000          MOV      r6,r0                 ;738
0000d4  e3560000          CMP      r6,#0                 ;739
0000d8  1a000015          BNE      |L14.308|
0000dc  e3a02002          MOV      r2,#2                 ;740
0000e0  e3a01039          MOV      r1,#0x39              ;740
0000e4  e28d0004          ADD      r0,sp,#4              ;740
0000e8  ebfffffe          BL       dhcp_option
0000ec  e1d412b4          LDRH     r1,[r4,#0x24]         ;741
0000f0  e28d0004          ADD      r0,sp,#4              ;741
0000f4  ebfffffe          BL       dhcp_option_short
0000f8  e28d0004          ADD      r0,sp,#4              ;743
0000fc  ebfffffe          BL       dhcp_option_trailer
000100  e1dd21bc          LDRH     r2,[sp,#0x1c]         ;745
000104  e28220f0          ADD      r2,r2,#0xf0           ;745
000108  e3c21801          BIC      r1,r2,#0x10000        ;745
00010c  e59d0014          LDR      r0,[sp,#0x14]         ;745
000110  ebfffffe          BL       pbuf_realloc
000114  e58d4000          STR      r4,[sp,#0]            ;748
000118  e3a03043          MOV      r3,#0x43              ;748
00011c  e59f2088          LDR      r2,|L14.428|
000120  e1a00005          MOV      r0,r5                 ;748
000124  e59d1014          LDR      r1,[sp,#0x14]         ;748
000128  ebfffffe          BL       udp_sendto_if
00012c  e28d0004          ADD      r0,sp,#4              ;749
000130  ebfffffe          BL       dhcp_delete_msg
                  |L14.308|
000134  e59d0008          LDR      r0,[sp,#8]            ;754
000138  e3500000          CMP      r0,#0                 ;754
00013c  0a000001          BEQ      |L14.328|
000140  e59d0008          LDR      r0,[sp,#8]            ;756
000144  ebfffffe          BL       udp_remove
                  |L14.328|
000148  e1a00000          MOV      r0,r0
00014c  eaffffb9          B        |L14.56|
;;;759    
                          ENDP

                  |L14.336|
000150  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000154  2d312e34
000158  2e315c73
00015c  72635c63
000160  6f72655c
000164  64686370
000168  2e6300  
00016b  00                DCB      0
                  |L14.364|
                          DCD      0x000002ce
                  |L14.368|
000170  6e657469          DCB      "netif != NULL",0
000174  6620213d
000178  204e554c
00017c  4c00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L14.384|
000180  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000184  7274696f
000188  6e202225
00018c  73222066
000190  61696c65
000194  64206174
000198  206c696e
00019c  65202564
0001a0  20696e20
0001a4  25730a00
                  |L14.424|
                          DCD      ip_addr_any
                  |L14.428|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_network_changed||, CODE, READONLY, ALIGN=2

                  dhcp_network_changed PROC
;;;765    void
;;;766    dhcp_network_changed(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;767    {
000004  e1a05000          MOV      r5,r0
;;;768      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;769      if (!dhcp)
00000c  e3540000          CMP      r4,#0
000010  1a000000          BNE      |L15.24|
                  |L15.20|
;;;770        return;
;;;771      switch (dhcp->state) {
;;;772      case DHCP_REBINDING:
;;;773      case DHCP_RENEWING:
;;;774      case DHCP_BOUND:
;;;775      case DHCP_REBOOTING:
;;;776        netif_set_down(netif);
;;;777        dhcp->tries = 0;
;;;778        dhcp_reboot(netif);
;;;779        break;
;;;780      case DHCP_OFF:
;;;781        /* stay off */
;;;782        break;
;;;783      default:
;;;784        dhcp->tries = 0;
;;;785    #if LWIP_DHCP_AUTOIP_COOP
;;;786        if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;787          autoip_stop(netif);
;;;788          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;789        }
;;;790    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;791        dhcp_discover(netif);
;;;792        break;
;;;793      }
;;;794    }
000014  e8bd8070          POP      {r4-r6,pc}
                  |L15.24|
000018  e5d4000c          LDRB     r0,[r4,#0xc]          ;771
00001c  e3500004          CMP      r0,#4                 ;771
000020  0a00000a          BEQ      |L15.80|
000024  ca000004          BGT      |L15.60|
000028  e3500000          CMP      r0,#0                 ;771
00002c  0a000012          BEQ      |L15.124|
000030  e3500003          CMP      r0,#3                 ;771
000034  1a000012          BNE      |L15.132|
000038  ea000008          B        |L15.96|
                  |L15.60|
00003c  e3500005          CMP      r0,#5                 ;771
000040  0a000004          BEQ      |L15.88|
000044  e350000a          CMP      r0,#0xa               ;771
000048  1a00000d          BNE      |L15.132|
00004c  ea000002          B        |L15.92|
                  |L15.80|
000050  e1a00000          MOV      r0,r0                 ;772
000054  e1a00000          MOV      r0,r0                 ;773
                  |L15.88|
000058  e1a00000          MOV      r0,r0                 ;774
                  |L15.92|
00005c  e1a00000          MOV      r0,r0                 ;775
                  |L15.96|
000060  e1a00005          MOV      r0,r5                 ;776
000064  ebfffffe          BL       netif_set_down
000068  e3a00000          MOV      r0,#0                 ;777
00006c  e5c4000d          STRB     r0,[r4,#0xd]          ;777
000070  e1a00005          MOV      r0,r5                 ;778
000074  ebfffffe          BL       dhcp_reboot
000078  ea000007          B        |L15.156|
                  |L15.124|
00007c  e1a00000          MOV      r0,r0                 ;780
000080  ea000005          B        |L15.156|
                  |L15.132|
000084  e1a00000          MOV      r0,r0                 ;783
000088  e3a00000          MOV      r0,#0                 ;784
00008c  e5c4000d          STRB     r0,[r4,#0xd]          ;784
000090  e1a00005          MOV      r0,r5                 ;791
000094  ebfffffe          BL       dhcp_discover
000098  e1a00000          MOV      r0,r0                 ;792
                  |L15.156|
00009c  e1a00000          MOV      r0,r0                 ;779
0000a0  e1a00000          MOV      r0,r0
0000a4  eaffffda          B        |L15.20|
;;;795    
                          ENDP


                          AREA ||i.dhcp_option||, CODE, READONLY, ALIGN=2

                  dhcp_option PROC
;;;1267   static void
;;;1268   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1269   {
000004  e1a04000          MOV      r4,r0
000008  e1a06001          MOV      r6,r1
00000c  e1a05002          MOV      r5,r2
;;;1270     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
000010  e1a00000          MOV      r0,r0
000014  e1d401b8          LDRH     r0,[r4,#0x18]
000018  e2800002          ADD      r0,r0,#2
00001c  e0800005          ADD      r0,r0,r5
000020  e3500044          CMP      r0,#0x44
000024  9a000006          BLS      |L16.68|
000028  e1a00000          MOV      r0,r0
00002c  e28f3050          ADR      r3,|L16.132|
000030  e59f2068          LDR      r2,|L16.160|
000034  e59f1068          LDR      r1,|L16.164|
000038  e28f0068          ADR      r0,|L16.168|
00003c  ebfffffe          BL       sysprintf
000040  e1a00000          MOV      r0,r0
                  |L16.68|
000044  e1a00000          MOV      r0,r0
;;;1271     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
000048  e1d401b8          LDRH     r0,[r4,#0x18]
00004c  e2801001          ADD      r1,r0,#1
000050  e3c11801          BIC      r1,r1,#0x10000
000054  e1c411b8          STRH     r1,[r4,#0x18]
000058  e5941014          LDR      r1,[r4,#0x14]
00005c  e28110f0          ADD      r1,r1,#0xf0
000060  e7c16000          STRB     r6,[r1,r0]
;;;1272     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
000064  e1d401b8          LDRH     r0,[r4,#0x18]
000068  e2801001          ADD      r1,r0,#1
00006c  e3c11801          BIC      r1,r1,#0x10000
000070  e1c411b8          STRH     r1,[r4,#0x18]
000074  e5941014          LDR      r1,[r4,#0x14]
000078  e28110f0          ADD      r1,r1,#0xf0
00007c  e7c15000          STRB     r5,[r1,r0]
;;;1273   }
000080  e8bd8070          POP      {r4-r6,pc}
;;;1274   /*
                          ENDP

                  |L16.132|
000084  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000088  2d312e34
00008c  2e315c73
000090  72635c63
000094  6f72655c
000098  64686370
00009c  2e6300  
00009f  00                DCB      0
                  |L16.160|
                          DCD      0x000004f6
                  |L16.164|
                          DCD      ||.conststring||
                  |L16.168|
0000a8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000ac  7274696f
0000b0  6e202225
0000b4  73222066
0000b8  61696c65
0000bc  64206174
0000c0  206c696e
0000c4  65202564
0000c8  20696e20
0000cc  25730a00

                          AREA ||i.dhcp_option_byte||, CODE, READONLY, ALIGN=2

                  dhcp_option_byte PROC
;;;1278   static void
;;;1279   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1280   {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;1281     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
00000c  e1a00000          MOV      r0,r0
000010  e1d401b8          LDRH     r0,[r4,#0x18]
000014  e3500044          CMP      r0,#0x44
000018  3a000006          BCC      |L17.56|
00001c  e1a00000          MOV      r0,r0
000020  e28f3034          ADR      r3,|L17.92|
000024  e59f204c          LDR      r2,|L17.120|
000028  e28f104c          ADR      r1,|L17.124|
00002c  e28f0084          ADR      r0,|L17.184|
000030  ebfffffe          BL       sysprintf
000034  e1a00000          MOV      r0,r0
                  |L17.56|
000038  e1a00000          MOV      r0,r0
;;;1282     dhcp->msg_out->options[dhcp->options_out_len++] = value;
00003c  e1d401b8          LDRH     r0,[r4,#0x18]
000040  e2801001          ADD      r1,r0,#1
000044  e3c11801          BIC      r1,r1,#0x10000
000048  e1c411b8          STRH     r1,[r4,#0x18]
00004c  e5941014          LDR      r1,[r4,#0x14]
000050  e28110f0          ADD      r1,r1,#0xf0
000054  e7c15000          STRB     r5,[r1,r0]
;;;1283   }
000058  e8bd8070          POP      {r4-r6,pc}
;;;1284   
                          ENDP

                  |L17.92|
00005c  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000060  2d312e34
000064  2e315c73
000068  72635c63
00006c  6f72655c
000070  64686370
000074  2e6300  
000077  00                DCB      0
                  |L17.120|
                          DCD      0x00000501
                  |L17.124|
00007c  64686370          DCB      "dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_"
000080  5f6f7074
000084  696f6e5f
000088  62797465
00008c  3a206468
000090  63702d3e
000094  6f707469
000098  6f6e735f
00009c  6f75745f
0000a0  6c656e20
0000a4  3c204448
0000a8  43505f4f
0000ac  5054494f
0000b0  4e535f  
0000b3  4c454e00          DCB      "LEN",0
0000b7  00                DCB      0
                  |L17.184|
0000b8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000bc  7274696f
0000c0  6e202225
0000c4  73222066
0000c8  61696c65
0000cc  64206174
0000d0  206c696e
0000d4  65202564
0000d8  20696e20
0000dc  25730a00

                          AREA ||i.dhcp_option_long||, CODE, READONLY, ALIGN=2

                  dhcp_option_long PROC
;;;1293   static void
;;;1294   dhcp_option_long(struct dhcp *dhcp, u32_t value)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1295   {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;1296     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
00000c  e1a00000          MOV      r0,r0
000010  e1d401b8          LDRH     r0,[r4,#0x18]
000014  e2800004          ADD      r0,r0,#4
000018  e3500044          CMP      r0,#0x44
00001c  9a000006          BLS      |L18.60|
000020  e1a00000          MOV      r0,r0
000024  e28f309c          ADR      r3,|L18.200|
000028  e3a02e51          MOV      r2,#0x510
00002c  e28f10b0          ADR      r1,|L18.228|
000030  e28f00ec          ADR      r0,|L18.292|
000034  ebfffffe          BL       sysprintf
000038  e1a00000          MOV      r0,r0
                  |L18.60|
00003c  e1a00000          MOV      r0,r0
;;;1297     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
000040  e1a00c25          LSR      r0,r5,#24
000044  e1d411b8          LDRH     r1,[r4,#0x18]
000048  e2812001          ADD      r2,r1,#1
00004c  e3c22801          BIC      r2,r2,#0x10000
000050  e1c421b8          STRH     r2,[r4,#0x18]
000054  e5942014          LDR      r2,[r4,#0x14]
000058  e28220f0          ADD      r2,r2,#0xf0
00005c  e7c20001          STRB     r0,[r2,r1]
;;;1298     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
000060  e20508ff          AND      r0,r5,#0xff0000
000064  e1a00820          LSR      r0,r0,#16
000068  e1d411b8          LDRH     r1,[r4,#0x18]
00006c  e2812001          ADD      r2,r1,#1
000070  e3c22801          BIC      r2,r2,#0x10000
000074  e1c421b8          STRH     r2,[r4,#0x18]
000078  e5942014          LDR      r2,[r4,#0x14]
00007c  e28220f0          ADD      r2,r2,#0xf0
000080  e7c20001          STRB     r0,[r2,r1]
;;;1299     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000084  e2050cff          AND      r0,r5,#0xff00
000088  e1a00420          LSR      r0,r0,#8
00008c  e1d411b8          LDRH     r1,[r4,#0x18]
000090  e2812001          ADD      r2,r1,#1
000094  e3c22801          BIC      r2,r2,#0x10000
000098  e1c421b8          STRH     r2,[r4,#0x18]
00009c  e5942014          LDR      r2,[r4,#0x14]
0000a0  e28220f0          ADD      r2,r2,#0xf0
0000a4  e7c20001          STRB     r0,[r2,r1]
;;;1300     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
0000a8  e1d411b8          LDRH     r1,[r4,#0x18]
0000ac  e2812001          ADD      r2,r1,#1
0000b0  e3c22801          BIC      r2,r2,#0x10000
0000b4  e1c421b8          STRH     r2,[r4,#0x18]
0000b8  e5942014          LDR      r2,[r4,#0x14]
0000bc  e28220f0          ADD      r2,r2,#0xf0
0000c0  e7c25001          STRB     r5,[r2,r1]
;;;1301   }
0000c4  e8bd8070          POP      {r4-r6,pc}
;;;1302   
                          ENDP

                  |L18.200|
0000c8  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0000cc  2d312e34
0000d0  2e315c73
0000d4  72635c63
0000d8  6f72655c
0000dc  64686370
0000e0  2e6300  
0000e3  00                DCB      0
                  |L18.228|
0000e4  64686370          DCB      "dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPT"
0000e8  5f6f7074
0000ec  696f6e5f
0000f0  6c6f6e67
0000f4  3a206468
0000f8  63702d3e
0000fc  6f707469
000100  6f6e735f
000104  6f75745f
000108  6c656e20
00010c  2b203420
000110  3c3d2044
000114  4843505f
000118  4f5054  
00011b  494f4e53          DCB      "IONS_LEN",0
00011f  5f4c454e
000123  00      
                  |L18.292|
000124  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000128  7274696f
00012c  6e202225
000130  73222066
000134  61696c65
000138  64206174
00013c  206c696e
000140  65202564
000144  20696e20
000148  25730a00

                          AREA ||i.dhcp_option_short||, CODE, READONLY, ALIGN=2

                  dhcp_option_short PROC
;;;1285   static void
;;;1286   dhcp_option_short(struct dhcp *dhcp, u16_t value)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1287   {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;1288     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
00000c  e1a00000          MOV      r0,r0
000010  e1d401b8          LDRH     r0,[r4,#0x18]
000014  e2800002          ADD      r0,r0,#2
000018  e3500044          CMP      r0,#0x44
00001c  9a000006          BLS      |L19.60|
000020  e1a00000          MOV      r0,r0
000024  e28f3058          ADR      r3,|L19.132|
000028  e59f2070          LDR      r2,|L19.160|
00002c  e59f1070          LDR      r1,|L19.164|
000030  e28f0070          ADR      r0,|L19.168|
000034  ebfffffe          BL       sysprintf
000038  e1a00000          MOV      r0,r0
                  |L19.60|
00003c  e1a00000          MOV      r0,r0
;;;1289     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
000040  e2050cff          AND      r0,r5,#0xff00
000044  e1a00420          LSR      r0,r0,#8
000048  e1d411b8          LDRH     r1,[r4,#0x18]
00004c  e2812001          ADD      r2,r1,#1
000050  e3c22801          BIC      r2,r2,#0x10000
000054  e1c421b8          STRH     r2,[r4,#0x18]
000058  e5942014          LDR      r2,[r4,#0x14]
00005c  e28220f0          ADD      r2,r2,#0xf0
000060  e7c20001          STRB     r0,[r2,r1]
;;;1290     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
000064  e1d411b8          LDRH     r1,[r4,#0x18]
000068  e2812001          ADD      r2,r1,#1
00006c  e3c22801          BIC      r2,r2,#0x10000
000070  e1c421b8          STRH     r2,[r4,#0x18]
000074  e5942014          LDR      r2,[r4,#0x14]
000078  e28220f0          ADD      r2,r2,#0xf0
00007c  e7c25001          STRB     r5,[r2,r1]
;;;1291   }
000080  e8bd8070          POP      {r4-r6,pc}
;;;1292   
                          ENDP

                  |L19.132|
000084  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000088  2d312e34
00008c  2e315c73
000090  72635c63
000094  6f72655c
000098  64686370
00009c  2e6300  
00009f  00                DCB      0
                  |L19.160|
                          DCD      0x00000508
                  |L19.164|
                          DCD      ||.conststring||+0x48
                  |L19.168|
0000a8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000ac  7274696f
0000b0  6e202225
0000b4  73222066
0000b8  61696c65
0000bc  64206174
0000c0  206c696e
0000c4  65202564
0000c8  20696e20
0000cc  25730a00

                          AREA ||i.dhcp_option_trailer||, CODE, READONLY, ALIGN=2

                  dhcp_option_trailer PROC
;;;1755   static void
;;;1756   dhcp_option_trailer(struct dhcp *dhcp)
000000  e92d4010          PUSH     {r4,lr}
;;;1757   {
000004  e1a04000          MOV      r4,r0
;;;1758     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
000008  e1a00000          MOV      r0,r0
00000c  e3540000          CMP      r4,#0
000010  1a000007          BNE      |L20.52|
000014  e1a00000          MOV      r0,r0
000018  e28f30ec          ADR      r3,|L20.268|
00001c  e59f2104          LDR      r2,|L20.296|
000020  e28f1f41          ADR      r1,|L20.300|
000024  e28f0f49          ADR      r0,|L20.336|
000028  ebfffffe          BL       sysprintf
00002c  e1a00000          MOV      r0,r0
                  |L20.48|
;;;1759     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
;;;1760     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
;;;1761     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
;;;1762     /* packet is too small, or not 4 byte aligned? */
;;;1763     while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
;;;1764            (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
;;;1765       /* add a fill/padding byte */
;;;1766       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
;;;1767     }
;;;1768   }
000030  e8bd8010          POP      {r4,pc}
                  |L20.52|
000034  e1a00000          MOV      r0,r0                 ;1758
000038  e1a00000          MOV      r0,r0                 ;1759
00003c  e5940014          LDR      r0,[r4,#0x14]         ;1759
000040  e3500000          CMP      r0,#0                 ;1759
000044  1a000006          BNE      |L20.100|
000048  e1a00000          MOV      r0,r0                 ;1759
00004c  e28f30b8          ADR      r3,|L20.268|
000050  e59f2120          LDR      r2,|L20.376|
000054  e28f1e12          ADR      r1,|L20.380|
000058  e28f00f0          ADR      r0,|L20.336|
00005c  ebfffffe          BL       sysprintf
000060  e1a00000          MOV      r0,r0                 ;1759
                  |L20.100|
000064  e1a00000          MOV      r0,r0                 ;1759
000068  e1a00000          MOV      r0,r0                 ;1760
00006c  e1d401b8          LDRH     r0,[r4,#0x18]         ;1760
000070  e3500044          CMP      r0,#0x44              ;1760
000074  3a000006          BCC      |L20.148|
000078  e1a00000          MOV      r0,r0                 ;1760
00007c  e28f3088          ADR      r3,|L20.268|
000080  e3a02e6e          MOV      r2,#0x6e0             ;1760
000084  e28f1f47          ADR      r1,|L20.424|
000088  e28f00c0          ADR      r0,|L20.336|
00008c  ebfffffe          BL       sysprintf
000090  e1a00000          MOV      r0,r0                 ;1760
                  |L20.148|
000094  e1a00000          MOV      r0,r0                 ;1760
000098  e3a000ff          MOV      r0,#0xff              ;1761
00009c  e1d411b8          LDRH     r1,[r4,#0x18]         ;1761
0000a0  e2812001          ADD      r2,r1,#1              ;1761
0000a4  e3c22801          BIC      r2,r2,#0x10000        ;1761
0000a8  e1c421b8          STRH     r2,[r4,#0x18]         ;1761
0000ac  e5942014          LDR      r2,[r4,#0x14]         ;1761
0000b0  e28220f0          ADD      r2,r2,#0xf0           ;1761
0000b4  e7c20001          STRB     r0,[r2,r1]            ;1761
0000b8  ea000007          B        |L20.220|
                  |L20.188|
0000bc  e3a00000          MOV      r0,#0                 ;1766
0000c0  e1d411b8          LDRH     r1,[r4,#0x18]         ;1766
0000c4  e2812001          ADD      r2,r1,#1              ;1766
0000c8  e3c22801          BIC      r2,r2,#0x10000        ;1766
0000cc  e1c421b8          STRH     r2,[r4,#0x18]         ;1766
0000d0  e5942014          LDR      r2,[r4,#0x14]         ;1766
0000d4  e28220f0          ADD      r2,r2,#0xf0           ;1766
0000d8  e7c20001          STRB     r0,[r2,r1]            ;1766
                  |L20.220|
0000dc  e1d401b8          LDRH     r0,[r4,#0x18]         ;1763
0000e0  e3500044          CMP      r0,#0x44              ;1763
0000e4  3a000003          BCC      |L20.248|
0000e8  e5d40018          LDRB     r0,[r4,#0x18]         ;1763
0000ec  e2000003          AND      r0,r0,#3              ;1763
0000f0  e3500000          CMP      r0,#0                 ;1763
0000f4  0a000002          BEQ      |L20.260|
                  |L20.248|
0000f8  e1d401b8          LDRH     r0,[r4,#0x18]         ;1764
0000fc  e3500044          CMP      r0,#0x44              ;1764
000100  3affffed          BCC      |L20.188|
                  |L20.260|
000104  e1a00000          MOV      r0,r0
000108  eaffffc8          B        |L20.48|
;;;1769   
                          ENDP

                  |L20.268|
00010c  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
000110  2d312e34
000114  2e315c73
000118  72635c63
00011c  6f72655c
000120  64686370
000124  2e6300  
000127  00                DCB      0
                  |L20.296|
                          DCD      0x000006de
                  |L20.300|
00012c  64686370          DCB      "dhcp_option_trailer: dhcp != NULL",0
000130  5f6f7074
000134  696f6e5f
000138  74726169
00013c  6c65723a
000140  20646863
000144  7020213d
000148  204e554c
00014c  4c00    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L20.336|
000150  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000154  7274696f
000158  6e202225
00015c  73222066
000160  61696c65
000164  64206174
000168  206c696e
00016c  65202564
000170  20696e20
000174  25730a00
                  |L20.376|
                          DCD      0x000006df
                  |L20.380|
00017c  64686370          DCB      "dhcp_option_trailer: dhcp->msg_out != NULL\n",0
000180  5f6f7074
000184  696f6e5f
000188  74726169
00018c  6c65723a
000190  20646863
000194  702d3e6d
000198  73675f6f
00019c  75742021
0001a0  3d204e55
0001a4  4c4c0a00
                  |L20.424|
0001a8  64686370          DCB      "dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIO"
0001ac  5f6f7074
0001b0  696f6e5f
0001b4  74726169
0001b8  6c65723a
0001bc  20646863
0001c0  702d3e6f
0001c4  7074696f
0001c8  6e735f6f
0001cc  75745f6c
0001d0  656e203c
0001d4  20444843
0001d8  505f4f50
0001dc  54494f  
0001df  4e535f4c          DCB      "NS_LEN\n",0
0001e3  454e0a00
0001e7  00                DCB      0

                          AREA ||i.dhcp_parse_reply||, CODE, READONLY, ALIGN=2

                  dhcp_parse_reply PROC
;;;1336   static err_t
;;;1337   dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1338   {
000004  e24dd024          SUB      sp,sp,#0x24
000008  e1a09001          MOV      r9,r1
;;;1339     u8_t *options;
;;;1340     u16_t offset;
;;;1341     u16_t offset_max;
;;;1342     u16_t options_idx;
;;;1343     u16_t options_idx_max;
;;;1344     struct pbuf *q;
;;;1345     int parse_file_as_options = 0;
00000c  e3a00000          MOV      r0,#0
000010  e58d0018          STR      r0,[sp,#0x18]
;;;1346     int parse_sname_as_options = 0;
000014  e58d0014          STR      r0,[sp,#0x14]
;;;1347   
;;;1348     /* clear received options */
;;;1349     dhcp_clear_all_options(dhcp);
000018  e3a0100a          MOV      r1,#0xa
00001c  e59f04b8          LDR      r0,|L21.1244|
000020  ebfffffe          BL       __aeabi_memclr4
;;;1350     /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
;;;1351     if (p->len < DHCP_SNAME_OFS) {
000024  e1d900ba          LDRH     r0,[r9,#0xa]
000028  e350002c          CMP      r0,#0x2c
00002c  aa000002          BGE      |L21.60|
;;;1352       return ERR_BUF;
000030  e3e00001          MVN      r0,#1
                  |L21.52|
000034  e28dd02c          ADD      sp,sp,#0x2c
;;;1353     }
;;;1354     dhcp->msg_in = (struct dhcp_msg *)p->payload;
;;;1355   #if LWIP_DHCP_BOOTP_FILE
;;;1356     /* clear boot file name */
;;;1357     dhcp->boot_file_name[0] = 0;
;;;1358   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1359   
;;;1360     /* parse options */
;;;1361   
;;;1362     /* start with options field */
;;;1363     options_idx = DHCP_OPTIONS_OFS;
;;;1364     /* parse options to the end of the received packet */
;;;1365     options_idx_max = p->tot_len;
;;;1366   again:
;;;1367     q = p;
;;;1368     while((q != NULL) && (options_idx >= q->len)) {
;;;1369       options_idx -= q->len;
;;;1370       options_idx_max -= q->len;
;;;1371       q = q->next;
;;;1372     }
;;;1373     if (q == NULL) {
;;;1374       return ERR_BUF;
;;;1375     }
;;;1376     offset = options_idx;
;;;1377     offset_max = options_idx_max;
;;;1378     options = (u8_t*)q->payload;
;;;1379     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1380     while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
;;;1381       u8_t op = options[offset];
;;;1382       u8_t len;
;;;1383       u8_t decode_len = 0;
;;;1384       int decode_idx = -1;
;;;1385       u16_t val_offset = offset + 2;
;;;1386       /* len byte might be in the next pbuf */
;;;1387       if (offset + 1 < q->len) {
;;;1388         len = options[offset + 1];
;;;1389       } else {
;;;1390         len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
;;;1391       }
;;;1392       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1393       decode_len = len;
;;;1394       switch(op) {
;;;1395         /* case(DHCP_OPTION_END): handled above */
;;;1396         case(DHCP_OPTION_PAD):
;;;1397           /* special option: no len encoded */
;;;1398           decode_len = len = 0;
;;;1399           /* will be increased below */
;;;1400           offset--;
;;;1401           break;
;;;1402         case(DHCP_OPTION_SUBNET_MASK):
;;;1403           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1404           decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
;;;1405           break;
;;;1406         case(DHCP_OPTION_ROUTER):
;;;1407           decode_len = 4; /* only copy the first given router */
;;;1408           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1409           decode_idx = DHCP_OPTION_IDX_ROUTER;
;;;1410           break;
;;;1411         case(DHCP_OPTION_DNS_SERVER):
;;;1412           /* special case: there might be more than one server */
;;;1413           LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1414           /* limit number of DNS servers */
;;;1415           decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
;;;1416           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1417           decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
;;;1418           break;
;;;1419         case(DHCP_OPTION_LEASE_TIME):
;;;1420           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1421           decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
;;;1422           break;
;;;1423         case(DHCP_OPTION_OVERLOAD):
;;;1424           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1425           decode_idx = DHCP_OPTION_IDX_OVERLOAD;
;;;1426           break;
;;;1427         case(DHCP_OPTION_MESSAGE_TYPE):
;;;1428           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1429           decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
;;;1430           break;
;;;1431         case(DHCP_OPTION_SERVER_ID):
;;;1432           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1433           decode_idx = DHCP_OPTION_IDX_SERVER_ID;
;;;1434           break;
;;;1435         case(DHCP_OPTION_T1):
;;;1436           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1437           decode_idx = DHCP_OPTION_IDX_T1;
;;;1438           break;
;;;1439         case(DHCP_OPTION_T2):
;;;1440           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1441           decode_idx = DHCP_OPTION_IDX_T2;
;;;1442           break;
;;;1443         default:
;;;1444           decode_len = 0;
;;;1445           LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
;;;1446           break;
;;;1447       }
;;;1448       offset += len + 2;
;;;1449       if (decode_len > 0) {
;;;1450         u32_t value = 0;
;;;1451         u16_t copy_len;
;;;1452   decode_next:
;;;1453         LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
;;;1454         if (!dhcp_option_given(dhcp, decode_idx)) {
;;;1455           copy_len = LWIP_MIN(decode_len, 4);
;;;1456           pbuf_copy_partial(q, &value, copy_len, val_offset);
;;;1457           if (decode_len > 4) {
;;;1458             /* decode more than one u32_t */
;;;1459             LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
;;;1460             dhcp_got_option(dhcp, decode_idx);
;;;1461             dhcp_set_option_value(dhcp, decode_idx, htonl(value));
;;;1462             decode_len -= 4;
;;;1463             val_offset += 4;
;;;1464             decode_idx++;
;;;1465             goto decode_next;
;;;1466           } else if (decode_len == 4) {
;;;1467             value = ntohl(value);
;;;1468           } else {
;;;1469             LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
;;;1470             value = ((u8_t*)&value)[0];
;;;1471           }
;;;1472           dhcp_got_option(dhcp, decode_idx);
;;;1473           dhcp_set_option_value(dhcp, decode_idx, value);
;;;1474         }
;;;1475       }
;;;1476       if (offset >= q->len) {
;;;1477         offset -= q->len;
;;;1478         offset_max -= q->len;
;;;1479         if ((offset < offset_max) && offset_max) {
;;;1480           q = q->next;
;;;1481           LWIP_ASSERT("next pbuf was null", q);
;;;1482           options = (u8_t*)q->payload;
;;;1483         } else {
;;;1484           // We've run out of bytes, probably no end marker. Don't proceed.
;;;1485           break;
;;;1486         }
;;;1487       }
;;;1488     }
;;;1489     /* is this an overloaded message? */
;;;1490     if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
;;;1491       u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1492       dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1493       if (overload == DHCP_OVERLOAD_FILE) {
;;;1494         parse_file_as_options = 1;
;;;1495         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
;;;1496       } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1497         parse_sname_as_options = 1;
;;;1498         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
;;;1499       } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
;;;1500         parse_sname_as_options = 1;
;;;1501         parse_file_as_options = 1;
;;;1502         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
;;;1503       } else {
;;;1504         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
;;;1505       }
;;;1506   #if LWIP_DHCP_BOOTP_FILE
;;;1507       if (!parse_file_as_options) {
;;;1508         /* only do this for ACK messages */
;;;1509         if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
;;;1510           (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
;;;1511         /* copy bootp file name, don't care for sname (server hostname) */
;;;1512         pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
;;;1513         /* make sure the string is really NULL-terminated */
;;;1514         dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
;;;1515       }
;;;1516   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1517     }
;;;1518     if (parse_file_as_options) {
;;;1519       /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
;;;1520       parse_file_as_options = 0;
;;;1521       options_idx = DHCP_FILE_OFS;
;;;1522       options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
;;;1523       goto again;
;;;1524     } else if (parse_sname_as_options) {
;;;1525       parse_sname_as_options = 0;
;;;1526       options_idx = DHCP_SNAME_OFS;
;;;1527       options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
;;;1528       goto again;
;;;1529     }
;;;1530     return ERR_OK;
;;;1531   }
000038  e8bd8ff0          POP      {r4-r11,pc}
                  |L21.60|
00003c  e5991004          LDR      r1,[r9,#4]            ;1354
000040  e59d0024          LDR      r0,[sp,#0x24]         ;1354
000044  e5801008          STR      r1,[r0,#8]            ;1354
000048  e3a0b0f0          MOV      r11,#0xf0             ;1363
00004c  e1d900b8          LDRH     r0,[r9,#8]            ;1365
000050  e58d001c          STR      r0,[sp,#0x1c]         ;1365
000054  e1a00000          MOV      r0,r0                 ;1366
                  |L21.88|
000058  e1a04009          MOV      r4,r9                 ;1367
00005c  ea00000a          B        |L21.140|
                  |L21.96|
000060  e1d400ba          LDRH     r0,[r4,#0xa]          ;1369
000064  e04b0000          SUB      r0,r11,r0             ;1369
000068  e1a0b800          LSL      r11,r0,#16            ;1369
00006c  e1a0b82b          LSR      r11,r11,#16           ;1369
000070  e1d410ba          LDRH     r1,[r4,#0xa]          ;1370
000074  e59d001c          LDR      r0,[sp,#0x1c]         ;1370
000078  e0400001          SUB      r0,r0,r1              ;1370
00007c  e1a00800          LSL      r0,r0,#16             ;1370
000080  e1a00820          LSR      r0,r0,#16             ;1370
000084  e58d001c          STR      r0,[sp,#0x1c]         ;1370
000088  e5944000          LDR      r4,[r4,#0]            ;1371
                  |L21.140|
00008c  e3540000          CMP      r4,#0                 ;1368
000090  0a000002          BEQ      |L21.160|
000094  e1d400ba          LDRH     r0,[r4,#0xa]          ;1368
000098  e150000b          CMP      r0,r11                ;1368
00009c  daffffef          BLE      |L21.96|
                  |L21.160|
0000a0  e3540000          CMP      r4,#0                 ;1373
0000a4  1a000001          BNE      |L21.176|
0000a8  e3e00001          MVN      r0,#1                 ;1374
0000ac  eaffffe0          B        |L21.52|
                  |L21.176|
0000b0  e1a0700b          MOV      r7,r11                ;1376
0000b4  e59da01c          LDR      r10,[sp,#0x1c]        ;1377
0000b8  e5940004          LDR      r0,[r4,#4]            ;1378
0000bc  e58d0020          STR      r0,[sp,#0x20]         ;1378
0000c0  ea000199          B        |L21.1836|
                  |L21.196|
0000c4  e59d0020          LDR      r0,[sp,#0x20]         ;1381
0000c8  e7d00007          LDRB     r0,[r0,r7]            ;1381
0000cc  e58d0010          STR      r0,[sp,#0x10]         ;1381
0000d0  e3a06000          MOV      r6,#0                 ;1383
0000d4  e3e08000          MVN      r8,#0                 ;1384
0000d8  e2870002          ADD      r0,r7,#2              ;1385
0000dc  e0000828          AND      r0,r0,r8,LSR #16      ;1385
0000e0  e58d000c          STR      r0,[sp,#0xc]          ;1385
0000e4  e1d400ba          LDRH     r0,[r4,#0xa]          ;1387
0000e8  e2871001          ADD      r1,r7,#1              ;1387
0000ec  e1500001          CMP      r0,r1                 ;1387
0000f0  da000003          BLE      |L21.260|
0000f4  e2871001          ADD      r1,r7,#1              ;1388
0000f8  e59d0020          LDR      r0,[sp,#0x20]         ;1388
0000fc  e7d05001          LDRB     r5,[r0,r1]            ;1388
000100  ea000008          B        |L21.296|
                  |L21.260|
000104  e5940000          LDR      r0,[r4,#0]            ;1390
000108  e3500000          CMP      r0,#0                 ;1390
00010c  0a000003          BEQ      |L21.288|
000110  e5940000          LDR      r0,[r4,#0]            ;1390
000114  e5900004          LDR      r0,[r0,#4]            ;1390
000118  e5d00000          LDRB     r0,[r0,#0]            ;1390
00011c  ea000000          B        |L21.292|
                  |L21.288|
000120  e3a00000          MOV      r0,#0                 ;1390
                  |L21.292|
000124  e1a05000          MOV      r5,r0                 ;1390
                  |L21.296|
000128  e1a06005          MOV      r6,r5                 ;1393
00012c  e59d0010          LDR      r0,[sp,#0x10]         ;1394
000130  e3500034          CMP      r0,#0x34              ;1394
000134  0a000076          BEQ      |L21.788|
000138  ca00000c          BGT      |L21.368|
00013c  e3500003          CMP      r0,#3                 ;1394
000140  0a00002b          BEQ      |L21.500|
000144  ca000004          BGT      |L21.348|
000148  e3500000          CMP      r0,#0                 ;1394
00014c  0a000010          BEQ      |L21.404|
000150  e3500001          CMP      r0,#1                 ;1394
000154  1a0000be          BNE      |L21.1108|
000158  ea000015          B        |L21.436|
                  |L21.348|
00015c  e3500006          CMP      r0,#6                 ;1394
000160  0a000034          BEQ      |L21.568|
000164  e3500033          CMP      r0,#0x33              ;1394
000168  1a0000b9          BNE      |L21.1108|
00016c  ea000058          B        |L21.724|
                  |L21.368|
000170  e3500035          CMP      r0,#0x35              ;1394
000174  0a000076          BEQ      |L21.852|
000178  e3500036          CMP      r0,#0x36              ;1394
00017c  0a000084          BEQ      |L21.916|
000180  e350003a          CMP      r0,#0x3a              ;1394
000184  0a000092          BEQ      |L21.980|
000188  e350003b          CMP      r0,#0x3b              ;1394
00018c  1a0000b0          BNE      |L21.1108|
000190  ea00009f          B        |L21.1044|
                  |L21.404|
000194  e1a00000          MOV      r0,r0                 ;1396
000198  e3a00000          MOV      r0,#0                 ;1398
00019c  e1a05000          MOV      r5,r0                 ;1398
0001a0  e1a06000          MOV      r6,r0                 ;1398
0001a4  e2470001          SUB      r0,r7,#1              ;1400
0001a8  e1a07800          LSL      r7,r0,#16             ;1400
0001ac  e1a07827          LSR      r7,r7,#16             ;1400
0001b0  ea0000aa          B        |L21.1120|
                  |L21.436|
0001b4  e1a00000          MOV      r0,r0                 ;1402
0001b8  e1a00000          MOV      r0,r0                 ;1403
0001bc  e3550004          CMP      r5,#4                 ;1403
0001c0  0a000008          BEQ      |L21.488|
0001c4  e1a00000          MOV      r0,r0                 ;1403
0001c8  e28f3e31          ADR      r3,|L21.1248|
0001cc  e59f2328          LDR      r2,|L21.1276|
0001d0  e28f1fca          ADR      r1,|L21.1280|
0001d4  e28f0e33          ADR      r0,|L21.1292|
0001d8  ebfffffe          BL       sysprintf
0001dc  e1a00000          MOV      r0,r0                 ;1403
0001e0  e3e00005          MVN      r0,#5                 ;1403
0001e4  eaffff92          B        |L21.52|
                  |L21.488|
0001e8  e1a00000          MOV      r0,r0                 ;1403
0001ec  e3a08006          MOV      r8,#6                 ;1404
0001f0  ea00009a          B        |L21.1120|
                  |L21.500|
0001f4  e1a00000          MOV      r0,r0                 ;1406
0001f8  e3a06004          MOV      r6,#4                 ;1407
0001fc  e1a00000          MOV      r0,r0                 ;1408
000200  e1550006          CMP      r5,r6                 ;1408
000204  aa000008          BGE      |L21.556|
000208  e1a00000          MOV      r0,r0                 ;1408
00020c  e28f3fb3          ADR      r3,|L21.1248|
000210  e3a02d16          MOV      r2,#0x580             ;1408
000214  e28f1fc6          ADR      r1,|L21.1332|
000218  e28f0fbb          ADR      r0,|L21.1292|
00021c  ebfffffe          BL       sysprintf
000220  e1a00000          MOV      r0,r0                 ;1408
000224  e3e00005          MVN      r0,#5                 ;1408
000228  eaffff81          B        |L21.52|
                  |L21.556|
00022c  e1a00000          MOV      r0,r0                 ;1408
000230  e3a08007          MOV      r8,#7                 ;1409
000234  ea000089          B        |L21.1120|
                  |L21.568|
000238  e1a00000          MOV      r0,r0                 ;1411
00023c  e1a00000          MOV      r0,r0                 ;1413
000240  e1a01fc5          ASR      r1,r5,#31             ;1413
000244  e0851f21          ADD      r1,r5,r1,LSR #30      ;1413
000248  e1a01141          ASR      r1,r1,#2              ;1413
00024c  e0451101          SUB      r1,r5,r1,LSL #2       ;1413
000250  e3510000          CMP      r1,#0                 ;1413
000254  0a000008          BEQ      |L21.636|
000258  e1a00000          MOV      r0,r0                 ;1413
00025c  e28f3f9f          ADR      r3,|L21.1248|
000260  e59f22e0          LDR      r2,|L21.1352|
000264  e28f1e2e          ADR      r1,|L21.1356|
000268  e28f0fa7          ADR      r0,|L21.1292|
00026c  ebfffffe          BL       sysprintf
000270  e1a00000          MOV      r0,r0                 ;1413
000274  e3e00005          MVN      r0,#5                 ;1413
000278  eaffff6d          B        |L21.52|
                  |L21.636|
00027c  e1a00000          MOV      r0,r0                 ;1413
000280  e3550008          CMP      r5,#8                 ;1415
000284  aa000001          BGE      |L21.656|
000288  e1a00005          MOV      r0,r5                 ;1415
00028c  ea000000          B        |L21.660|
                  |L21.656|
000290  e3a00008          MOV      r0,#8                 ;1415
                  |L21.660|
000294  e1a06000          MOV      r6,r0                 ;1415
000298  e1a00000          MOV      r0,r0                 ;1416
00029c  e1550006          CMP      r5,r6                 ;1416
0002a0  aa000008          BGE      |L21.712|
0002a4  e1a00000          MOV      r0,r0                 ;1416
0002a8  e28f3e23          ADR      r3,|L21.1248|
0002ac  e59f22a8          LDR      r2,|L21.1372|
0002b0  e28f1f9f          ADR      r1,|L21.1332|
0002b4  e28f0e25          ADR      r0,|L21.1292|
0002b8  ebfffffe          BL       sysprintf
0002bc  e1a00000          MOV      r0,r0                 ;1416
0002c0  e3e00005          MVN      r0,#5                 ;1416
0002c4  eaffff5a          B        |L21.52|
                  |L21.712|
0002c8  e1a00000          MOV      r0,r0                 ;1416
0002cc  e3a08008          MOV      r8,#8                 ;1417
0002d0  ea000062          B        |L21.1120|
                  |L21.724|
0002d4  e1a00000          MOV      r0,r0                 ;1419
0002d8  e1a00000          MOV      r0,r0                 ;1420
0002dc  e3550004          CMP      r5,#4                 ;1420
0002e0  0a000008          BEQ      |L21.776|
0002e4  e1a00000          MOV      r0,r0                 ;1420
0002e8  e28f3e1f          ADR      r3,|L21.1248|
0002ec  e59f226c          LDR      r2,|L21.1376|
0002f0  e28f1f82          ADR      r1,|L21.1280|
0002f4  e28f0e21          ADR      r0,|L21.1292|
0002f8  ebfffffe          BL       sysprintf
0002fc  e1a00000          MOV      r0,r0                 ;1420
000300  e3e00005          MVN      r0,#5                 ;1420
000304  eaffff4a          B        |L21.52|
                  |L21.776|
000308  e1a00000          MOV      r0,r0                 ;1420
00030c  e3a08003          MOV      r8,#3                 ;1421
000310  ea000052          B        |L21.1120|
                  |L21.788|
000314  e1a00000          MOV      r0,r0                 ;1423
000318  e1a00000          MOV      r0,r0                 ;1424
00031c  e3550001          CMP      r5,#1                 ;1424
000320  0a000008          BEQ      |L21.840|
000324  e1a00000          MOV      r0,r0                 ;1424
000328  e28f3e1b          ADR      r3,|L21.1248|
00032c  e3a02e59          MOV      r2,#0x590             ;1424
000330  e28f1f8b          ADR      r1,|L21.1380|
000334  e28f0e1d          ADR      r0,|L21.1292|
000338  ebfffffe          BL       sysprintf
00033c  e1a00000          MOV      r0,r0                 ;1424
000340  e3e00005          MVN      r0,#5                 ;1424
000344  eaffff3a          B        |L21.52|
                  |L21.840|
000348  e1a00000          MOV      r0,r0                 ;1424
00034c  e3a08000          MOV      r8,#0                 ;1425
000350  ea000042          B        |L21.1120|
                  |L21.852|
000354  e1a00000          MOV      r0,r0                 ;1427
000358  e1a00000          MOV      r0,r0                 ;1428
00035c  e3550001          CMP      r5,#1                 ;1428
000360  0a000008          BEQ      |L21.904|
000364  e1a00000          MOV      r0,r0                 ;1428
000368  e28f3e17          ADR      r3,|L21.1248|
00036c  e59f21fc          LDR      r2,|L21.1392|
000370  e28f1f7b          ADR      r1,|L21.1380|
000374  e28f0e19          ADR      r0,|L21.1292|
000378  ebfffffe          BL       sysprintf
00037c  e1a00000          MOV      r0,r0                 ;1428
000380  e3e00005          MVN      r0,#5                 ;1428
000384  eaffff2a          B        |L21.52|
                  |L21.904|
000388  e1a00000          MOV      r0,r0                 ;1428
00038c  e3a08001          MOV      r8,#1                 ;1429
000390  ea000032          B        |L21.1120|
                  |L21.916|
000394  e1a00000          MOV      r0,r0                 ;1431
000398  e1a00000          MOV      r0,r0                 ;1432
00039c  e3550004          CMP      r5,#4                 ;1432
0003a0  0a000008          BEQ      |L21.968|
0003a4  e1a00000          MOV      r0,r0                 ;1432
0003a8  e28f3e13          ADR      r3,|L21.1248|
0003ac  e59f21c0          LDR      r2,|L21.1396|
0003b0  e28f1f52          ADR      r1,|L21.1280|
0003b4  e28f0e15          ADR      r0,|L21.1292|
0003b8  ebfffffe          BL       sysprintf
0003bc  e1a00000          MOV      r0,r0                 ;1432
0003c0  e3e00005          MVN      r0,#5                 ;1432
0003c4  eaffff1a          B        |L21.52|
                  |L21.968|
0003c8  e1a00000          MOV      r0,r0                 ;1432
0003cc  e3a08002          MOV      r8,#2                 ;1433
0003d0  ea000022          B        |L21.1120|
                  |L21.980|
0003d4  e1a00000          MOV      r0,r0                 ;1435
0003d8  e1a00000          MOV      r0,r0                 ;1436
0003dc  e3550004          CMP      r5,#4                 ;1436
0003e0  0a000008          BEQ      |L21.1032|
0003e4  e1a00000          MOV      r0,r0                 ;1436
0003e8  e28f30f0          ADR      r3,|L21.1248|
0003ec  e59f2184          LDR      r2,|L21.1400|
0003f0  e28f1f42          ADR      r1,|L21.1280|
0003f4  e28f0e11          ADR      r0,|L21.1292|
0003f8  ebfffffe          BL       sysprintf
0003fc  e1a00000          MOV      r0,r0                 ;1436
000400  e3e00005          MVN      r0,#5                 ;1436
000404  eaffff0a          B        |L21.52|
                  |L21.1032|
000408  e1a00000          MOV      r0,r0                 ;1436
00040c  e3a08004          MOV      r8,#4                 ;1437
000410  ea000012          B        |L21.1120|
                  |L21.1044|
000414  e1a00000          MOV      r0,r0                 ;1439
000418  e1a00000          MOV      r0,r0                 ;1440
00041c  e3550004          CMP      r5,#4                 ;1440
000420  0a000008          BEQ      |L21.1096|
000424  e1a00000          MOV      r0,r0                 ;1440
000428  e28f30b0          ADR      r3,|L21.1248|
00042c  e3a02e5a          MOV      r2,#0x5a0             ;1440
000430  e28f10c8          ADR      r1,|L21.1280|
000434  e28f00d0          ADR      r0,|L21.1292|
000438  ebfffffe          BL       sysprintf
00043c  e1a00000          MOV      r0,r0                 ;1440
000440  e3e00005          MVN      r0,#5                 ;1440
000444  eafffefa          B        |L21.52|
                  |L21.1096|
000448  e1a00000          MOV      r0,r0                 ;1440
00044c  e3a08005          MOV      r8,#5                 ;1441
000450  ea000002          B        |L21.1120|
                  |L21.1108|
000454  e1a00000          MOV      r0,r0                 ;1443
000458  e3a06000          MOV      r6,#0                 ;1444
00045c  e1a00000          MOV      r0,r0                 ;1446
                  |L21.1120|
000460  e1a00000          MOV      r0,r0                 ;1401
000464  e2850002          ADD      r0,r5,#2              ;1448
000468  e0800007          ADD      r0,r0,r7              ;1448
00046c  e1a07800          LSL      r7,r0,#16             ;1448
000470  e1a07827          LSR      r7,r7,#16             ;1448
000474  e3560000          CMP      r6,#0                 ;1449
000478  da00008b          BLE      |L21.1708|
00047c  e3a00000          MOV      r0,#0                 ;1450
000480  e58d0008          STR      r0,[sp,#8]            ;1450
000484  e1a00000          MOV      r0,r0                 ;1452
                  |L21.1160|
000488  e1a00000          MOV      r0,r0                 ;1453
00048c  e3580000          CMP      r8,#0                 ;1453
000490  ba000001          BLT      |L21.1180|
000494  e358000a          CMP      r8,#0xa               ;1453
000498  ba000006          BLT      |L21.1208|
                  |L21.1180|
00049c  e1a00000          MOV      r0,r0                 ;1453
0004a0  e28f3038          ADR      r3,|L21.1248|
0004a4  e59f20d0          LDR      r2,|L21.1404|
0004a8  e28f10d0          ADR      r1,|L21.1408|
0004ac  e28f0058          ADR      r0,|L21.1292|
0004b0  ebfffffe          BL       sysprintf
0004b4  e1a00000          MOV      r0,r0                 ;1453
                  |L21.1208|
0004b8  e1a00000          MOV      r0,r0                 ;1453
0004bc  e59f0018          LDR      r0,|L21.1244|
0004c0  e7d00008          LDRB     r0,[r0,r8]            ;1454
0004c4  e3500000          CMP      r0,#0                 ;1454
0004c8  1a000076          BNE      |L21.1704|
0004cc  e3560004          CMP      r6,#4                 ;1455
0004d0  aa00002f          BGE      |L21.1428|
0004d4  e1a00006          MOV      r0,r6                 ;1455
0004d8  ea00002e          B        |L21.1432|
                  |L21.1244|
                          DCD      dhcp_rx_options_given
                  |L21.1248|
0004e0  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0004e4  2d312e34
0004e8  2e315c73
0004ec  72635c63
0004f0  6f72655c
0004f4  64686370
0004f8  2e6300  
0004fb  00                DCB      0
                  |L21.1276|
                          DCD      0x0000057b
                  |L21.1280|
000500  6c656e20          DCB      "len == 4",0
000504  3d3d2034
000508  00      
000509  00                DCB      0
00050a  00                DCB      0
00050b  00                DCB      0
                  |L21.1292|
00050c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000510  7274696f
000514  6e202225
000518  73222066
00051c  61696c65
000520  64206174
000524  206c696e
000528  65202564
00052c  20696e20
000530  25730a00
                  |L21.1332|
000534  6c656e20          DCB      "len >= decode_len",0
000538  3e3d2064
00053c  65636f64
000540  655f6c65
000544  6e00    
000546  00                DCB      0
000547  00                DCB      0
                  |L21.1352|
                          DCD      0x00000585
                  |L21.1356|
00054c  6c656e20          DCB      "len % 4 == 0",0
000550  25203420
000554  3d3d2030
000558  00      
000559  00                DCB      0
00055a  00                DCB      0
00055b  00                DCB      0
                  |L21.1372|
                          DCD      0x00000588
                  |L21.1376|
                          DCD      0x0000058c
                  |L21.1380|
000564  6c656e20          DCB      "len == 1",0
000568  3d3d2031
00056c  00      
00056d  00                DCB      0
00056e  00                DCB      0
00056f  00                DCB      0
                  |L21.1392|
                          DCD      0x00000594
                  |L21.1396|
                          DCD      0x00000598
                  |L21.1400|
                          DCD      0x0000059c
                  |L21.1404|
                          DCD      0x000005ad
                  |L21.1408|
000580  63686563          DCB      "check decode_idx",0
000584  6b206465
000588  636f6465
00058c  5f696478
000590  00      
000591  00                DCB      0
000592  00                DCB      0
000593  00                DCB      0
                  |L21.1428|
000594  e3a00004          MOV      r0,#4                 ;1455
                  |L21.1432|
000598  e58d0004          STR      r0,[sp,#4]            ;1455
00059c  e59d2004          LDR      r2,[sp,#4]            ;1456
0005a0  e59d300c          LDR      r3,[sp,#0xc]          ;1456
0005a4  e28d1008          ADD      r1,sp,#8              ;1456
0005a8  e1a00004          MOV      r0,r4                 ;1456
0005ac  ebfffffe          BL       pbuf_copy_partial
0005b0  e3560004          CMP      r6,#4                 ;1457
0005b4  da000020          BLE      |L21.1596|
0005b8  e1a00000          MOV      r0,r0                 ;1459
0005bc  e1a01fc6          ASR      r1,r6,#31             ;1459
0005c0  e0861f21          ADD      r1,r6,r1,LSR #30      ;1459
0005c4  e1a01141          ASR      r1,r1,#2              ;1459
0005c8  e0461101          SUB      r1,r6,r1,LSL #2       ;1459
0005cc  e3510000          CMP      r1,#0                 ;1459
0005d0  0a000008          BEQ      |L21.1528|
0005d4  e1a00000          MOV      r0,r0                 ;1459
0005d8  e24f3c01          ADR      r3,|L21.1248|
0005dc  e59f2220          LDR      r2,|L21.2052|
0005e0  e28f1e22          ADR      r1,|L21.2056|
0005e4  e24f00e0          ADR      r0,|L21.1292|
0005e8  ebfffffe          BL       sysprintf
0005ec  e1a00000          MOV      r0,r0                 ;1459
0005f0  e3e00005          MVN      r0,#5                 ;1459
0005f4  eafffe8e          B        |L21.52|
                  |L21.1528|
0005f8  e1a00000          MOV      r0,r0                 ;1459
0005fc  e3a00001          MOV      r0,#1                 ;1460
000600  e51f112c          LDR      r1,|L21.1244|
000604  e7c10008          STRB     r0,[r1,r8]            ;1460
000608  e59d0008          LDR      r0,[sp,#8]            ;1461
00060c  ebfffffe          BL       lwip_htonl
000610  e59f1204          LDR      r1,|L21.2076|
000614  e7810108          STR      r0,[r1,r8,LSL #2]     ;1461
000618  e2460004          SUB      r0,r6,#4              ;1462
00061c  e20060ff          AND      r6,r0,#0xff           ;1462
000620  e59d000c          LDR      r0,[sp,#0xc]          ;1463
000624  e2800004          ADD      r0,r0,#4              ;1463
000628  e1a00800          LSL      r0,r0,#16             ;1463
00062c  e1a00820          LSR      r0,r0,#16             ;1463
000630  e58d000c          STR      r0,[sp,#0xc]          ;1463
000634  e2888001          ADD      r8,r8,#1              ;1464
000638  eaffff92          B        |L21.1160|
                  |L21.1596|
00063c  e3560004          CMP      r6,#4                 ;1466
000640  1a000003          BNE      |L21.1620|
000644  e59d0008          LDR      r0,[sp,#8]            ;1467
000648  ebfffffe          BL       lwip_ntohl
00064c  e58d0008          STR      r0,[sp,#8]            ;1467
000650  ea00000e          B        |L21.1680|
                  |L21.1620|
000654  e1a00000          MOV      r0,r0                 ;1469
000658  e3560001          CMP      r6,#1                 ;1469
00065c  0a000008          BEQ      |L21.1668|
000660  e1a00000          MOV      r0,r0                 ;1469
000664  e24f3f63          ADR      r3,|L21.1248|
000668  e59f21b0          LDR      r2,|L21.2080|
00066c  e28f1e1b          ADR      r1,|L21.2084|
000670  e24f0f5b          ADR      r0,|L21.1292|
000674  ebfffffe          BL       sysprintf
000678  e1a00000          MOV      r0,r0                 ;1469
00067c  e3e00005          MVN      r0,#5                 ;1469
000680  eafffe6b          B        |L21.52|
                  |L21.1668|
000684  e1a00000          MOV      r0,r0                 ;1469
000688  e5dd0008          LDRB     r0,[sp,#8]            ;1470
00068c  e58d0008          STR      r0,[sp,#8]            ;1470
                  |L21.1680|
000690  e3a00001          MOV      r0,#1                 ;1472
000694  e51f11c0          LDR      r1,|L21.1244|
000698  e7c10008          STRB     r0,[r1,r8]            ;1472
00069c  e59f1178          LDR      r1,|L21.2076|
0006a0  e59d0008          LDR      r0,[sp,#8]            ;1473
0006a4  e7810108          STR      r0,[r1,r8,LSL #2]     ;1473
                  |L21.1704|
0006a8  e1a00000          MOV      r0,r0                 ;1475
                  |L21.1708|
0006ac  e1d400ba          LDRH     r0,[r4,#0xa]          ;1476
0006b0  e1500007          CMP      r0,r7                 ;1476
0006b4  ca00001b          BGT      |L21.1832|
0006b8  e1d400ba          LDRH     r0,[r4,#0xa]          ;1477
0006bc  e0470000          SUB      r0,r7,r0              ;1477
0006c0  e1a07800          LSL      r7,r0,#16             ;1477
0006c4  e1a07827          LSR      r7,r7,#16             ;1477
0006c8  e1d400ba          LDRH     r0,[r4,#0xa]          ;1478
0006cc  e04a0000          SUB      r0,r10,r0             ;1478
0006d0  e1a0a800          LSL      r10,r0,#16            ;1478
0006d4  e1a0a82a          LSR      r10,r10,#16           ;1478
0006d8  e157000a          CMP      r7,r10                ;1479
0006dc  aa000010          BGE      |L21.1828|
0006e0  e35a0000          CMP      r10,#0                ;1479
0006e4  0a00000e          BEQ      |L21.1828|
0006e8  e5944000          LDR      r4,[r4,#0]            ;1480
0006ec  e1a00000          MOV      r0,r0                 ;1481
0006f0  e3540000          CMP      r4,#0                 ;1481
0006f4  1a000006          BNE      |L21.1812|
0006f8  e1a00000          MOV      r0,r0                 ;1481
0006fc  e24f3f89          ADR      r3,|L21.1248|
000700  e59f2130          LDR      r2,|L21.2104|
000704  e28f1e13          ADR      r1,|L21.2108|
000708  e24f0f81          ADR      r0,|L21.1292|
00070c  ebfffffe          BL       sysprintf
000710  e1a00000          MOV      r0,r0                 ;1481
                  |L21.1812|
000714  e1a00000          MOV      r0,r0                 ;1481
000718  e5940004          LDR      r0,[r4,#4]            ;1482
00071c  e58d0020          STR      r0,[sp,#0x20]         ;1482
000720  ea000000          B        |L21.1832|
                  |L21.1828|
000724  ea000008          B        |L21.1868|
                  |L21.1832|
000728  e1a00000          MOV      r0,r0                 ;1488
                  |L21.1836|
00072c  e3540000          CMP      r4,#0                 ;1380
000730  0a000005          BEQ      |L21.1868|
000734  e59d0020          LDR      r0,[sp,#0x20]         ;1380
000738  e7d00007          LDRB     r0,[r0,r7]            ;1380
00073c  e35000ff          CMP      r0,#0xff              ;1380
000740  0a000001          BEQ      |L21.1868|
000744  e157000a          CMP      r7,r10                ;1380
000748  bafffe5d          BLT      |L21.196|
                  |L21.1868|
00074c  e1a00000          MOV      r0,r0                 ;1485
000750  e51f027c          LDR      r0,|L21.1244|
000754  e5d00000          LDRB     r0,[r0,#0]            ;1490  ; dhcp_rx_options_given
000758  e3500000          CMP      r0,#0                 ;1490
00075c  0a000014          BEQ      |L21.1972|
000760  e59f10b4          LDR      r1,|L21.2076|
000764  e5910000          LDR      r0,[r1,#0]            ;1491  ; dhcp_rx_options_val
000768  e3a01000          MOV      r1,#0                 ;1492
00076c  e51f2298          LDR      r2,|L21.1244|
000770  e5c21000          STRB     r1,[r2,#0]            ;1492  ; dhcp_rx_options_given
000774  e3500001          CMP      r0,#1                 ;1493
000778  1a000002          BNE      |L21.1928|
00077c  e3a01001          MOV      r1,#1                 ;1494
000780  e58d1018          STR      r1,[sp,#0x18]         ;1494
000784  ea000009          B        |L21.1968|
                  |L21.1928|
000788  e3500002          CMP      r0,#2                 ;1496
00078c  1a000002          BNE      |L21.1948|
000790  e3a01001          MOV      r1,#1                 ;1497
000794  e58d1014          STR      r1,[sp,#0x14]         ;1497
000798  ea000004          B        |L21.1968|
                  |L21.1948|
00079c  e3500003          CMP      r0,#3                 ;1499
0007a0  1a000002          BNE      |L21.1968|
0007a4  e3a01001          MOV      r1,#1                 ;1500
0007a8  e58d1014          STR      r1,[sp,#0x14]         ;1500
0007ac  e58d1018          STR      r1,[sp,#0x18]         ;1501
                  |L21.1968|
0007b0  e1a00000          MOV      r0,r0                 ;1517
                  |L21.1972|
0007b4  e59d0018          LDR      r0,[sp,#0x18]         ;1518
0007b8  e3500000          CMP      r0,#0                 ;1518
0007bc  0a000005          BEQ      |L21.2008|
0007c0  e3a00000          MOV      r0,#0                 ;1520
0007c4  e58d0018          STR      r0,[sp,#0x18]         ;1520
0007c8  e3a0b06c          MOV      r11,#0x6c             ;1521
0007cc  e3a000ec          MOV      r0,#0xec              ;1522
0007d0  e58d001c          STR      r0,[sp,#0x1c]         ;1522
0007d4  eafffe1f          B        |L21.88|
                  |L21.2008|
0007d8  e59d0014          LDR      r0,[sp,#0x14]         ;1524
0007dc  e3500000          CMP      r0,#0                 ;1524
0007e0  0a000005          BEQ      |L21.2044|
0007e4  e3a00000          MOV      r0,#0                 ;1525
0007e8  e58d0014          STR      r0,[sp,#0x14]         ;1525
0007ec  e3a0b02c          MOV      r11,#0x2c             ;1526
0007f0  e3a0006c          MOV      r0,#0x6c              ;1527
0007f4  e58d001c          STR      r0,[sp,#0x1c]         ;1527
0007f8  eafffe16          B        |L21.88|
                  |L21.2044|
0007fc  e3a00000          MOV      r0,#0                 ;1530
000800  eafffe0b          B        |L21.52|
                  |L21.2052|
                          DCD      0x000005b3
                  |L21.2056|
000808  6465636f          DCB      "decode_len % 4 == 0",0
00080c  64655f6c
000810  656e2025
000814  2034203d
000818  3d203000
                  |L21.2076|
                          DCD      dhcp_rx_options_val
                  |L21.2080|
                          DCD      0x000005bd
                  |L21.2084|
000824  696e7661          DCB      "invalid decode_len",0
000828  6c696420
00082c  6465636f
000830  64655f6c
000834  656e00  
000837  00                DCB      0
                  |L21.2104|
                          DCD      0x000005c9
                  |L21.2108|
00083c  6e657874          DCB      "next pbuf was null",0
000840  20706275
000844  66207761
000848  73206e75
00084c  6c6c00  
00084f  00                DCB      0
                          ENDP


                          AREA ||i.dhcp_rebind||, CODE, READONLY, ALIGN=2

                  dhcp_rebind PROC
;;;1075   static err_t
;;;1076   dhcp_rebind(struct netif *netif)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;1077   {
000004  e1a05000          MOV      r5,r0
;;;1078     struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;1079     err_t result;
;;;1080     u16_t msecs;
;;;1081     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
;;;1082     dhcp_set_state(dhcp, DHCP_REBINDING);
00000c  e3a01004          MOV      r1,#4
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       dhcp_set_state
;;;1083   
;;;1084     /* create and initialize the DHCP message header */
;;;1085     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000018  e3a02003          MOV      r2,#3
00001c  e1a01004          MOV      r1,r4
000020  e1a00005          MOV      r0,r5
000024  ebfffffe          BL       dhcp_create_msg
000028  e1a06000          MOV      r6,r0
;;;1086     if (result == ERR_OK) {
00002c  e3560000          CMP      r6,#0
000030  1a000015          BNE      |L22.140|
;;;1087       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000034  e3a02002          MOV      r2,#2
000038  e3a01039          MOV      r1,#0x39
00003c  e1a00004          MOV      r0,r4
000040  ebfffffe          BL       dhcp_option
;;;1088       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000044  e1d512b4          LDRH     r1,[r5,#0x24]
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       dhcp_option_short
;;;1089   
;;;1090   #if LWIP_NETIF_HOSTNAME
;;;1091       dhcp_option_hostname(dhcp, netif);
;;;1092   #endif /* LWIP_NETIF_HOSTNAME */
;;;1093   
;;;1094   #if 0
;;;1095       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1096       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1097   
;;;1098       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1099       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1100   #endif
;;;1101   
;;;1102       dhcp_option_trailer(dhcp);
000050  e1a00004          MOV      r0,r4
000054  ebfffffe          BL       dhcp_option_trailer
;;;1103   
;;;1104       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000058  e1d421b8          LDRH     r2,[r4,#0x18]
00005c  e28220f0          ADD      r2,r2,#0xf0
000060  e3c21801          BIC      r1,r2,#0x10000
000064  e5940010          LDR      r0,[r4,#0x10]
000068  ebfffffe          BL       pbuf_realloc
;;;1105   
;;;1106       /* broadcast to server */
;;;1107       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00006c  e58d5000          STR      r5,[sp,#0]
000070  e3a03043          MOV      r3,#0x43
000074  e59f2060          LDR      r2,|L22.220|
000078  e5940004          LDR      r0,[r4,#4]
00007c  e5941010          LDR      r1,[r4,#0x10]
000080  ebfffffe          BL       udp_sendto_if
;;;1108       dhcp_delete_msg(dhcp);
000084  e1a00004          MOV      r0,r4
000088  ebfffffe          BL       dhcp_delete_msg
                  |L22.140|
;;;1109       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
;;;1110     } else {
;;;1111       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
;;;1112     }
;;;1113     dhcp->tries++;
00008c  e5d4000d          LDRB     r0,[r4,#0xd]
000090  e2800001          ADD      r0,r0,#1
000094  e5c4000d          STRB     r0,[r4,#0xd]
;;;1114     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000098  e5d4000d          LDRB     r0,[r4,#0xd]
00009c  e350000a          CMP      r0,#0xa
0000a0  aa000003          BGE      |L22.180|
0000a4  e5d4000d          LDRB     r0,[r4,#0xd]
0000a8  e3a01ffa          MOV      r1,#0x3e8
0000ac  e1600180          SMULBB   r0,r0,r1
0000b0  ea000000          B        |L22.184|
                  |L22.180|
0000b4  e59f0024          LDR      r0,|L22.224|
                  |L22.184|
0000b8  e1a07800          LSL      r7,r0,#16
0000bc  e1a07827          LSR      r7,r7,#16
;;;1115     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000c0  e2870c01          ADD      r0,r7,#0x100
0000c4  e28000f3          ADD      r0,r0,#0xf3
0000c8  e3a01f7d          MOV      r1,#0x1f4
0000cc  ebfffffe          BL       __aeabi_idivmod
0000d0  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1116     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
;;;1117     return result;
0000d4  e1a00006          MOV      r0,r6
;;;1118   }
0000d8  e8bd80f8          POP      {r3-r7,pc}
;;;1119   
                          ENDP

                  |L22.220|
                          DCD      ip_addr_broadcast
                  |L22.224|
                          DCD      0x00002710

                          AREA ||i.dhcp_reboot||, CODE, READONLY, ALIGN=2

                  dhcp_reboot PROC
;;;1125   static err_t
;;;1126   dhcp_reboot(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1127   {
000004  e1a05000          MOV      r5,r0
;;;1128     struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;1129     err_t result;
;;;1130     u16_t msecs;
;;;1131     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
;;;1132     dhcp_set_state(dhcp, DHCP_REBOOTING);
00000c  e3a01003          MOV      r1,#3
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       dhcp_set_state
;;;1133   
;;;1134     /* create and initialize the DHCP message header */
;;;1135     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000018  e3a02003          MOV      r2,#3
00001c  e1a01004          MOV      r1,r4
000020  e1a00005          MOV      r0,r5
000024  ebfffffe          BL       dhcp_create_msg
000028  e1a06000          MOV      r6,r0
;;;1136     if (result == ERR_OK) {
00002c  e3560000          CMP      r6,#0
000030  1a00001f          BNE      |L23.180|
;;;1137       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000034  e3a02002          MOV      r2,#2
000038  e3a01039          MOV      r1,#0x39
00003c  e1a00004          MOV      r0,r4
000040  ebfffffe          BL       dhcp_option
;;;1138       dhcp_option_short(dhcp, 576);
000044  e3a01d09          MOV      r1,#0x240
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       dhcp_option_short
;;;1139   
;;;1140       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000050  e3a02004          MOV      r2,#4
000054  e3a01032          MOV      r1,#0x32
000058  e1a00004          MOV      r0,r4
00005c  ebfffffe          BL       dhcp_option
;;;1141       dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000060  e5940024          LDR      r0,[r4,#0x24]
000064  ebfffffe          BL       lwip_ntohl
000068  e1a08000          MOV      r8,r0
00006c  e1a01008          MOV      r1,r8
000070  e1a00004          MOV      r0,r4
000074  ebfffffe          BL       dhcp_option_long
;;;1142   
;;;1143       dhcp_option_trailer(dhcp);
000078  e1a00004          MOV      r0,r4
00007c  ebfffffe          BL       dhcp_option_trailer
;;;1144   
;;;1145       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000080  e1d421b8          LDRH     r2,[r4,#0x18]
000084  e28220f0          ADD      r2,r2,#0xf0
000088  e3c21801          BIC      r1,r2,#0x10000
00008c  e5940010          LDR      r0,[r4,#0x10]
000090  ebfffffe          BL       pbuf_realloc
;;;1146   
;;;1147       /* broadcast to server */
;;;1148       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000094  e58d5000          STR      r5,[sp,#0]
000098  e3a03043          MOV      r3,#0x43
00009c  e59f2060          LDR      r2,|L23.260|
0000a0  e5940004          LDR      r0,[r4,#4]
0000a4  e5941010          LDR      r1,[r4,#0x10]
0000a8  ebfffffe          BL       udp_sendto_if
;;;1149       dhcp_delete_msg(dhcp);
0000ac  e1a00004          MOV      r0,r4
0000b0  ebfffffe          BL       dhcp_delete_msg
                  |L23.180|
;;;1150       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
;;;1151     } else {
;;;1152       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
;;;1153     }
;;;1154     dhcp->tries++;
0000b4  e5d4000d          LDRB     r0,[r4,#0xd]
0000b8  e2800001          ADD      r0,r0,#1
0000bc  e5c4000d          STRB     r0,[r4,#0xd]
;;;1155     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
0000c0  e5d4000d          LDRB     r0,[r4,#0xd]
0000c4  e350000a          CMP      r0,#0xa
0000c8  aa000003          BGE      |L23.220|
0000cc  e5d4000d          LDRB     r0,[r4,#0xd]
0000d0  e3a01ffa          MOV      r1,#0x3e8
0000d4  e1600180          SMULBB   r0,r0,r1
0000d8  ea000000          B        |L23.224|
                  |L23.220|
0000dc  e59f0024          LDR      r0,|L23.264|
                  |L23.224|
0000e0  e1a07800          LSL      r7,r0,#16
0000e4  e1a07827          LSR      r7,r7,#16
;;;1156     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000e8  e2870c01          ADD      r0,r7,#0x100
0000ec  e28000f3          ADD      r0,r0,#0xf3
0000f0  e3a01f7d          MOV      r1,#0x1f4
0000f4  ebfffffe          BL       __aeabi_idivmod
0000f8  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1157     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
;;;1158     return result;
0000fc  e1a00006          MOV      r0,r6
;;;1159   }
000100  e8bd83f8          POP      {r3-r9,pc}
;;;1160   
                          ENDP

                  |L23.260|
                          DCD      ip_addr_broadcast
                  |L23.264|
                          DCD      0x00002710

                          AREA ||i.dhcp_recv||, CODE, READONLY, ALIGN=2

                  dhcp_recv PROC
;;;1536   static void
;;;1537   dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1538   {
000004  e1a09000          MOV      r9,r0
000008  e1a05002          MOV      r5,r2
00000c  e59db028          LDR      r11,[sp,#0x28]
;;;1539     struct netif *netif = (struct netif *)arg;
000010  e1a07009          MOV      r7,r9
;;;1540     struct dhcp *dhcp = netif->dhcp;
000014  e5974020          LDR      r4,[r7,#0x20]
;;;1541     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
000018  e595a004          LDR      r10,[r5,#4]
;;;1542     u8_t msg_type;
;;;1543     u8_t i;
;;;1544     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
;;;1545       ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
;;;1546     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
;;;1547     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
;;;1548     /* prevent warnings about unused arguments */
;;;1549     LWIP_UNUSED_ARG(pcb);
;;;1550     LWIP_UNUSED_ARG(addr);
;;;1551     LWIP_UNUSED_ARG(port);
;;;1552   
;;;1553     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
00001c  e1a00000          MOV      r0,r0
000020  e5940008          LDR      r0,[r4,#8]
000024  e3500000          CMP      r0,#0
000028  0a000006          BEQ      |L24.72|
00002c  e1a00000          MOV      r0,r0
000030  e28f3f66          ADR      r3,|L24.464|
000034  e59f21b0          LDR      r2,|L24.492|
000038  e28f1e1b          ADR      r1,|L24.496|
00003c  e28f0d07          ADR      r0,|L24.516|
000040  ebfffffe          BL       sysprintf
000044  e1a00000          MOV      r0,r0
                  |L24.72|
000048  e1a00000          MOV      r0,r0
;;;1554   
;;;1555     if (p->len < DHCP_MIN_REPLY_LEN) {
00004c  e1d500ba          LDRH     r0,[r5,#0xa]
000050  e350002c          CMP      r0,#0x2c
000054  aa000000          BGE      |L24.92|
;;;1556       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
;;;1557       goto free_pbuf_and_return;
000058  ea000057          B        |L24.444|
                  |L24.92|
;;;1558     }
;;;1559   
;;;1560     if (reply_msg->op != DHCP_BOOTREPLY) {
00005c  e5da0000          LDRB     r0,[r10,#0]
000060  e3500002          CMP      r0,#2
000064  0a000000          BEQ      |L24.108|
;;;1561       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
;;;1562       goto free_pbuf_and_return;
000068  ea000053          B        |L24.444|
                  |L24.108|
;;;1563     }
;;;1564     /* iterate through hardware address and match against DHCP message */
;;;1565     for (i = 0; i < netif->hwaddr_len; i++) {
00006c  e3a06000          MOV      r6,#0
000070  ea000008          B        |L24.152|
                  |L24.116|
;;;1566       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
000074  e2870027          ADD      r0,r7,#0x27
000078  e7d00006          LDRB     r0,[r0,r6]
00007c  e28a101c          ADD      r1,r10,#0x1c
000080  e7d11006          LDRB     r1,[r1,r6]
000084  e1500001          CMP      r0,r1
000088  0a000000          BEQ      |L24.144|
;;;1567         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1568           ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
;;;1569           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1570         goto free_pbuf_and_return;
00008c  ea00004a          B        |L24.444|
                  |L24.144|
000090  e2860001          ADD      r0,r6,#1              ;1565
000094  e20060ff          AND      r6,r0,#0xff           ;1565
                  |L24.152|
000098  e5d70026          LDRB     r0,[r7,#0x26]         ;1565
00009c  e1500006          CMP      r0,r6                 ;1565
0000a0  cafffff3          BGT      |L24.116|
;;;1571       }
;;;1572     }
;;;1573     /* match transaction ID against what we expected */
;;;1574     if (ntohl(reply_msg->xid) != dhcp->xid) {
0000a4  e28a0004          ADD      r0,r10,#4
0000a8  ebfffffe          BL       __aeabi_uread4
0000ac  e58d0000          STR      r0,[sp,#0]
0000b0  ebfffffe          BL       lwip_ntohl
0000b4  e5941000          LDR      r1,[r4,#0]
0000b8  e1500001          CMP      r0,r1
0000bc  0a000000          BEQ      |L24.196|
;;;1575       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
;;;1576         ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
;;;1577       goto free_pbuf_and_return;
0000c0  ea00003d          B        |L24.444|
                  |L24.196|
;;;1578     }
;;;1579     /* option fields could be unfold? */
;;;1580     if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
0000c4  e1a01005          MOV      r1,r5
0000c8  e1a00004          MOV      r0,r4
0000cc  ebfffffe          BL       dhcp_parse_reply
0000d0  e3500000          CMP      r0,#0
0000d4  0a000000          BEQ      |L24.220|
;;;1581       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1582         ("problem unfolding DHCP message - too short on memory?\n"));
;;;1583       goto free_pbuf_and_return;
0000d8  ea000037          B        |L24.444|
                  |L24.220|
;;;1584     }
;;;1585   
;;;1586     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
;;;1587     /* obtain pointer to DHCP message type */
;;;1588     if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
0000dc  e59f0148          LDR      r0,|L24.556|
0000e0  e5d00001          LDRB     r0,[r0,#1]  ; dhcp_rx_options_given
0000e4  e3500000          CMP      r0,#0
0000e8  1a000000          BNE      |L24.240|
;;;1589       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
;;;1590       goto free_pbuf_and_return;
0000ec  ea000032          B        |L24.444|
                  |L24.240|
;;;1591     }
;;;1592   
;;;1593     /* read DHCP message type */
;;;1594     msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
0000f0  e59f0138          LDR      r0,|L24.560|
0000f4  e5d08004          LDRB     r8,[r0,#4]  ; dhcp_rx_options_val
;;;1595     /* message type is DHCP ACK? */
;;;1596     if (msg_type == DHCP_ACK) {
0000f8  e3580005          CMP      r8,#5
0000fc  1a000013          BNE      |L24.336|
;;;1597       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
;;;1598       /* in requesting state? */
;;;1599       if (dhcp->state == DHCP_REQUESTING) {
000100  e5d4000c          LDRB     r0,[r4,#0xc]
000104  e3500001          CMP      r0,#1
000108  1a000004          BNE      |L24.288|
;;;1600         dhcp_handle_ack(netif);
00010c  e1a00007          MOV      r0,r7
000110  ebfffffe          BL       dhcp_handle_ack
;;;1601   #if DHCP_DOES_ARP_CHECK
;;;1602         /* check if the acknowledged lease address is already in use */
;;;1603         dhcp_check(netif);
000114  e1a00007          MOV      r0,r7
000118  ebfffffe          BL       dhcp_check
00011c  ea000025          B        |L24.440|
                  |L24.288|
;;;1604   #else
;;;1605         /* bind interface to the acknowledged lease address */
;;;1606         dhcp_bind(netif);
;;;1607   #endif
;;;1608       }
;;;1609       /* already bound to the given lease address? */
;;;1610       else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
000120  e5d4000c          LDRB     r0,[r4,#0xc]
000124  e3500003          CMP      r0,#3
000128  0a000005          BEQ      |L24.324|
00012c  e5d4000c          LDRB     r0,[r4,#0xc]
000130  e3500004          CMP      r0,#4
000134  0a000002          BEQ      |L24.324|
000138  e5d4000c          LDRB     r0,[r4,#0xc]
00013c  e3500005          CMP      r0,#5
000140  1a00001c          BNE      |L24.440|
                  |L24.324|
;;;1611         dhcp_bind(netif);
000144  e1a00007          MOV      r0,r7
000148  ebfffffe          BL       dhcp_bind
00014c  ea000019          B        |L24.440|
                  |L24.336|
;;;1612       }
;;;1613     }
;;;1614     /* received a DHCP_NAK in appropriate state? */
;;;1615     else if ((msg_type == DHCP_NAK) &&
000150  e3580006          CMP      r8,#6
000154  1a00000e          BNE      |L24.404|
;;;1616       ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
000158  e5d4000c          LDRB     r0,[r4,#0xc]
00015c  e3500003          CMP      r0,#3
000160  0a000008          BEQ      |L24.392|
000164  e5d4000c          LDRB     r0,[r4,#0xc]
000168  e3500001          CMP      r0,#1
00016c  0a000005          BEQ      |L24.392|
;;;1617        (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
000170  e5d4000c          LDRB     r0,[r4,#0xc]
000174  e3500004          CMP      r0,#4
000178  0a000002          BEQ      |L24.392|
00017c  e5d4000c          LDRB     r0,[r4,#0xc]
000180  e3500005          CMP      r0,#5
000184  1a000002          BNE      |L24.404|
                  |L24.392|
;;;1618       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
;;;1619       dhcp_handle_nak(netif);
000188  e1a00007          MOV      r0,r7
00018c  ebfffffe          BL       dhcp_handle_nak
000190  ea000008          B        |L24.440|
                  |L24.404|
;;;1620     }
;;;1621     /* received a DHCP_OFFER in DHCP_SELECTING state? */
;;;1622     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
000194  e3580002          CMP      r8,#2
000198  1a000006          BNE      |L24.440|
00019c  e5d4000c          LDRB     r0,[r4,#0xc]
0001a0  e3500006          CMP      r0,#6
0001a4  1a000003          BNE      |L24.440|
;;;1623       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
;;;1624       dhcp->request_timeout = 0;
0001a8  e3a00000          MOV      r0,#0
0001ac  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1625       /* remember offered lease */
;;;1626       dhcp_handle_offer(netif);
0001b0  e1a00007          MOV      r0,r7
0001b4  ebfffffe          BL       dhcp_handle_offer
                  |L24.440|
;;;1627     }
;;;1628   free_pbuf_and_return:
0001b8  e1a00000          MOV      r0,r0
                  |L24.444|
;;;1629     dhcp->msg_in = NULL;
0001bc  e3a00000          MOV      r0,#0
0001c0  e5840008          STR      r0,[r4,#8]
;;;1630     pbuf_free(p);
0001c4  e1a00005          MOV      r0,r5
0001c8  ebfffffe          BL       pbuf_free
;;;1631   }
0001cc  e8bd8ff8          POP      {r3-r11,pc}
;;;1632   
                          ENDP

                  |L24.464|
0001d0  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0001d4  2d312e34
0001d8  2e315c73
0001dc  72635c63
0001e0  6f72655c
0001e4  64686370
0001e8  2e6300  
0001eb  00                DCB      0
                  |L24.492|
                          DCD      0x00000611
                  |L24.496|
0001f0  7265706c          DCB      "reply wasn't freed",0
0001f4  79207761
0001f8  736e2774
0001fc  20667265
000200  656400  
000203  00                DCB      0
                  |L24.516|
000204  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000208  7274696f
00020c  6e202225
000210  73222066
000214  61696c65
000218  64206174
00021c  206c696e
000220  65202564
000224  20696e20
000228  25730a00
                  |L24.556|
                          DCD      dhcp_rx_options_given
                  |L24.560|
                          DCD      dhcp_rx_options_val

                          AREA ||i.dhcp_release||, CODE, READONLY, ALIGN=2

                  dhcp_release PROC
;;;1167   err_t
;;;1168   dhcp_release(struct netif *netif)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;1169   {
000004  e1a05000          MOV      r5,r0
;;;1170     struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;1171     err_t result;
;;;1172     u16_t msecs;
;;;1173     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
;;;1174   
;;;1175     /* idle DHCP client */
;;;1176     dhcp_set_state(dhcp, DHCP_OFF);
00000c  e3a01000          MOV      r1,#0
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       dhcp_set_state
;;;1177     /* clean old DHCP offer */
;;;1178     ip_addr_set_zero(&dhcp->server_ip_addr);
000018  e3a00000          MOV      r0,#0
00001c  e5840020          STR      r0,[r4,#0x20]
;;;1179     ip_addr_set_zero(&dhcp->offered_ip_addr);
000020  e5840024          STR      r0,[r4,#0x24]
;;;1180     ip_addr_set_zero(&dhcp->offered_sn_mask);
000024  e5840028          STR      r0,[r4,#0x28]
;;;1181     ip_addr_set_zero(&dhcp->offered_gw_addr);
000028  e584002c          STR      r0,[r4,#0x2c]
;;;1182   #if LWIP_DHCP_BOOTP_FILE
;;;1183     ip_addr_set_zero(&dhcp->offered_si_addr);
;;;1184   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1185     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
00002c  e5840038          STR      r0,[r4,#0x38]
000030  e5840034          STR      r0,[r4,#0x34]
000034  e5840030          STR      r0,[r4,#0x30]
;;;1186     
;;;1187     /* create and initialize the DHCP message header */
;;;1188     result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
000038  e3a02007          MOV      r2,#7
00003c  e1a01004          MOV      r1,r4
000040  e1a00005          MOV      r0,r5
000044  ebfffffe          BL       dhcp_create_msg
000048  e1a06000          MOV      r6,r0
;;;1189     if (result == ERR_OK) {
00004c  e3560000          CMP      r6,#0
000050  1a00000e          BNE      |L25.144|
;;;1190       dhcp_option_trailer(dhcp);
000054  e1a00004          MOV      r0,r4
000058  ebfffffe          BL       dhcp_option_trailer
;;;1191   
;;;1192       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00005c  e1d421b8          LDRH     r2,[r4,#0x18]
000060  e28220f0          ADD      r2,r2,#0xf0
000064  e3c21801          BIC      r1,r2,#0x10000
000068  e5940010          LDR      r0,[r4,#0x10]
00006c  ebfffffe          BL       pbuf_realloc
;;;1193   
;;;1194       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000070  e58d5000          STR      r5,[sp,#0]
000074  e3a03043          MOV      r3,#0x43
000078  e5940004          LDR      r0,[r4,#4]
00007c  e5941010          LDR      r1,[r4,#0x10]
000080  e2842020          ADD      r2,r4,#0x20
000084  ebfffffe          BL       udp_sendto_if
;;;1195       dhcp_delete_msg(dhcp);
000088  e1a00004          MOV      r0,r4
00008c  ebfffffe          BL       dhcp_delete_msg
                  |L25.144|
;;;1196       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
;;;1197     } else {
;;;1198       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
;;;1199     }
;;;1200     dhcp->tries++;
000090  e5d4000d          LDRB     r0,[r4,#0xd]
000094  e2800001          ADD      r0,r0,#1
000098  e5c4000d          STRB     r0,[r4,#0xd]
;;;1201     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
00009c  e5d4000d          LDRB     r0,[r4,#0xd]
0000a0  e350000a          CMP      r0,#0xa
0000a4  aa000003          BGE      |L25.184|
0000a8  e5d4000d          LDRB     r0,[r4,#0xd]
0000ac  e3a01ffa          MOV      r1,#0x3e8
0000b0  e1600180          SMULBB   r0,r0,r1
0000b4  ea000000          B        |L25.188|
                  |L25.184|
0000b8  e59f004c          LDR      r0,|L25.268|
                  |L25.188|
0000bc  e1a07800          LSL      r7,r0,#16
0000c0  e1a07827          LSR      r7,r7,#16
;;;1202     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000c4  e2870c01          ADD      r0,r7,#0x100
0000c8  e28000f3          ADD      r0,r0,#0xf3
0000cc  e3a01f7d          MOV      r1,#0x1f4
0000d0  ebfffffe          BL       __aeabi_idivmod
0000d4  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1203     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
;;;1204     /* bring the interface down */
;;;1205     netif_set_down(netif);
0000d8  e1a00005          MOV      r0,r5
0000dc  ebfffffe          BL       netif_set_down
;;;1206     /* remove IP address from interface */
;;;1207     netif_set_ipaddr(netif, IP_ADDR_ANY);
0000e0  e59f1028          LDR      r1,|L25.272|
0000e4  e1a00005          MOV      r0,r5
0000e8  ebfffffe          BL       netif_set_ipaddr
;;;1208     netif_set_gw(netif, IP_ADDR_ANY);
0000ec  e59f101c          LDR      r1,|L25.272|
0000f0  e1a00005          MOV      r0,r5
0000f4  ebfffffe          BL       netif_set_gw
;;;1209     netif_set_netmask(netif, IP_ADDR_ANY);
0000f8  e59f1010          LDR      r1,|L25.272|
0000fc  e1a00005          MOV      r0,r5
000100  ebfffffe          BL       netif_set_netmask
;;;1210     
;;;1211     return result;
000104  e1a00006          MOV      r0,r6
;;;1212   }
000108  e8bd80f8          POP      {r3-r7,pc}
;;;1213   
                          ENDP

                  |L25.268|
                          DCD      0x00002710
                  |L25.272|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_renew||, CODE, READONLY, ALIGN=2

                  dhcp_renew PROC
;;;1021   err_t
;;;1022   dhcp_renew(struct netif *netif)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;1023   {
000004  e1a05000          MOV      r5,r0
;;;1024     struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;1025     err_t result;
;;;1026     u16_t msecs;
;;;1027     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
;;;1028     dhcp_set_state(dhcp, DHCP_RENEWING);
00000c  e3a01005          MOV      r1,#5
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       dhcp_set_state
;;;1029   
;;;1030     /* create and initialize the DHCP message header */
;;;1031     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000018  e3a02003          MOV      r2,#3
00001c  e1a01004          MOV      r1,r4
000020  e1a00005          MOV      r0,r5
000024  ebfffffe          BL       dhcp_create_msg
000028  e1a06000          MOV      r6,r0
;;;1032     if (result == ERR_OK) {
00002c  e3560000          CMP      r6,#0
000030  1a000015          BNE      |L26.140|
;;;1033       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000034  e3a02002          MOV      r2,#2
000038  e3a01039          MOV      r1,#0x39
00003c  e1a00004          MOV      r0,r4
000040  ebfffffe          BL       dhcp_option
;;;1034       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000044  e1d512b4          LDRH     r1,[r5,#0x24]
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       dhcp_option_short
;;;1035   
;;;1036   #if 0
;;;1037       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1038       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1039   #endif
;;;1040   
;;;1041   #if 0
;;;1042       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1043       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1044   #endif
;;;1045   
;;;1046   #if LWIP_NETIF_HOSTNAME
;;;1047       dhcp_option_hostname(dhcp, netif);
;;;1048   #endif /* LWIP_NETIF_HOSTNAME */
;;;1049   
;;;1050       /* append DHCP message trailer */
;;;1051       dhcp_option_trailer(dhcp);
000050  e1a00004          MOV      r0,r4
000054  ebfffffe          BL       dhcp_option_trailer
;;;1052   
;;;1053       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000058  e1d421b8          LDRH     r2,[r4,#0x18]
00005c  e28220f0          ADD      r2,r2,#0xf0
000060  e3c21801          BIC      r1,r2,#0x10000
000064  e5940010          LDR      r0,[r4,#0x10]
000068  ebfffffe          BL       pbuf_realloc
;;;1054   
;;;1055       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
00006c  e58d5000          STR      r5,[sp,#0]
000070  e3a03043          MOV      r3,#0x43
000074  e5940004          LDR      r0,[r4,#4]
000078  e5941010          LDR      r1,[r4,#0x10]
00007c  e2842020          ADD      r2,r4,#0x20
000080  ebfffffe          BL       udp_sendto_if
;;;1056       dhcp_delete_msg(dhcp);
000084  e1a00004          MOV      r0,r4
000088  ebfffffe          BL       dhcp_delete_msg
                  |L26.140|
;;;1057   
;;;1058       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
;;;1059     } else {
;;;1060       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
;;;1061     }
;;;1062     dhcp->tries++;
00008c  e5d4000d          LDRB     r0,[r4,#0xd]
000090  e2800001          ADD      r0,r0,#1
000094  e5c4000d          STRB     r0,[r4,#0xd]
;;;1063     /* back-off on retries, but to a maximum of 20 seconds */
;;;1064     msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
000098  e5d4000d          LDRB     r0,[r4,#0xd]
00009c  e350000a          CMP      r0,#0xa
0000a0  aa000003          BGE      |L26.180|
0000a4  e5d4000d          LDRB     r0,[r4,#0xd]
0000a8  e3a01e7d          MOV      r1,#0x7d0
0000ac  e1600180          SMULBB   r0,r0,r1
0000b0  ea000000          B        |L26.184|
                  |L26.180|
0000b4  e59f0020          LDR      r0,|L26.220|
                  |L26.184|
0000b8  e1a07800          LSL      r7,r0,#16
0000bc  e1a07827          LSR      r7,r7,#16
;;;1065     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000c0  e2870c01          ADD      r0,r7,#0x100
0000c4  e28000f3          ADD      r0,r0,#0xf3
0000c8  e3a01f7d          MOV      r1,#0x1f4
0000cc  ebfffffe          BL       __aeabi_idivmod
0000d0  e1c401ba          STRH     r0,[r4,#0x1a]
;;;1066     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
;;;1067     return result;
0000d4  e1a00006          MOV      r0,r6
;;;1068   }
0000d8  e8bd80f8          POP      {r3-r7,pc}
;;;1069   
                          ENDP

                  |L26.220|
                          DCD      0x00004e20

                          AREA ||i.dhcp_select||, CODE, READONLY, ALIGN=2

                  dhcp_select PROC
;;;282    static err_t
;;;283    dhcp_select(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;284    {
000004  e1a05000          MOV      r5,r0
;;;285      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;286      err_t result;
;;;287      u16_t msecs;
;;;288    
;;;289      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;290      dhcp_set_state(dhcp, DHCP_REQUESTING);
00000c  e3a01001          MOV      r1,#1
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       dhcp_set_state
;;;291    
;;;292      /* create and initialize the DHCP message header */
;;;293      result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
000018  e3a02003          MOV      r2,#3
00001c  e1a01004          MOV      r1,r4
000020  e1a00005          MOV      r0,r5
000024  ebfffffe          BL       dhcp_create_msg
000028  e1a06000          MOV      r6,r0
;;;294      if (result == ERR_OK) {
00002c  e3560000          CMP      r6,#0
000030  1a000039          BNE      |L27.284|
;;;295        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000034  e3a02002          MOV      r2,#2
000038  e3a01039          MOV      r1,#0x39
00003c  e1a00004          MOV      r0,r4
000040  ebfffffe          BL       dhcp_option
;;;296        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000044  e1d512b4          LDRH     r1,[r5,#0x24]
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       dhcp_option_short
;;;297    
;;;298        /* MUST request the offered IP address */
;;;299        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000050  e3a02004          MOV      r2,#4
000054  e3a01032          MOV      r1,#0x32
000058  e1a00004          MOV      r0,r4
00005c  ebfffffe          BL       dhcp_option
;;;300        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000060  e5940024          LDR      r0,[r4,#0x24]
000064  ebfffffe          BL       lwip_ntohl
000068  e1a08000          MOV      r8,r0
00006c  e1a01008          MOV      r1,r8
000070  e1a00004          MOV      r0,r4
000074  ebfffffe          BL       dhcp_option_long
;;;301    
;;;302        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
000078  e3a02004          MOV      r2,#4
00007c  e3a01036          MOV      r1,#0x36
000080  e1a00004          MOV      r0,r4
000084  ebfffffe          BL       dhcp_option
;;;303        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
000088  e5940020          LDR      r0,[r4,#0x20]
00008c  ebfffffe          BL       lwip_ntohl
000090  e1a08000          MOV      r8,r0
000094  e1a01008          MOV      r1,r8
000098  e1a00004          MOV      r0,r4
00009c  ebfffffe          BL       dhcp_option_long
;;;304    
;;;305        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
0000a0  e3a02004          MOV      r2,#4
0000a4  e3a01037          MOV      r1,#0x37
0000a8  e1a00004          MOV      r0,r4
0000ac  ebfffffe          BL       dhcp_option
;;;306        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
0000b0  e3a01001          MOV      r1,#1
0000b4  e1a00004          MOV      r0,r4
0000b8  ebfffffe          BL       dhcp_option_byte
;;;307        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
0000bc  e3a01003          MOV      r1,#3
0000c0  e1a00004          MOV      r0,r4
0000c4  ebfffffe          BL       dhcp_option_byte
;;;308        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
0000c8  e3a0101c          MOV      r1,#0x1c
0000cc  e1a00004          MOV      r0,r4
0000d0  ebfffffe          BL       dhcp_option_byte
;;;309        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
0000d4  e3a01006          MOV      r1,#6
0000d8  e1a00004          MOV      r0,r4
0000dc  ebfffffe          BL       dhcp_option_byte
;;;310    
;;;311    #if LWIP_NETIF_HOSTNAME
;;;312        dhcp_option_hostname(dhcp, netif);
;;;313    #endif /* LWIP_NETIF_HOSTNAME */
;;;314    
;;;315        dhcp_option_trailer(dhcp);
0000e0  e1a00004          MOV      r0,r4
0000e4  ebfffffe          BL       dhcp_option_trailer
;;;316        /* shrink the pbuf to the actual content length */
;;;317        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0000e8  e1d421b8          LDRH     r2,[r4,#0x18]
0000ec  e28220f0          ADD      r2,r2,#0xf0
0000f0  e3c21801          BIC      r1,r2,#0x10000
0000f4  e5940010          LDR      r0,[r4,#0x10]
0000f8  ebfffffe          BL       pbuf_realloc
;;;318    
;;;319        /* send broadcast to any DHCP server */
;;;320        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
0000fc  e58d5000          STR      r5,[sp,#0]
000100  e3a03043          MOV      r3,#0x43
000104  e59f2068          LDR      r2,|L27.372|
000108  e5940004          LDR      r0,[r4,#4]
00010c  e5941010          LDR      r1,[r4,#0x10]
000110  ebfffffe          BL       udp_sendto_if
;;;321        dhcp_delete_msg(dhcp);
000114  e1a00004          MOV      r0,r4
000118  ebfffffe          BL       dhcp_delete_msg
                  |L27.284|
;;;322        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
;;;323      } else {
;;;324        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
;;;325      }
;;;326      dhcp->tries++;
00011c  e5d4000d          LDRB     r0,[r4,#0xd]
000120  e2800001          ADD      r0,r0,#1
000124  e5c4000d          STRB     r0,[r4,#0xd]
;;;327      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
000128  e5d4000d          LDRB     r0,[r4,#0xd]
00012c  e3500006          CMP      r0,#6
000130  aa000003          BGE      |L27.324|
000134  e5d4000d          LDRB     r0,[r4,#0xd]
000138  e3a01001          MOV      r1,#1
00013c  e1a00011          LSL      r0,r1,r0
000140  ea000000          B        |L27.328|
                  |L27.324|
000144  e3a0003c          MOV      r0,#0x3c
                  |L27.328|
000148  e0801080          ADD      r1,r0,r0,LSL #1
00014c  e0610380          RSB      r0,r1,r0,LSL #7
000150  e59f1020          LDR      r1,|L27.376|
000154  e0017180          AND      r7,r1,r0,LSL #3
;;;328      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000158  e2870c01          ADD      r0,r7,#0x100
00015c  e28000f3          ADD      r0,r0,#0xf3
000160  e3a01f7d          MOV      r1,#0x1f4
000164  ebfffffe          BL       __aeabi_idivmod
000168  e1c401ba          STRH     r0,[r4,#0x1a]
;;;329      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
;;;330      return result;
00016c  e1a00006          MOV      r0,r6
;;;331    }
000170  e8bd83f8          POP      {r3-r9,pc}
;;;332    
                          ENDP

                  |L27.372|
                          DCD      ip_addr_broadcast
                  |L27.376|
                          DCD      0x0000ffff

                          AREA ||i.dhcp_set_state||, CODE, READONLY, ALIGN=2

                  dhcp_set_state PROC
;;;1252   static void
;;;1253   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
000000  e5d0200c          LDRB     r2,[r0,#0xc]
;;;1254   {
;;;1255     if (new_state != dhcp->state) {
000004  e1520001          CMP      r2,r1
000008  0a000003          BEQ      |L28.28|
;;;1256       dhcp->state = new_state;
00000c  e5c0100c          STRB     r1,[r0,#0xc]
;;;1257       dhcp->tries = 0;
000010  e3a02000          MOV      r2,#0
000014  e5c0200d          STRB     r2,[r0,#0xd]
;;;1258       dhcp->request_timeout = 0;
000018  e1c021ba          STRH     r2,[r0,#0x1a]
                  |L28.28|
;;;1259     }
;;;1260   }
00001c  e12fff1e          BX       lr
;;;1261   
                          ENDP


                          AREA ||i.dhcp_set_struct||, CODE, READONLY, ALIGN=2

                  dhcp_set_struct PROC
;;;586    void
;;;587    dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;588    {
000004  e1a04000          MOV      r4,r0
000008  e1a05001          MOV      r5,r1
;;;589      LWIP_ASSERT("netif != NULL", netif != NULL);
00000c  e1a00000          MOV      r0,r0
000010  e3540000          CMP      r4,#0
000014  1a000006          BNE      |L29.52|
000018  e1a00000          MOV      r0,r0
00001c  e28f3084          ADR      r3,|L29.168|
000020  e59f209c          LDR      r2,|L29.196|
000024  e28f109c          ADR      r1,|L29.200|
000028  e28f00a8          ADR      r0,|L29.216|
00002c  ebfffffe          BL       sysprintf
000030  e1a00000          MOV      r0,r0
                  |L29.52|
000034  e1a00000          MOV      r0,r0
;;;590      LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
000038  e1a00000          MOV      r0,r0
00003c  e3550000          CMP      r5,#0
000040  1a000006          BNE      |L29.96|
000044  e1a00000          MOV      r0,r0
000048  e28f3058          ADR      r3,|L29.168|
00004c  e59f20ac          LDR      r2,|L29.256|
000050  e28f10ac          ADR      r1,|L29.260|
000054  e28f007c          ADR      r0,|L29.216|
000058  ebfffffe          BL       sysprintf
00005c  e1a00000          MOV      r0,r0
                  |L29.96|
000060  e1a00000          MOV      r0,r0
;;;591      LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
000064  e1a00000          MOV      r0,r0
000068  e5940020          LDR      r0,[r4,#0x20]
00006c  e3500000          CMP      r0,#0
000070  0a000006          BEQ      |L29.144|
000074  e1a00000          MOV      r0,r0
000078  e28f3028          ADR      r3,|L29.168|
00007c  e59f2090          LDR      r2,|L29.276|
000080  e28f1090          ADR      r1,|L29.280|
000084  e28f004c          ADR      r0,|L29.216|
000088  ebfffffe          BL       sysprintf
00008c  e1a00000          MOV      r0,r0
                  |L29.144|
000090  e1a00000          MOV      r0,r0
;;;592    
;;;593      /* clear data structure */
;;;594      memset(dhcp, 0, sizeof(struct dhcp));
000094  e3a0103c          MOV      r1,#0x3c
000098  e1a00005          MOV      r0,r5
00009c  ebfffffe          BL       __aeabi_memclr4
;;;595      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;596      netif->dhcp = dhcp;
0000a0  e5845020          STR      r5,[r4,#0x20]
;;;597    }
0000a4  e8bd8070          POP      {r4-r6,pc}
;;;598    
                          ENDP

                  |L29.168|
0000a8  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0000ac  2d312e34
0000b0  2e315c73
0000b4  72635c63
0000b8  6f72655c
0000bc  64686370
0000c0  2e6300  
0000c3  00                DCB      0
                  |L29.196|
                          DCD      0x0000024d
                  |L29.200|
0000c8  6e657469          DCB      "netif != NULL",0
0000cc  6620213d
0000d0  204e554c
0000d4  4c00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L29.216|
0000d8  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000dc  7274696f
0000e0  6e202225
0000e4  73222066
0000e8  61696c65
0000ec  64206174
0000f0  206c696e
0000f4  65202564
0000f8  20696e20
0000fc  25730a00
                  |L29.256|
                          DCD      0x0000024e
                  |L29.260|
000104  64686370          DCB      "dhcp != NULL",0
000108  20213d20
00010c  4e554c4c
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L29.276|
                          DCD      0x0000024f
                  |L29.280|
000118  6e657469          DCB      "netif already has a struct dhcp set",0
00011c  6620616c
000120  72656164
000124  79206861
000128  73206120
00012c  73747275
000130  63742064
000134  68637020
000138  73657400

                          AREA ||i.dhcp_start||, CODE, READONLY, ALIGN=2

                  dhcp_start PROC
;;;628    err_t
;;;629    dhcp_start(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;630    {
000004  e1a05000          MOV      r5,r0
;;;631      struct dhcp *dhcp;
;;;632      err_t result = ERR_OK;
000008  e3a06000          MOV      r6,#0
;;;633    
;;;634      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
00000c  e1a00000          MOV      r0,r0
000010  e3550000          CMP      r5,#0
000014  1a000008          BNE      |L30.60|
000018  e1a00000          MOV      r0,r0
00001c  e28f3f67          ADR      r3,|L30.448|
000020  e59f21b4          LDR      r2,|L30.476|
000024  e28f1f6d          ADR      r1,|L30.480|
000028  e28f0d07          ADR      r0,|L30.496|
00002c  ebfffffe          BL       sysprintf
000030  e1a00000          MOV      r0,r0
000034  e3e0000d          MVN      r0,#0xd
                  |L30.56|
;;;635      dhcp = netif->dhcp;
;;;636      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;637      /* Remove the flag that says this netif is handled by DHCP,
;;;638         it is set when we succeeded starting. */
;;;639      netif->flags &= ~NETIF_FLAG_DHCP;
;;;640    
;;;641      /* check hwtype of the netif */
;;;642      if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
;;;643        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
;;;644        return ERR_ARG;
;;;645      }
;;;646    
;;;647      /* check MTU of the netif */
;;;648      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
;;;649        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;650        return ERR_MEM;
;;;651      }
;;;652    
;;;653      /* no DHCP client attached yet? */
;;;654      if (dhcp == NULL) {
;;;655        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
;;;656        dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
;;;657        if (dhcp == NULL) {
;;;658          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;659          return ERR_MEM;
;;;660        }
;;;661        /* store this dhcp client in the netif */
;;;662        netif->dhcp = dhcp;
;;;663        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;664      /* already has DHCP client attached */
;;;665      } else {
;;;666        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
;;;667        if (dhcp->pcb != NULL) {
;;;668          udp_remove(dhcp->pcb);
;;;669        }
;;;670        LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
;;;671        LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
;;;672      }
;;;673        
;;;674      /* clear data structure */
;;;675      memset(dhcp, 0, sizeof(struct dhcp));
;;;676      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;677      /* allocate UDP PCB */
;;;678      dhcp->pcb = udp_new();
;;;679      if (dhcp->pcb == NULL) {
;;;680        LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
;;;681        return ERR_MEM;
;;;682      }
;;;683      ip_set_option(dhcp->pcb, SOF_BROADCAST);
;;;684      /* set up local and remote port for the pcb */
;;;685      udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;686      udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
;;;687      /* set up the recv callback and argument */
;;;688      udp_recv(dhcp->pcb, dhcp_recv, netif);
;;;689      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;690      /* (re)start the DHCP negotiation */
;;;691      result = dhcp_discover(netif);
;;;692      if (result != ERR_OK) {
;;;693        /* free resources allocated above */
;;;694        dhcp_stop(netif);
;;;695        return ERR_MEM;
;;;696      }
;;;697      /* Set the flag that says this netif is handled by DHCP. */
;;;698      netif->flags |= NETIF_FLAG_DHCP;
;;;699      return result;
;;;700    }
000038  e8bd8070          POP      {r4-r6,pc}
                  |L30.60|
00003c  e1a00000          MOV      r0,r0                 ;634
000040  e5954020          LDR      r4,[r5,#0x20]         ;635
000044  e5d5002d          LDRB     r0,[r5,#0x2d]         ;639
000048  e3c00008          BIC      r0,r0,#8              ;639
00004c  e5c5002d          STRB     r0,[r5,#0x2d]         ;639
000050  e5d5002d          LDRB     r0,[r5,#0x2d]         ;642
000054  e2000020          AND      r0,r0,#0x20           ;642
000058  e3500000          CMP      r0,#0                 ;642
00005c  1a000001          BNE      |L30.104|
000060  e3e0000d          MVN      r0,#0xd               ;644
000064  eafffff3          B        |L30.56|
                  |L30.104|
000068  e1d502b4          LDRH     r0,[r5,#0x24]         ;648
00006c  e3500d09          CMP      r0,#0x240             ;648
000070  aa000001          BGE      |L30.124|
000074  e3e00000          MVN      r0,#0                 ;650
000078  eaffffee          B        |L30.56|
                  |L30.124|
00007c  e3540000          CMP      r4,#0                 ;654
000080  1a000008          BNE      |L30.168|
000084  e3a0003c          MOV      r0,#0x3c              ;656
000088  ebfffffe          BL       mem_malloc
00008c  e1a04000          MOV      r4,r0                 ;656
000090  e3540000          CMP      r4,#0                 ;657
000094  1a000001          BNE      |L30.160|
000098  e3e00000          MVN      r0,#0                 ;659
00009c  eaffffe5          B        |L30.56|
                  |L30.160|
0000a0  e5854020          STR      r4,[r5,#0x20]         ;662
0000a4  ea00001c          B        |L30.284|
                  |L30.168|
0000a8  e5940004          LDR      r0,[r4,#4]            ;667
0000ac  e3500000          CMP      r0,#0                 ;667
0000b0  0a000001          BEQ      |L30.188|
0000b4  e5940004          LDR      r0,[r4,#4]            ;668
0000b8  ebfffffe          BL       udp_remove
                  |L30.188|
0000bc  e1a00000          MOV      r0,r0                 ;670
0000c0  e5940010          LDR      r0,[r4,#0x10]         ;670
0000c4  e3500000          CMP      r0,#0                 ;670
0000c8  0a000006          BEQ      |L30.232|
0000cc  e1a00000          MOV      r0,r0                 ;670
0000d0  e28f30e8          ADR      r3,|L30.448|
0000d4  e59f213c          LDR      r2,|L30.536|
0000d8  e28f1f4f          ADR      r1,|L30.540|
0000dc  e28f0f43          ADR      r0,|L30.496|
0000e0  ebfffffe          BL       sysprintf
0000e4  e1a00000          MOV      r0,r0                 ;670
                  |L30.232|
0000e8  e1a00000          MOV      r0,r0                 ;670
0000ec  e1a00000          MOV      r0,r0                 ;671
0000f0  e5940008          LDR      r0,[r4,#8]            ;671
0000f4  e3500000          CMP      r0,#0                 ;671
0000f8  0a000006          BEQ      |L30.280|
0000fc  e1a00000          MOV      r0,r0                 ;671
000100  e28f30b8          ADR      r3,|L30.448|
000104  e59f2128          LDR      r2,|L30.564|
000108  e28f1f4a          ADR      r1,|L30.568|
00010c  e28f00dc          ADR      r0,|L30.496|
000110  ebfffffe          BL       sysprintf
000114  e1a00000          MOV      r0,r0                 ;671
                  |L30.280|
000118  e1a00000          MOV      r0,r0                 ;671
                  |L30.284|
00011c  e3a0103c          MOV      r1,#0x3c              ;675
000120  e1a00004          MOV      r0,r4                 ;675
000124  ebfffffe          BL       __aeabi_memclr4
000128  ebfffffe          BL       udp_new
00012c  e5840004          STR      r0,[r4,#4]            ;678
000130  e5940004          LDR      r0,[r4,#4]            ;679
000134  e3500000          CMP      r0,#0                 ;679
000138  1a000001          BNE      |L30.324|
00013c  e3e00000          MVN      r0,#0                 ;681
000140  eaffffbc          B        |L30.56|
                  |L30.324|
000144  e5940004          LDR      r0,[r4,#4]            ;683
000148  e5d00008          LDRB     r0,[r0,#8]            ;683
00014c  e3800020          ORR      r0,r0,#0x20           ;683
000150  e5941004          LDR      r1,[r4,#4]            ;683
000154  e5c10008          STRB     r0,[r1,#8]            ;683
000158  e3a02044          MOV      r2,#0x44              ;685
00015c  e59f10e8          LDR      r1,|L30.588|
000160  e5940004          LDR      r0,[r4,#4]            ;685
000164  ebfffffe          BL       udp_bind
000168  e3a02043          MOV      r2,#0x43              ;686
00016c  e59f10d8          LDR      r1,|L30.588|
000170  e5940004          LDR      r0,[r4,#4]            ;686
000174  ebfffffe          BL       udp_connect
000178  e1a02005          MOV      r2,r5                 ;688
00017c  e59f10cc          LDR      r1,|L30.592|
000180  e5940004          LDR      r0,[r4,#4]            ;688
000184  ebfffffe          BL       udp_recv
000188  e1a00005          MOV      r0,r5                 ;691
00018c  ebfffffe          BL       dhcp_discover
000190  e1a06000          MOV      r6,r0                 ;691
000194  e3560000          CMP      r6,#0                 ;692
000198  0a000003          BEQ      |L30.428|
00019c  e1a00005          MOV      r0,r5                 ;694
0001a0  ebfffffe          BL       dhcp_stop
0001a4  e3e00000          MVN      r0,#0                 ;695
0001a8  eaffffa2          B        |L30.56|
                  |L30.428|
0001ac  e5d5002d          LDRB     r0,[r5,#0x2d]         ;698
0001b0  e3800008          ORR      r0,r0,#8              ;698
0001b4  e5c5002d          STRB     r0,[r5,#0x2d]         ;698
0001b8  e1a00006          MOV      r0,r6                 ;699
0001bc  eaffff9d          B        |L30.56|
;;;701    
                          ENDP

                  |L30.448|
0001c0  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0001c4  2d312e34
0001c8  2e315c73
0001cc  72635c63
0001d0  6f72655c
0001d4  64686370
0001d8  2e6300  
0001db  00                DCB      0
                  |L30.476|
                          DCD      0x0000027a
                  |L30.480|
0001e0  6e657469          DCB      "netif != NULL",0
0001e4  6620213d
0001e8  204e554c
0001ec  4c00    
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L30.496|
0001f0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0001f4  7274696f
0001f8  6e202225
0001fc  73222066
000200  61696c65
000204  64206174
000208  206c696e
00020c  65202564
000210  20696e20
000214  25730a00
                  |L30.536|
                          DCD      0x0000029e
                  |L30.540|
00021c  70627566          DCB      "pbuf p_out wasn't freed",0
000220  20705f6f
000224  75742077
000228  61736e27
00022c  74206672
000230  65656400
                  |L30.564|
                          DCD      0x0000029f
                  |L30.568|
000238  7265706c          DCB      "reply wasn't freed",0
00023c  79207761
000240  736e2774
000244  20667265
000248  656400  
00024b  00                DCB      0
                  |L30.588|
                          DCD      ip_addr_any
                  |L30.592|
                          DCD      dhcp_recv

                          AREA ||i.dhcp_stop||, CODE, READONLY, ALIGN=2

                  dhcp_stop PROC
;;;1219   void
;;;1220   dhcp_stop(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1221   {
000004  e1a05000          MOV      r5,r0
;;;1222     struct dhcp *dhcp;
;;;1223     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
000008  e1a00000          MOV      r0,r0
00000c  e3550000          CMP      r5,#0
000010  1a000007          BNE      |L31.52|
000014  e1a00000          MOV      r0,r0
000018  e28f3090          ADR      r3,|L31.176|
00001c  e59f20a8          LDR      r2,|L31.204|
000020  e28f10a8          ADR      r1,|L31.208|
000024  e28f00c0          ADR      r0,|L31.236|
000028  ebfffffe          BL       sysprintf
00002c  e1a00000          MOV      r0,r0
                  |L31.48|
;;;1224     dhcp = netif->dhcp;
;;;1225     /* Remove the flag that says this netif is handled by DHCP. */
;;;1226     netif->flags &= ~NETIF_FLAG_DHCP;
;;;1227   
;;;1228     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
;;;1229     /* netif is DHCP configured? */
;;;1230     if (dhcp != NULL) {
;;;1231   #if LWIP_DHCP_AUTOIP_COOP
;;;1232       if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1233         autoip_stop(netif);
;;;1234         dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1235       }
;;;1236   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1237   
;;;1238       if (dhcp->pcb != NULL) {
;;;1239         udp_remove(dhcp->pcb);
;;;1240         dhcp->pcb = NULL;
;;;1241       }
;;;1242       LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
;;;1243       dhcp_set_state(dhcp, DHCP_OFF);
;;;1244     }
;;;1245   }
000030  e8bd8070          POP      {r4-r6,pc}
                  |L31.52|
000034  e1a00000          MOV      r0,r0                 ;1223
000038  e5954020          LDR      r4,[r5,#0x20]         ;1224
00003c  e5d5002d          LDRB     r0,[r5,#0x2d]         ;1226
000040  e3c00008          BIC      r0,r0,#8              ;1226
000044  e5c5002d          STRB     r0,[r5,#0x2d]         ;1226
000048  e3540000          CMP      r4,#0                 ;1230
00004c  0a000015          BEQ      |L31.168|
000050  e5940004          LDR      r0,[r4,#4]            ;1238
000054  e3500000          CMP      r0,#0                 ;1238
000058  0a000003          BEQ      |L31.108|
00005c  e5940004          LDR      r0,[r4,#4]            ;1239
000060  ebfffffe          BL       udp_remove
000064  e3a00000          MOV      r0,#0                 ;1240
000068  e5840004          STR      r0,[r4,#4]            ;1240
                  |L31.108|
00006c  e1a00000          MOV      r0,r0                 ;1242
000070  e5940008          LDR      r0,[r4,#8]            ;1242
000074  e3500000          CMP      r0,#0                 ;1242
000078  0a000006          BEQ      |L31.152|
00007c  e1a00000          MOV      r0,r0                 ;1242
000080  e28f3028          ADR      r3,|L31.176|
000084  e59f2088          LDR      r2,|L31.276|
000088  e28f1088          ADR      r1,|L31.280|
00008c  e28f0058          ADR      r0,|L31.236|
000090  ebfffffe          BL       sysprintf
000094  e1a00000          MOV      r0,r0                 ;1242
                  |L31.152|
000098  e1a00000          MOV      r0,r0                 ;1242
00009c  e3a01000          MOV      r1,#0                 ;1243
0000a0  e1a00004          MOV      r0,r4                 ;1243
0000a4  ebfffffe          BL       dhcp_set_state
                  |L31.168|
0000a8  e1a00000          MOV      r0,r0
0000ac  eaffffdf          B        |L31.48|
;;;1246   
                          ENDP

                  |L31.176|
0000b0  6c776970          DCB      "lwip-1.4.1\\src\\core\\dhcp.c",0
0000b4  2d312e34
0000b8  2e315c73
0000bc  72635c63
0000c0  6f72655c
0000c4  64686370
0000c8  2e6300  
0000cb  00                DCB      0
                  |L31.204|
                          DCD      0x000004c7
                  |L31.208|
0000d0  64686370          DCB      "dhcp_stop: netif != NULL",0
0000d4  5f73746f
0000d8  703a206e
0000dc  65746966
0000e0  20213d20
0000e4  4e554c4c
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L31.236|
0000ec  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000f0  7274696f
0000f4  6e202225
0000f8  73222066
0000fc  61696c65
000100  64206174
000104  206c696e
000108  65202564
00010c  20696e20
000110  25730a00
                  |L31.276|
                          DCD      0x000004da
                  |L31.280|
000118  7265706c          DCB      "reply wasn't freed",0
00011c  79207761
000120  736e2774
000124  20667265
000128  656400  
00012b  00                DCB      0

                          AREA ||i.dhcp_t1_timeout||, CODE, READONLY, ALIGN=2

                  dhcp_t1_timeout PROC
;;;464    static void
;;;465    dhcp_t1_timeout(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;466    {
000004  e1a05000          MOV      r5,r0
;;;467      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;468      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
;;;469      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
00000c  e5d4000c          LDRB     r0,[r4,#0xc]
000010  e3500001          CMP      r0,#1
000014  0a000005          BEQ      |L32.48|
000018  e5d4000c          LDRB     r0,[r4,#0xc]
00001c  e350000a          CMP      r0,#0xa
000020  0a000002          BEQ      |L32.48|
;;;470          (dhcp->state == DHCP_RENEWING)) {
000024  e5d4000c          LDRB     r0,[r4,#0xc]
000028  e3500005          CMP      r0,#5
00002c  1a000001          BNE      |L32.56|
                  |L32.48|
;;;471        /* just retry to renew - note that the rebind timer (t2) will
;;;472         * eventually time-out if renew tries fail. */
;;;473        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;474                    ("dhcp_t1_timeout(): must renew\n"));
;;;475        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;476           DHCP_RENEWING, not DHCP_BOUND */
;;;477        dhcp_renew(netif);
000030  e1a00005          MOV      r0,r5
000034  ebfffffe          BL       dhcp_renew
                  |L32.56|
;;;478      }
;;;479    }
000038  e8bd8070          POP      {r4-r6,pc}
;;;480    
                          ENDP


                          AREA ||i.dhcp_t2_timeout||, CODE, READONLY, ALIGN=2

                  dhcp_t2_timeout PROC
;;;486    static void
;;;487    dhcp_t2_timeout(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;488    {
000004  e1a05000          MOV      r5,r0
;;;489      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;490      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
;;;491      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
00000c  e5d4000c          LDRB     r0,[r4,#0xc]
000010  e3500001          CMP      r0,#1
000014  0a000005          BEQ      |L33.48|
000018  e5d4000c          LDRB     r0,[r4,#0xc]
00001c  e350000a          CMP      r0,#0xa
000020  0a000002          BEQ      |L33.48|
;;;492          (dhcp->state == DHCP_RENEWING)) {
000024  e5d4000c          LDRB     r0,[r4,#0xc]
000028  e3500005          CMP      r0,#5
00002c  1a000001          BNE      |L33.56|
                  |L33.48|
;;;493        /* just retry to rebind */
;;;494        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;495                    ("dhcp_t2_timeout(): must rebind\n"));
;;;496        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;497           DHCP_REBINDING, not DHCP_BOUND */
;;;498        dhcp_rebind(netif);
000030  e1a00005          MOV      r0,r5
000034  ebfffffe          BL       dhcp_rebind
                  |L33.56|
;;;499      }
;;;500    }
000038  e8bd8070          POP      {r4-r6,pc}
;;;501    
                          ENDP


                          AREA ||i.dhcp_timeout||, CODE, READONLY, ALIGN=2

                  dhcp_timeout PROC
;;;401    static void
;;;402    dhcp_timeout(struct netif *netif)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;403    {
000004  e1a05000          MOV      r5,r0
;;;404      struct dhcp *dhcp = netif->dhcp;
000008  e5954020          LDR      r4,[r5,#0x20]
;;;405      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
;;;406      /* back-off period has passed, or server selection timed out */
;;;407      if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
00000c  e5d4000c          LDRB     r0,[r4,#0xc]
000010  e350000c          CMP      r0,#0xc
000014  0a000002          BEQ      |L34.36|
000018  e5d4000c          LDRB     r0,[r4,#0xc]
00001c  e3500006          CMP      r0,#6
000020  1a000002          BNE      |L34.48|
                  |L34.36|
;;;408        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
;;;409        dhcp_discover(netif);
000024  e1a00005          MOV      r0,r5
000028  ebfffffe          BL       dhcp_discover
00002c  ea000038          B        |L34.276|
                  |L34.48|
;;;410      /* receiving the requested lease timed out */
;;;411      } else if (dhcp->state == DHCP_REQUESTING) {
000030  e5d4000c          LDRB     r0,[r4,#0xc]
000034  e3500001          CMP      r0,#1
000038  1a00000a          BNE      |L34.104|
;;;412        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
;;;413        if (dhcp->tries <= 5) {
00003c  e5d4000d          LDRB     r0,[r4,#0xd]
000040  e3500005          CMP      r0,#5
000044  ca000002          BGT      |L34.84|
;;;414          dhcp_select(netif);
000048  e1a00005          MOV      r0,r5
00004c  ebfffffe          BL       dhcp_select
000050  ea00002f          B        |L34.276|
                  |L34.84|
;;;415        } else {
;;;416          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
;;;417          dhcp_release(netif);
000054  e1a00005          MOV      r0,r5
000058  ebfffffe          BL       dhcp_release
;;;418          dhcp_discover(netif);
00005c  e1a00005          MOV      r0,r5
000060  ebfffffe          BL       dhcp_discover
000064  ea00002a          B        |L34.276|
                  |L34.104|
;;;419        }
;;;420    #if DHCP_DOES_ARP_CHECK
;;;421      /* received no ARP reply for the offered address (which is good) */
;;;422      } else if (dhcp->state == DHCP_CHECKING) {
000068  e5d4000c          LDRB     r0,[r4,#0xc]
00006c  e3500008          CMP      r0,#8
000070  1a000008          BNE      |L34.152|
;;;423        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
;;;424        if (dhcp->tries <= 1) {
000074  e5d4000d          LDRB     r0,[r4,#0xd]
000078  e3500001          CMP      r0,#1
00007c  ca000002          BGT      |L34.140|
;;;425          dhcp_check(netif);
000080  e1a00005          MOV      r0,r5
000084  ebfffffe          BL       dhcp_check
000088  ea000021          B        |L34.276|
                  |L34.140|
;;;426        /* no ARP replies on the offered address,
;;;427           looks like the IP address is indeed free */
;;;428        } else {
;;;429          /* bind the interface to the offered address */
;;;430          dhcp_bind(netif);
00008c  e1a00005          MOV      r0,r5
000090  ebfffffe          BL       dhcp_bind
000094  ea00001e          B        |L34.276|
                  |L34.152|
;;;431        }
;;;432    #endif /* DHCP_DOES_ARP_CHECK */
;;;433      }
;;;434      /* did not get response to renew request? */
;;;435      else if (dhcp->state == DHCP_RENEWING) {
000098  e5d4000c          LDRB     r0,[r4,#0xc]
00009c  e3500005          CMP      r0,#5
0000a0  1a000002          BNE      |L34.176|
;;;436        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
;;;437        /* just retry renewal */
;;;438        /* note that the rebind timer will eventually time-out if renew does not work */
;;;439        dhcp_renew(netif);
0000a4  e1a00005          MOV      r0,r5
0000a8  ebfffffe          BL       dhcp_renew
0000ac  ea000018          B        |L34.276|
                  |L34.176|
;;;440      /* did not get response to rebind request? */
;;;441      } else if (dhcp->state == DHCP_REBINDING) {
0000b0  e5d4000c          LDRB     r0,[r4,#0xc]
0000b4  e3500004          CMP      r0,#4
0000b8  1a00000a          BNE      |L34.232|
;;;442        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
;;;443        if (dhcp->tries <= 8) {
0000bc  e5d4000d          LDRB     r0,[r4,#0xd]
0000c0  e3500008          CMP      r0,#8
0000c4  ca000002          BGT      |L34.212|
;;;444          dhcp_rebind(netif);
0000c8  e1a00005          MOV      r0,r5
0000cc  ebfffffe          BL       dhcp_rebind
0000d0  ea00000f          B        |L34.276|
                  |L34.212|
;;;445        } else {
;;;446          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
;;;447          dhcp_release(netif);
0000d4  e1a00005          MOV      r0,r5
0000d8  ebfffffe          BL       dhcp_release
;;;448          dhcp_discover(netif);
0000dc  e1a00005          MOV      r0,r5
0000e0  ebfffffe          BL       dhcp_discover
0000e4  ea00000a          B        |L34.276|
                  |L34.232|
;;;449        }
;;;450      } else if (dhcp->state == DHCP_REBOOTING) {
0000e8  e5d4000c          LDRB     r0,[r4,#0xc]
0000ec  e3500003          CMP      r0,#3
0000f0  1a000007          BNE      |L34.276|
;;;451        if (dhcp->tries < REBOOT_TRIES) {
0000f4  e5d4000d          LDRB     r0,[r4,#0xd]
0000f8  e3500002          CMP      r0,#2
0000fc  aa000002          BGE      |L34.268|
;;;452          dhcp_reboot(netif);
000100  e1a00005          MOV      r0,r5
000104  ebfffffe          BL       dhcp_reboot
000108  ea000001          B        |L34.276|
                  |L34.268|
;;;453        } else {
;;;454          dhcp_discover(netif);
00010c  e1a00005          MOV      r0,r5
000110  ebfffffe          BL       dhcp_discover
                  |L34.276|
;;;455        }
;;;456      }
;;;457    }
000114  e8bd8070          POP      {r4-r6,pc}
;;;458    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dhcp_rx_options_val
                          %        40
                  dhcp_rx_options_given
                          %        10

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  64686370          DCB      "dhcp_option: dhcp->options_out_len + 2 + option_len <= "
000004  5f6f7074
000008  696f6e3a
00000c  20646863
000010  702d3e6f
000014  7074696f
000018  6e735f6f
00001c  75745f6c
000020  656e202b
000024  2032202b
000028  206f7074
00002c  696f6e5f
000030  6c656e20
000034  3c3d20  
000037  44484350          DCB      "DHCP_OPTIONS_LEN",0
00003b  5f4f5054
00003f  494f4e53
000043  5f4c454e
000047  00      
000048  64686370          DCB      "dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OP"
00004c  5f6f7074
000050  696f6e5f
000054  73686f72
000058  743a2064
00005c  6863702d
000060  3e6f7074
000064  696f6e73
000068  5f6f7574
00006c  5f6c656e
000070  202b2032
000074  203c3d20
000078  44484350
00007c  5f4f50  
00007f  54494f4e          DCB      "TIONS_LEN",0
000083  535f4c45
000087  4e00    

                          AREA ||.data||, DATA, ALIGN=2

                  xid
                          DCD      0xabcd0000
