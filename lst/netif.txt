; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\netif.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\netif.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\netif.crf lwip-1.4.1\src\core\netif.c]
                          ARM

                          AREA ||i.netif_add||, CODE, READONLY, ALIGN=2

                  netif_add PROC
;;;138    struct netif *
;;;139    netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;140      ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
;;;141    {
000004  e1a04000          MOV      r4,r0
000008  e1a06001          MOV      r6,r1
00000c  e1a07002          MOV      r7,r2
000010  e1a08003          MOV      r8,r3
000014  e59d5024          LDR      r5,[sp,#0x24]
000018  e59da028          LDR      r10,[sp,#0x28]
00001c  e59d9020          LDR      r9,[sp,#0x20]
;;;142    
;;;143      LWIP_ASSERT("No init function given", init != NULL);
000020  e1a00000          MOV      r0,r0
000024  e3550000          CMP      r5,#0
000028  1a000006          BNE      |L1.72|
00002c  e1a00000          MOV      r0,r0
000030  e28f309c          ADR      r3,|L1.212|
000034  e3a0208f          MOV      r2,#0x8f
000038  e28f10b0          ADR      r1,|L1.240|
00003c  e28f00c4          ADR      r0,|L1.264|
000040  ebfffffe          BL       sysprintf
000044  e1a00000          MOV      r0,r0
                  |L1.72|
000048  e1a00000          MOV      r0,r0
;;;144    
;;;145      /* reset new interface configuration state */
;;;146      ip_addr_set_zero(&netif->ip_addr);
00004c  e3a00000          MOV      r0,#0
000050  e5840004          STR      r0,[r4,#4]
;;;147      ip_addr_set_zero(&netif->netmask);
000054  e5840008          STR      r0,[r4,#8]
;;;148      ip_addr_set_zero(&netif->gw);
000058  e584000c          STR      r0,[r4,#0xc]
;;;149      netif->flags = 0;
00005c  e5c4002d          STRB     r0,[r4,#0x2d]
;;;150    #if LWIP_DHCP
;;;151      /* netif not under DHCP control by default */
;;;152      netif->dhcp = NULL;
000060  e5840020          STR      r0,[r4,#0x20]
;;;153    #endif /* LWIP_DHCP */
;;;154    #if LWIP_AUTOIP
;;;155      /* netif not under AutoIP control by default */
;;;156      netif->autoip = NULL;
;;;157    #endif /* LWIP_AUTOIP */
;;;158    #if LWIP_NETIF_STATUS_CALLBACK
;;;159      netif->status_callback = NULL;
;;;160    #endif /* LWIP_NETIF_STATUS_CALLBACK */
;;;161    #if LWIP_NETIF_LINK_CALLBACK
;;;162      netif->link_callback = NULL;
;;;163    #endif /* LWIP_NETIF_LINK_CALLBACK */
;;;164    #if LWIP_IGMP
;;;165      netif->igmp_mac_filter = NULL;
;;;166    #endif /* LWIP_IGMP */
;;;167    #if ENABLE_LOOPBACK
;;;168      netif->loop_first = NULL;
;;;169      netif->loop_last = NULL;
;;;170    #endif /* ENABLE_LOOPBACK */
;;;171    
;;;172      /* remember netif specific state information data */
;;;173      netif->state = state;
000064  e584901c          STR      r9,[r4,#0x1c]
;;;174      netif->num = netif_num++;
000068  e59f00c0          LDR      r0,|L1.304|
00006c  e5d00000          LDRB     r0,[r0,#0]  ; netif_num
000070  e5c40030          STRB     r0,[r4,#0x30]
000074  e59f00b4          LDR      r0,|L1.304|
000078  e5d00000          LDRB     r0,[r0,#0]  ; netif_num
00007c  e2800001          ADD      r0,r0,#1
000080  e59f10a8          LDR      r1,|L1.304|
000084  e5c10000          STRB     r0,[r1,#0]  ; netif_num
;;;175      netif->input = input;
000088  e584a010          STR      r10,[r4,#0x10]
;;;176      NETIF_SET_HWADDRHINT(netif, NULL);
;;;177    #if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
;;;178      netif->loop_cnt_current = 0;
;;;179    #endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
;;;180    
;;;181      netif_set_addr(netif, ipaddr, netmask, gw);
00008c  e1a03008          MOV      r3,r8
000090  e1a02007          MOV      r2,r7
000094  e1a01006          MOV      r1,r6
000098  e1a00004          MOV      r0,r4
00009c  ebfffffe          BL       netif_set_addr
;;;182    
;;;183      /* call user specified initialization function for netif */
;;;184      if (init(netif) != ERR_OK) {
0000a0  e1a00004          MOV      r0,r4
0000a4  e12fff35          BLX      r5
0000a8  e3500000          CMP      r0,#0
0000ac  0a000001          BEQ      |L1.184|
;;;185        return NULL;
0000b0  e3a00000          MOV      r0,#0
                  |L1.180|
;;;186      }
;;;187    
;;;188      /* add this netif to the list */
;;;189      netif->next = netif_list;
;;;190      netif_list = netif;
;;;191      snmp_inc_iflist();
;;;192    
;;;193    #if LWIP_IGMP
;;;194      /* start IGMP processing */
;;;195      if (netif->flags & NETIF_FLAG_IGMP) {
;;;196        igmp_start(netif);
;;;197      }
;;;198    #endif /* LWIP_IGMP */
;;;199    
;;;200      LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP addr ",
;;;201        netif->name[0], netif->name[1]));
;;;202      ip_addr_debug_print(NETIF_DEBUG, ipaddr);
;;;203      LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
;;;204      ip_addr_debug_print(NETIF_DEBUG, netmask);
;;;205      LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
;;;206      ip_addr_debug_print(NETIF_DEBUG, gw);
;;;207      LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
;;;208      return netif;
;;;209    }
0000b4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.184|
0000b8  e59f0074          LDR      r0,|L1.308|
0000bc  e5900000          LDR      r0,[r0,#0]            ;189  ; netif_list
0000c0  e5840000          STR      r0,[r4,#0]            ;189
0000c4  e59f0068          LDR      r0,|L1.308|
0000c8  e5804000          STR      r4,[r0,#0]            ;190  ; netif_list
0000cc  e1a00004          MOV      r0,r4                 ;208
0000d0  eafffff7          B        |L1.180|
;;;210    
                          ENDP

                  |L1.212|
0000d4  6c776970          DCB      "lwip-1.4.1\\src\\core\\netif.c",0
0000d8  2d312e34
0000dc  2e315c73
0000e0  72635c63
0000e4  6f72655c
0000e8  6e657469
0000ec  662e6300
                  |L1.240|
0000f0  4e6f2069          DCB      "No init function given",0
0000f4  6e697420
0000f8  66756e63
0000fc  74696f6e
000100  20676976
000104  656e00  
000107  00                DCB      0
                  |L1.264|
000108  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00010c  7274696f
000110  6e202225
000114  73222066
000118  61696c65
00011c  64206174
000120  206c696e
000124  65202564
000128  20696e20
00012c  25730a00
                  |L1.304|
                          DCD      netif_num
                  |L1.308|
                          DCD      netif_list

                          AREA ||i.netif_find||, CODE, READONLY, ALIGN=2

                  netif_find PROC
;;;289    struct netif *
;;;290    netif_find(char *name)
000000  e1a02000          MOV      r2,r0
;;;291    {
;;;292      struct netif *netif;
;;;293      u8_t num;
;;;294    
;;;295      if (name == NULL) {
000004  e3520000          CMP      r2,#0
000008  1a000001          BNE      |L2.20|
;;;296        return NULL;
00000c  e3a00000          MOV      r0,#0
                  |L2.16|
;;;297      }
;;;298    
;;;299      num = name[2] - '0';
;;;300    
;;;301      for(netif = netif_list; netif != NULL; netif = netif->next) {
;;;302        if (num == netif->num &&
;;;303           name[0] == netif->name[0] &&
;;;304           name[1] == netif->name[1]) {
;;;305          LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
;;;306          return netif;
;;;307        }
;;;308      }
;;;309      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
;;;310      return NULL;
;;;311    }
000010  e12fff1e          BX       lr
                  |L2.20|
000014  e5d20002          LDRB     r0,[r2,#2]            ;299
000018  e2400030          SUB      r0,r0,#0x30           ;299
00001c  e20030ff          AND      r3,r0,#0xff           ;299
000020  e59f004c          LDR      r0,|L2.116|
000024  e5901000          LDR      r1,[r0,#0]            ;301  ; netif_list
000028  ea00000d          B        |L2.100|
                  |L2.44|
00002c  e5d10030          LDRB     r0,[r1,#0x30]         ;302
000030  e1500003          CMP      r0,r3                 ;302
000034  1a000009          BNE      |L2.96|
000038  e5d20000          LDRB     r0,[r2,#0]            ;303
00003c  e5d1c02e          LDRB     r12,[r1,#0x2e]        ;303
000040  e150000c          CMP      r0,r12                ;303
000044  1a000005          BNE      |L2.96|
000048  e5d20001          LDRB     r0,[r2,#1]            ;304
00004c  e5d1c02f          LDRB     r12,[r1,#0x2f]        ;304
000050  e150000c          CMP      r0,r12                ;304
000054  1a000001          BNE      |L2.96|
000058  e1a00001          MOV      r0,r1                 ;306
00005c  eaffffeb          B        |L2.16|
                  |L2.96|
000060  e5911000          LDR      r1,[r1,#0]            ;301
                  |L2.100|
000064  e3510000          CMP      r1,#0                 ;301
000068  1affffef          BNE      |L2.44|
00006c  e3a00000          MOV      r0,#0                 ;310
000070  eaffffe6          B        |L2.16|
;;;312    
                          ENDP

                  |L2.116|
                          DCD      netif_list

                          AREA ||i.netif_init||, CODE, READONLY, ALIGN=2

                  netif_init PROC
;;;105    void
;;;106    netif_init(void)
000000  e12fff1e          BX       lr
;;;107    {
;;;108    #if LWIP_HAVE_LOOPIF
;;;109      ip_addr_t loop_ipaddr, loop_netmask, loop_gw;
;;;110      IP4_ADDR(&loop_gw, 127,0,0,1);
;;;111      IP4_ADDR(&loop_ipaddr, 127,0,0,1);
;;;112      IP4_ADDR(&loop_netmask, 255,0,0,0);
;;;113    
;;;114    #if NO_SYS
;;;115      netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, ip_input);
;;;116    #else  /* NO_SYS */
;;;117      netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
;;;118    #endif /* NO_SYS */
;;;119      netif_set_up(&loop_netif);
;;;120    
;;;121    #endif /* LWIP_HAVE_LOOPIF */
;;;122    }
;;;123    
                          ENDP


                          AREA ||i.netif_remove||, CODE, READONLY, ALIGN=2

                  netif_remove PROC
;;;234    void
;;;235    netif_remove(struct netif *netif)
000000  e92d4010          PUSH     {r4,lr}
;;;236    {
000004  e1a04000          MOV      r4,r0
;;;237      if (netif == NULL) {
000008  e3540000          CMP      r4,#0
00000c  1a000000          BNE      |L4.20|
                  |L4.16|
;;;238        return;
;;;239      }
;;;240    
;;;241    #if LWIP_IGMP
;;;242      /* stop IGMP processing */
;;;243      if (netif->flags & NETIF_FLAG_IGMP) {
;;;244        igmp_stop(netif);
;;;245      }
;;;246    #endif /* LWIP_IGMP */
;;;247      if (netif_is_up(netif)) {
;;;248        /* set netif down before removing (call callback function) */
;;;249        netif_set_down(netif);
;;;250      }
;;;251    
;;;252      snmp_delete_ipaddridx_tree(netif);
;;;253    
;;;254      /*  is it the first netif? */
;;;255      if (netif_list == netif) {
;;;256        netif_list = netif->next;
;;;257      } else {
;;;258        /*  look for netif further down the list */
;;;259        struct netif * tmpNetif;
;;;260        for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
;;;261          if (tmpNetif->next == netif) {
;;;262            tmpNetif->next = netif->next;
;;;263            break;
;;;264          }
;;;265        }
;;;266        if (tmpNetif == NULL)
;;;267          return; /*  we didn't find any netif today */
;;;268      }
;;;269      snmp_dec_iflist();
;;;270      /* this netif is default? */
;;;271      if (netif_default == netif) {
;;;272        /* reset default netif */
;;;273        netif_set_default(NULL);
;;;274      }
;;;275    #if LWIP_NETIF_REMOVE_CALLBACK
;;;276      if (netif->remove_callback) {
;;;277        netif->remove_callback(netif);
;;;278      }
;;;279    #endif /* LWIP_NETIF_REMOVE_CALLBACK */
;;;280      LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
;;;281    }
000010  e8bd8010          POP      {r4,pc}
                  |L4.20|
000014  e5d4002d          LDRB     r0,[r4,#0x2d]         ;247
000018  e2000001          AND      r0,r0,#1              ;247
00001c  e3500000          CMP      r0,#0                 ;247
000020  0a000001          BEQ      |L4.44|
000024  e1a00004          MOV      r0,r4                 ;249
000028  ebfffffe          BL       netif_set_down
                  |L4.44|
00002c  e59f007c          LDR      r0,|L4.176|
000030  e5900000          LDR      r0,[r0,#0]            ;255  ; netif_list
000034  e1500004          CMP      r0,r4                 ;255
000038  1a000003          BNE      |L4.76|
00003c  e59f106c          LDR      r1,|L4.176|
000040  e5940000          LDR      r0,[r4,#0]            ;256
000044  e5810000          STR      r0,[r1,#0]            ;256  ; netif_list
000048  ea000010          B        |L4.144|
                  |L4.76|
00004c  e59f105c          LDR      r1,|L4.176|
000050  e5910000          LDR      r0,[r1,#0]            ;260  ; netif_list
000054  ea000006          B        |L4.116|
                  |L4.88|
000058  e5901000          LDR      r1,[r0,#0]            ;261
00005c  e1510004          CMP      r1,r4                 ;261
000060  1a000002          BNE      |L4.112|
000064  e5941000          LDR      r1,[r4,#0]            ;262
000068  e5801000          STR      r1,[r0,#0]            ;262
00006c  ea000002          B        |L4.124|
                  |L4.112|
000070  e5900000          LDR      r0,[r0,#0]            ;260
                  |L4.116|
000074  e3500000          CMP      r0,#0                 ;260
000078  1afffff6          BNE      |L4.88|
                  |L4.124|
00007c  e1a00000          MOV      r0,r0                 ;263
000080  e3500000          CMP      r0,#0                 ;266
000084  1a000000          BNE      |L4.140|
000088  eaffffe0          B        |L4.16|
                  |L4.140|
00008c  e1a00000          MOV      r0,r0                 ;268
                  |L4.144|
000090  e59f001c          LDR      r0,|L4.180|
000094  e5900000          LDR      r0,[r0,#0]            ;271  ; netif_default
000098  e1500004          CMP      r0,r4                 ;271
00009c  1a000001          BNE      |L4.168|
0000a0  e3a00000          MOV      r0,#0                 ;273
0000a4  ebfffffe          BL       netif_set_default
                  |L4.168|
0000a8  e1a00000          MOV      r0,r0
0000ac  eaffffd7          B        |L4.16|
;;;282    
                          ENDP

                  |L4.176|
                          DCD      netif_list
                  |L4.180|
                          DCD      netif_default

                          AREA ||i.netif_set_addr||, CODE, READONLY, ALIGN=2

                  netif_set_addr PROC
;;;220    void
;;;221    netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;222        ip_addr_t *gw)
;;;223    {
000004  e1a06000          MOV      r6,r0
000008  e1a07001          MOV      r7,r1
00000c  e1a04002          MOV      r4,r2
000010  e1a05003          MOV      r5,r3
;;;224      netif_set_ipaddr(netif, ipaddr);
000014  e1a01007          MOV      r1,r7
000018  e1a00006          MOV      r0,r6
00001c  ebfffffe          BL       netif_set_ipaddr
;;;225      netif_set_netmask(netif, netmask);
000020  e1a01004          MOV      r1,r4
000024  e1a00006          MOV      r0,r6
000028  ebfffffe          BL       netif_set_netmask
;;;226      netif_set_gw(netif, gw);
00002c  e1a01005          MOV      r1,r5
000030  e1a00006          MOV      r0,r6
000034  ebfffffe          BL       netif_set_gw
;;;227    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;228    
                          ENDP


                          AREA ||i.netif_set_default||, CODE, READONLY, ALIGN=2

                  netif_set_default PROC
;;;429    void
;;;430    netif_set_default(struct netif *netif)
000000  e59f1004          LDR      r1,|L6.12|
;;;431    {
;;;432      if (netif == NULL) {
;;;433        /* remove default route */
;;;434        snmp_delete_iprteidx_tree(1, netif);
;;;435      } else {
;;;436        /* install default route */
;;;437        snmp_insert_iprteidx_tree(1, netif);
;;;438      }
;;;439      netif_default = netif;
000004  e5810000          STR      r0,[r1,#0]  ; netif_default
;;;440      LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
;;;441               netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
;;;442    }
000008  e12fff1e          BX       lr
;;;443    
                          ENDP

                  |L6.12|
                          DCD      netif_default

                          AREA ||i.netif_set_down||, CODE, READONLY, ALIGN=2

                  netif_set_down PROC
;;;489     */ 
;;;490    void netif_set_down(struct netif *netif)
000000  e92d4010          PUSH     {r4,lr}
;;;491    {
000004  e1a04000          MOV      r4,r0
;;;492      if (netif->flags & NETIF_FLAG_UP) {
000008  e5d4002d          LDRB     r0,[r4,#0x2d]
00000c  e2000001          AND      r0,r0,#1
000010  e3500000          CMP      r0,#0
000014  0a000008          BEQ      |L7.60|
;;;493        netif->flags &= ~NETIF_FLAG_UP;
000018  e5d4002d          LDRB     r0,[r4,#0x2d]
00001c  e3c00001          BIC      r0,r0,#1
000020  e5c4002d          STRB     r0,[r4,#0x2d]
;;;494    #if LWIP_SNMP
;;;495        snmp_get_sysuptime(&netif->ts);
;;;496    #endif
;;;497    
;;;498    #if LWIP_ARP
;;;499        if (netif->flags & NETIF_FLAG_ETHARP) {
000024  e5d4002d          LDRB     r0,[r4,#0x2d]
000028  e2000020          AND      r0,r0,#0x20
00002c  e3500000          CMP      r0,#0
000030  0a000001          BEQ      |L7.60|
;;;500          etharp_cleanup_netif(netif);
000034  e1a00004          MOV      r0,r4
000038  ebfffffe          BL       etharp_cleanup_netif
                  |L7.60|
;;;501        }
;;;502    #endif /* LWIP_ARP */
;;;503        NETIF_STATUS_CALLBACK(netif);
;;;504      }
;;;505    }
00003c  e8bd8010          POP      {r4,pc}
;;;506    
                          ENDP


                          AREA ||i.netif_set_gw||, CODE, READONLY, ALIGN=2

                  netif_set_gw PROC
;;;387    void
;;;388    netif_set_gw(struct netif *netif, ip_addr_t *gw)
000000  e3510000          CMP      r1,#0
;;;389    {
;;;390      ip_addr_set(&(netif->gw), gw);
000004  1a000001          BNE      |L8.16|
000008  e3a02000          MOV      r2,#0
00000c  ea000000          B        |L8.20|
                  |L8.16|
000010  e5912000          LDR      r2,[r1,#0]
                  |L8.20|
000014  e580200c          STR      r2,[r0,#0xc]
;;;391      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;392        netif->name[0], netif->name[1],
;;;393        ip4_addr1_16(&netif->gw),
;;;394        ip4_addr2_16(&netif->gw),
;;;395        ip4_addr3_16(&netif->gw),
;;;396        ip4_addr4_16(&netif->gw)));
;;;397    }
000018  e12fff1e          BX       lr
;;;398    
                          ENDP


                          AREA ||i.netif_set_ipaddr||, CODE, READONLY, ALIGN=2

                  netif_set_ipaddr PROC
;;;322    void
;;;323    netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;324    {
000004  e1a07000          MOV      r7,r0
000008  e1a04001          MOV      r4,r1
;;;325      /* TODO: Handling of obsolete pcbs */
;;;326      /* See:  http://mail.gnu.org/archive/html/lwip-users/2003-03/msg00118.html */
;;;327    #if LWIP_TCP
;;;328      struct tcp_pcb *pcb;
;;;329      struct tcp_pcb_listen *lpcb;
;;;330    
;;;331      /* address is actually being changed? */
;;;332      if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
00000c  e3540000          CMP      r4,#0
000010  0a00002c          BEQ      |L9.200|
000014  e5940000          LDR      r0,[r4,#0]
000018  e5971004          LDR      r1,[r7,#4]
00001c  e1500001          CMP      r0,r1
000020  1a000001          BNE      |L9.44|
000024  e3a00001          MOV      r0,#1
000028  ea000000          B        |L9.48|
                  |L9.44|
00002c  e3a00000          MOV      r0,#0
                  |L9.48|
000030  e3500000          CMP      r0,#0
000034  1a000023          BNE      |L9.200|
;;;333        /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
;;;334        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
;;;335        pcb = tcp_active_pcbs;
000038  e59f00a4          LDR      r0,|L9.228|
00003c  e5906000          LDR      r6,[r0,#0]  ; tcp_active_pcbs
;;;336        while (pcb != NULL) {
000040  ea000009          B        |L9.108|
                  |L9.68|
;;;337          /* PCB bound to current local interface address? */
;;;338          if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
000044  e5960000          LDR      r0,[r6,#0]
000048  e5971004          LDR      r1,[r7,#4]
00004c  e1500001          CMP      r0,r1
000050  1a000004          BNE      |L9.104|
;;;339    #if LWIP_AUTOIP
;;;340            /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
;;;341            && !ip_addr_islinklocal(&(pcb->local_ip))
;;;342    #endif /* LWIP_AUTOIP */
;;;343            ) {
;;;344            /* this connection must be aborted */
;;;345            struct tcp_pcb *next = pcb->next;
000054  e596800c          LDR      r8,[r6,#0xc]
;;;346            LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
;;;347            tcp_abort(pcb);
000058  e1a00006          MOV      r0,r6
00005c  ebfffffe          BL       tcp_abort
;;;348            pcb = next;
000060  e1a06008          MOV      r6,r8
;;;349          } else {
000064  ea000000          B        |L9.108|
                  |L9.104|
;;;350            pcb = pcb->next;
000068  e596600c          LDR      r6,[r6,#0xc]
                  |L9.108|
00006c  e3560000          CMP      r6,#0                 ;336
000070  1afffff3          BNE      |L9.68|
;;;351          }
;;;352        }
;;;353        for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
000074  e59f006c          LDR      r0,|L9.232|
000078  e5905000          LDR      r5,[r0,#0]  ; tcp_listen_pcbs
00007c  ea00000f          B        |L9.192|
                  |L9.128|
;;;354          /* PCB bound to current local interface address? */
;;;355          if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
000080  e3550000          CMP      r5,#0
000084  0a00000c          BEQ      |L9.188|
000088  e5950000          LDR      r0,[r5,#0]
00008c  e3500000          CMP      r0,#0
000090  0a000009          BEQ      |L9.188|
;;;356              (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
000094  e5950000          LDR      r0,[r5,#0]
000098  e5971004          LDR      r1,[r7,#4]
00009c  e1500001          CMP      r0,r1
0000a0  1a000005          BNE      |L9.188|
;;;357            /* The PCB is listening to the old ipaddr and
;;;358             * is set to listen to the new one instead */
;;;359            ip_addr_set(&(lpcb->local_ip), ipaddr);
0000a4  e3540000          CMP      r4,#0
0000a8  1a000001          BNE      |L9.180|
0000ac  e3a00000          MOV      r0,#0
0000b0  ea000000          B        |L9.184|
                  |L9.180|
0000b4  e5940000          LDR      r0,[r4,#0]
                  |L9.184|
0000b8  e5850000          STR      r0,[r5,#0]
                  |L9.188|
0000bc  e595500c          LDR      r5,[r5,#0xc]          ;353
                  |L9.192|
0000c0  e3550000          CMP      r5,#0                 ;353
0000c4  1affffed          BNE      |L9.128|
                  |L9.200|
;;;360          }
;;;361        }
;;;362      }
;;;363    #endif
;;;364      snmp_delete_ipaddridx_tree(netif);
;;;365      snmp_delete_iprteidx_tree(0,netif);
;;;366      /* set new IP address to netif */
;;;367      ip_addr_set(&(netif->ip_addr), ipaddr);
0000c8  e3540000          CMP      r4,#0
0000cc  1a000001          BNE      |L9.216|
0000d0  e3a00000          MOV      r0,#0
0000d4  ea000000          B        |L9.220|
                  |L9.216|
0000d8  e5940000          LDR      r0,[r4,#0]
                  |L9.220|
0000dc  e5870004          STR      r0,[r7,#4]
;;;368      snmp_insert_ipaddridx_tree(netif);
;;;369      snmp_insert_iprteidx_tree(0,netif);
;;;370    
;;;371      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: IP address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;372        netif->name[0], netif->name[1],
;;;373        ip4_addr1_16(&netif->ip_addr),
;;;374        ip4_addr2_16(&netif->ip_addr),
;;;375        ip4_addr3_16(&netif->ip_addr),
;;;376        ip4_addr4_16(&netif->ip_addr)));
;;;377    }
0000e0  e8bd81f0          POP      {r4-r8,pc}
;;;378    
                          ENDP

                  |L9.228|
                          DCD      tcp_active_pcbs
                  |L9.232|
                          DCD      tcp_listen_pcbs

                          AREA ||i.netif_set_link_down||, CODE, READONLY, ALIGN=2

                  netif_set_link_down PROC
;;;573     */
;;;574    void netif_set_link_down(struct netif *netif )
000000  e5d0102d          LDRB     r1,[r0,#0x2d]
;;;575    {
;;;576      if (netif->flags & NETIF_FLAG_LINK_UP) {
000004  e2011010          AND      r1,r1,#0x10
000008  e3510000          CMP      r1,#0
00000c  0a000002          BEQ      |L10.28|
;;;577        netif->flags &= ~NETIF_FLAG_LINK_UP;
000010  e5d0102d          LDRB     r1,[r0,#0x2d]
000014  e3c11010          BIC      r1,r1,#0x10
000018  e5c0102d          STRB     r1,[r0,#0x2d]
                  |L10.28|
;;;578        NETIF_LINK_CALLBACK(netif);
;;;579      }
;;;580    }
00001c  e12fff1e          BX       lr
;;;581    
                          ENDP


                          AREA ||i.netif_set_link_up||, CODE, READONLY, ALIGN=2

                  netif_set_link_up PROC
;;;534     */
;;;535    void netif_set_link_up(struct netif *netif )
000000  e92d4010          PUSH     {r4,lr}
;;;536    {
000004  e1a04000          MOV      r4,r0
;;;537      if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
000008  e5d4002d          LDRB     r0,[r4,#0x2d]
00000c  e2000010          AND      r0,r0,#0x10
000010  e3500000          CMP      r0,#0
000014  1a000012          BNE      |L11.100|
;;;538        netif->flags |= NETIF_FLAG_LINK_UP;
000018  e5d4002d          LDRB     r0,[r4,#0x2d]
00001c  e3800010          ORR      r0,r0,#0x10
000020  e5c4002d          STRB     r0,[r4,#0x2d]
;;;539    
;;;540    #if LWIP_DHCP
;;;541        if (netif->dhcp) {
000024  e5940020          LDR      r0,[r4,#0x20]
000028  e3500000          CMP      r0,#0
00002c  0a000001          BEQ      |L11.56|
;;;542          dhcp_network_changed(netif);
000030  e1a00004          MOV      r0,r4
000034  ebfffffe          BL       dhcp_network_changed
                  |L11.56|
;;;543        }
;;;544    #endif /* LWIP_DHCP */
;;;545    
;;;546    #if LWIP_AUTOIP
;;;547        if (netif->autoip) {
;;;548          autoip_network_changed(netif);
;;;549        }
;;;550    #endif /* LWIP_AUTOIP */
;;;551    
;;;552        if (netif->flags & NETIF_FLAG_UP) {
000038  e5d4002d          LDRB     r0,[r4,#0x2d]
00003c  e2000001          AND      r0,r0,#1
000040  e3500000          CMP      r0,#0
000044  0a000006          BEQ      |L11.100|
;;;553    #if LWIP_ARP
;;;554          /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
;;;555          if (netif->flags & NETIF_FLAG_ETHARP) {
000048  e5d4002d          LDRB     r0,[r4,#0x2d]
00004c  e2000020          AND      r0,r0,#0x20
000050  e3500000          CMP      r0,#0
000054  0a000002          BEQ      |L11.100|
;;;556            etharp_gratuitous(netif);
000058  e2841004          ADD      r1,r4,#4
00005c  e1a00004          MOV      r0,r4
000060  ebfffffe          BL       etharp_request
                  |L11.100|
;;;557          }
;;;558    #endif /* LWIP_ARP */
;;;559    
;;;560    #if LWIP_IGMP
;;;561          /* resend IGMP memberships */
;;;562          if (netif->flags & NETIF_FLAG_IGMP) {
;;;563            igmp_report_groups( netif);
;;;564          }
;;;565    #endif /* LWIP_IGMP */
;;;566        }
;;;567        NETIF_LINK_CALLBACK(netif);
;;;568      }
;;;569    }
000064  e8bd8010          POP      {r4,pc}
;;;570    
                          ENDP


                          AREA ||i.netif_set_netmask||, CODE, READONLY, ALIGN=2

                  netif_set_netmask PROC
;;;408    void
;;;409    netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
000000  e3510000          CMP      r1,#0
;;;410    {
;;;411      snmp_delete_iprteidx_tree(0, netif);
;;;412      /* set new netmask to netif */
;;;413      ip_addr_set(&(netif->netmask), netmask);
000004  1a000001          BNE      |L12.16|
000008  e3a02000          MOV      r2,#0
00000c  ea000000          B        |L12.20|
                  |L12.16|
000010  e5912000          LDR      r2,[r1,#0]
                  |L12.20|
000014  e5802008          STR      r2,[r0,#8]
;;;414      snmp_insert_iprteidx_tree(0, netif);
;;;415      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;416        netif->name[0], netif->name[1],
;;;417        ip4_addr1_16(&netif->netmask),
;;;418        ip4_addr2_16(&netif->netmask),
;;;419        ip4_addr3_16(&netif->netmask),
;;;420        ip4_addr4_16(&netif->netmask)));
;;;421    }
000018  e12fff1e          BX       lr
;;;422    
                          ENDP


                          AREA ||i.netif_set_up||, CODE, READONLY, ALIGN=2

                  netif_set_up PROC
;;;452     */ 
;;;453    void netif_set_up(struct netif *netif)
000000  e92d4010          PUSH     {r4,lr}
;;;454    {
000004  e1a04000          MOV      r4,r0
;;;455      if (!(netif->flags & NETIF_FLAG_UP)) {
000008  e5d4002d          LDRB     r0,[r4,#0x2d]
00000c  e2000001          AND      r0,r0,#1
000010  e3500000          CMP      r0,#0
000014  1a00000d          BNE      |L13.80|
;;;456        netif->flags |= NETIF_FLAG_UP;
000018  e5d4002d          LDRB     r0,[r4,#0x2d]
00001c  e3800001          ORR      r0,r0,#1
000020  e5c4002d          STRB     r0,[r4,#0x2d]
;;;457        
;;;458    #if LWIP_SNMP
;;;459        snmp_get_sysuptime(&netif->ts);
;;;460    #endif /* LWIP_SNMP */
;;;461    
;;;462        NETIF_STATUS_CALLBACK(netif);
;;;463    
;;;464        if (netif->flags & NETIF_FLAG_LINK_UP) {
000024  e5d4002d          LDRB     r0,[r4,#0x2d]
000028  e2000010          AND      r0,r0,#0x10
00002c  e3500000          CMP      r0,#0
000030  0a000006          BEQ      |L13.80|
;;;465    #if LWIP_ARP
;;;466          /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
;;;467          if (netif->flags & (NETIF_FLAG_ETHARP)) {
000034  e5d4002d          LDRB     r0,[r4,#0x2d]
000038  e2000020          AND      r0,r0,#0x20
00003c  e3500000          CMP      r0,#0
000040  0a000002          BEQ      |L13.80|
;;;468            etharp_gratuitous(netif);
000044  e2841004          ADD      r1,r4,#4
000048  e1a00004          MOV      r0,r4
00004c  ebfffffe          BL       etharp_request
                  |L13.80|
;;;469          }
;;;470    #endif /* LWIP_ARP */
;;;471    
;;;472    #if LWIP_IGMP
;;;473          /* resend IGMP memberships */
;;;474          if (netif->flags & NETIF_FLAG_IGMP) {
;;;475            igmp_report_groups( netif);
;;;476          }
;;;477    #endif /* LWIP_IGMP */
;;;478        }
;;;479      }
;;;480    }
000050  e8bd8010          POP      {r4,pc}
;;;481    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  netif_list
                          DCD      0x00000000
                  netif_default
                          DCD      0x00000000
                  netif_num
000008  00                DCB      0x00
