; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\ethernetif.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ethernetif.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\ethernetif.crf lwip-1.4.1\netif\ethernetif.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  low_level_output0 PROC
;;;185    static err_t
;;;186    low_level_output0(struct netif *netif, struct pbuf *p)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;187    {
000004  e1a04001          MOV      r4,r1
;;;188        struct pbuf *q;
;;;189        u8_t *buf = NULL;
;;;190        u16_t len = 0;
000008  e3a05000          MOV      r5,#0
;;;191    
;;;192    
;;;193        buf = ETH0_get_tx_buf();
00000c  ebfffffe          BL       ETH0_get_tx_buf
000010  e1b06000          MOVS     r6,r0
;;;194        if(buf == NULL)
;;;195            return ERR_MEM;
000014  03e00000          MVNEQ    r0,#0
;;;196    #if ETH_PAD_SIZE
;;;197        pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
;;;198    #endif
;;;199    
;;;200        for(q = p; q != NULL; q = q->next) {
;;;201            memcpy((u8_t*)&buf[len], q->payload, q->len);
;;;202            len = len + q->len;
;;;203        }
;;;204    
;;;205        ETH0_trigger_tx(len, NULL);
;;;206    
;;;207    
;;;208    #if ETH_PAD_SIZE
;;;209        pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
;;;210    #endif
;;;211    
;;;212        LINK_STATS_INC(link.xmit);
;;;213    
;;;214        return ERR_OK;
;;;215    }
000018  08bd8070          POPEQ    {r4-r6,pc}
00001c  ea000007          B        |L1.64|
                  |L1.32|
000020  e1d420ba          LDRH     r2,[r4,#0xa]          ;201
000024  e5941004          LDR      r1,[r4,#4]            ;201
000028  e0860005          ADD      r0,r6,r5              ;201
00002c  ebfffffe          BL       __aeabi_memcpy
000030  e1d400ba          LDRH     r0,[r4,#0xa]          ;202
000034  e5944000          LDR      r4,[r4,#0]            ;200
000038  e0800005          ADD      r0,r0,r5              ;202
00003c  e3c05801          BIC      r5,r0,#0x10000        ;202
                  |L1.64|
000040  e3540000          CMP      r4,#0                 ;200
000044  1afffff5          BNE      |L1.32|
000048  e3a01000          MOV      r1,#0                 ;205
00004c  e1a00005          MOV      r0,r5                 ;205
000050  ebfffffe          BL       ETH0_trigger_tx
000054  e3a00000          MOV      r0,#0                 ;214
000058  e8bd8070          POP      {r4-r6,pc}
;;;216    
                          ENDP

                  low_level_output1 PROC
;;;233    static err_t
;;;234    low_level_output1(struct netif *netif, struct pbuf *p)
00005c  e3e00000          MVN      r0,#0
;;;235    {
;;;236        struct pbuf *q;
;;;237        u8_t *buf = NULL;
;;;238        u16_t len = 0;
;;;239    
;;;240    
;;;241    //    buf = ETH1_get_tx_buf();
;;;242        if(buf == NULL)
;;;243            return ERR_MEM;
;;;244    #if ETH_PAD_SIZE
;;;245        pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
;;;246    #endif
;;;247    
;;;248        for(q = p; q != NULL; q = q->next) {
;;;249            memcpy((u8_t*)&buf[len], q->payload, q->len);
;;;250            len = len + q->len;
;;;251        }
;;;252    
;;;253        ETH1_trigger_tx(len, NULL);
;;;254    
;;;255    
;;;256    #if ETH_PAD_SIZE
;;;257        pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
;;;258    #endif
;;;259    
;;;260        LINK_STATS_INC(link.xmit);
;;;261    
;;;262        return ERR_OK;
;;;263    }
000060  e12fff1e          BX       lr
;;;264    
                          ENDP

                  low_level_input PROC
;;;273    static struct pbuf *
;;;274    low_level_input(struct netif *netif, u16_t len, u8_t *buf)
000064  e92d41f0          PUSH     {r4-r8,lr}
;;;275    {
000068  e1a06002          MOV      r6,r2
;;;276        struct pbuf *p, *q;
;;;277    
;;;278    #if ETH_PAD_SIZE
;;;279        len += ETH_PAD_SIZE; /* allow room for Ethernet padding */
;;;280    #endif
;;;281    
;;;282        /* We allocate a pbuf chain of pbufs from the pool. */
;;;283        p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
00006c  e3a02003          MOV      r2,#3
000070  e1a00002          MOV      r0,r2
000074  ebfffffe          BL       pbuf_alloc
000078  e1b07000          MOVS     r7,r0
;;;284    
;;;285        if (p != NULL) {
;;;286    
;;;287    #if ETH_PAD_SIZE
;;;288            pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
;;;289    #endif
;;;290    
;;;291    
;;;292            len = 0;
00007c  13a05000          MOVNE    r5,#0
;;;293            /* We iterate over the pbuf chain until we have read the entire
;;;294            * packet into the pbuf. */
;;;295            for(q = p; q != NULL; q = q->next) {
000080  11a04000          MOVNE    r4,r0
000084  0a000009          BEQ      |L1.176|
                  |L1.136|
;;;296                memcpy((u8_t*)q->payload, (u8_t*)&buf[len], q->len);
000088  e1d420ba          LDRH     r2,[r4,#0xa]
00008c  e5940004          LDR      r0,[r4,#4]
000090  e0861005          ADD      r1,r6,r5
000094  ebfffffe          BL       __aeabi_memcpy
;;;297                len = len + q->len;
000098  e1d400ba          LDRH     r0,[r4,#0xa]
00009c  e5944000          LDR      r4,[r4,#0]            ;295
0000a0  e0800005          ADD      r0,r0,r5
0000a4  e3540000          CMP      r4,#0                 ;295
0000a8  e3c05801          BIC      r5,r0,#0x10000
0000ac  1afffff5          BNE      |L1.136|
                  |L1.176|
;;;298            }
;;;299    
;;;300    
;;;301    #if ETH_PAD_SIZE
;;;302            pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
;;;303    #endif
;;;304    
;;;305            LINK_STATS_INC(link.recv);
;;;306        } else {
;;;307            // do nothing. drop the packet
;;;308            LINK_STATS_INC(link.memerr);
;;;309            LINK_STATS_INC(link.drop);
;;;310        }
;;;311    
;;;312        return p;
0000b0  e1a00007          MOV      r0,r7
;;;313    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;314    
                          ENDP

                  ethernetif_input0 PROC
;;;324    void
;;;325    ethernetif_input0(u16_t len, u8_t *buf)
0000b8  e1a02001          MOV      r2,r1
;;;326    {
;;;327        struct eth_hdr *ethhdr;
;;;328        struct pbuf *p;
;;;329    
;;;330    
;;;331        /* move received packet into a new pbuf */
;;;332        p = low_level_input(NULL, len, buf);
0000bc  e1a01000          MOV      r1,r0
0000c0  e92d4010          PUSH     {r4,lr}               ;326
0000c4  e3a00000          MOV      r0,#0
0000c8  ebfffffe          BL       low_level_input
0000cc  e1b04000          MOVS     r4,r0
;;;333        /* no packet could be read, silently ignore this */
;;;334        if (p == NULL) return;
;;;335    
;;;336    
;;;337        /* points to packet payload, which starts with an Ethernet header */
;;;338        ethhdr = p->payload;
;;;339    
;;;340        switch (htons(ethhdr->type)) {
;;;341        /* IP or ARP packet? */
;;;342        case ETHTYPE_IP:
;;;343        case ETHTYPE_ARP:
;;;344    #if PPPOE_SUPPORT
;;;345        /* PPPoE packet? */
;;;346        case ETHTYPE_PPPOEDISC:
;;;347        case ETHTYPE_PPPOE:
;;;348    #endif /* PPPOE_SUPPORT */
;;;349            /* full packet send to tcpip_thread to process */
;;;350            if (_netif0->input(p, _netif0)!=ERR_OK) {
;;;351                LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
;;;352                pbuf_free(p);
;;;353                p = NULL;
;;;354            }
;;;355            break;
;;;356    
;;;357        default:
;;;358            pbuf_free(p);
;;;359            p = NULL;
;;;360            break;
;;;361        }
;;;362    }
0000d0  08bd8010          POPEQ    {r4,pc}
0000d4  e5940004          LDR      r0,[r4,#4]            ;338
0000d8  e5d0100d          LDRB     r1,[r0,#0xd]          ;340
0000dc  e5d0000c          LDRB     r0,[r0,#0xc]          ;340
0000e0  e1800401          ORR      r0,r0,r1,LSL #8       ;340
0000e4  ebfffffe          BL       lwip_htons
0000e8  e3500b02          CMP      r0,#0x800             ;340
0000ec  12400006          SUBNE    r0,r0,#6              ;340
0000f0  13500b02          CMPNE    r0,#0x800             ;340
0000f4  1a000006          BNE      |L1.276|
0000f8  e59f0208          LDR      r0,|L1.776|
0000fc  e5901000          LDR      r1,[r0,#0]            ;350  ; _netif0
000100  e1a00004          MOV      r0,r4                 ;350
000104  e5912010          LDR      r2,[r1,#0x10]         ;350
000108  e12fff32          BLX      r2                    ;350
00010c  e3500000          CMP      r0,#0                 ;350
000110  08bd8010          POPEQ    {r4,pc}
                  |L1.276|
000114  e1a00004          MOV      r0,r4                 ;358
000118  e8bd4010          POP      {r4,lr}               ;358
00011c  eafffffe          B        pbuf_free
;;;363    
                          ENDP

                  ethernetif_input1 PROC
;;;374    void
;;;375    ethernetif_input1(u16_t len, u8_t *buf)
000120  e1a02001          MOV      r2,r1
;;;376    {
;;;377        struct eth_hdr *ethhdr;
;;;378        struct pbuf *p;
;;;379    
;;;380    
;;;381        /* move received packet into a new pbuf */
;;;382        p = low_level_input(NULL, len, buf);
000124  e1a01000          MOV      r1,r0
000128  e92d4010          PUSH     {r4,lr}               ;376
00012c  e3a00000          MOV      r0,#0
000130  ebfffffe          BL       low_level_input
000134  e1b04000          MOVS     r4,r0
;;;383        /* no packet could be read, silently ignore this */
;;;384        if (p == NULL) return;
;;;385    
;;;386    
;;;387        /* points to packet payload, which starts with an Ethernet header */
;;;388        ethhdr = p->payload;
;;;389    
;;;390        switch (htons(ethhdr->type)) {
;;;391        /* IP or ARP packet? */
;;;392        case ETHTYPE_IP:
;;;393        case ETHTYPE_ARP:
;;;394    #if PPPOE_SUPPORT
;;;395        /* PPPoE packet? */
;;;396        case ETHTYPE_PPPOEDISC:
;;;397        case ETHTYPE_PPPOE:
;;;398    #endif /* PPPOE_SUPPORT */
;;;399            /* full packet send to tcpip_thread to process */
;;;400            if (_netif1->input(p, _netif1)!=ERR_OK) {
;;;401                LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
;;;402                pbuf_free(p);
;;;403                p = NULL;
;;;404            }
;;;405            break;
;;;406    
;;;407        default:
;;;408            pbuf_free(p);
;;;409            p = NULL;
;;;410            break;
;;;411        }
;;;412    }
000138  08bd8010          POPEQ    {r4,pc}
00013c  e5940004          LDR      r0,[r4,#4]            ;388
000140  e5d0100d          LDRB     r1,[r0,#0xd]          ;390
000144  e5d0000c          LDRB     r0,[r0,#0xc]          ;390
000148  e1800401          ORR      r0,r0,r1,LSL #8       ;390
00014c  ebfffffe          BL       lwip_htons
000150  e3500b02          CMP      r0,#0x800             ;390
000154  12400006          SUBNE    r0,r0,#6              ;390
000158  13500b02          CMPNE    r0,#0x800             ;390
00015c  1a000006          BNE      |L1.380|
000160  e59f01a0          LDR      r0,|L1.776|
000164  e5901004          LDR      r1,[r0,#4]            ;400  ; _netif1
000168  e1a00004          MOV      r0,r4                 ;400
00016c  e5912010          LDR      r2,[r1,#0x10]         ;400
000170  e12fff32          BLX      r2                    ;400
000174  e3500000          CMP      r0,#0                 ;400
000178  08bd8010          POPEQ    {r4,pc}
                  |L1.380|
00017c  e1a00004          MOV      r0,r4                 ;408
000180  e8bd4010          POP      {r4,lr}               ;408
000184  eafffffe          B        pbuf_free
;;;413    
                          ENDP

                  ethernetif_init0 PROC
;;;426    err_t
;;;427    ethernetif_init0(struct netif *netif)
000188  e92d4010          PUSH     {r4,lr}
;;;428    {
00018c  e1b04000          MOVS     r4,r0
000190  1a000004          BNE      |L1.424|
;;;429        struct ethernetif *ethernetif;
;;;430    
;;;431        LWIP_ASSERT("netif != NULL", (netif != NULL));
000194  e59f2190          LDR      r2,|L1.812|
000198  e28f3f5b          ADR      r3,|L1.780|
00019c  e28f1f63          ADR      r1,|L1.816|
0001a0  e28f0f66          ADR      r0,|L1.832|
0001a4  ebfffffe          BL       sysprintf
                  |L1.424|
;;;432    
;;;433        _netif0 = netif;
0001a8  e59f0158          LDR      r0,|L1.776|
0001ac  e5804000          STR      r4,[r0,#0]  ; _netif0
;;;434        ethernetif = mem_malloc(sizeof(struct ethernetif));
0001b0  e3a00004          MOV      r0,#4
0001b4  ebfffffe          BL       mem_malloc
;;;435        if (ethernetif == NULL) {
0001b8  e3500000          CMP      r0,#0
;;;436            LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_init: out of memory\n"));
;;;437            return ERR_MEM;
0001bc  03e00000          MVNEQ    r0,#0
;;;438        }
;;;439    
;;;440    #if LWIP_NETIF_HOSTNAME
;;;441        /* Initialize interface hostname */
;;;442        netif->hostname = "nuc970";
;;;443    #endif /* LWIP_NETIF_HOSTNAME */
;;;444    
;;;445        /*
;;;446         * Initialize the snmp variables and counters inside the struct netif.
;;;447         * The last argument should be replaced with your link speed, in units
;;;448         * of bits per second.
;;;449         */
;;;450        NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);
;;;451    
;;;452        netif->state = ethernetif;
;;;453        netif->name[0] = IFNAME;
;;;454        netif->name[1] = IFNAME0;
;;;455        /* We directly use etharp_output() here to save a function call.
;;;456         * You can instead declare your own function an call etharp_output()
;;;457         * from it if you have to do some checks before sending (e.g. if link
;;;458         * is available...) */
;;;459        netif->output = etharp_output;
;;;460        netif->linkoutput = low_level_output0;
;;;461    
;;;462        ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
;;;463    
;;;464        /* initialize the hardware */
;;;465        low_level_init0(netif);
;;;466    
;;;467        return ERR_OK;
;;;468    }
0001c0  08bd8010          POPEQ    {r4,pc}
0001c4  e3a01065          MOV      r1,#0x65              ;453
0001c8  e584001c          STR      r0,[r4,#0x1c]         ;453
0001cc  e5c4102e          STRB     r1,[r4,#0x2e]         ;453
0001d0  e3a01030          MOV      r1,#0x30              ;454
0001d4  e5c4102f          STRB     r1,[r4,#0x2f]         ;454
0001d8  e59f1188          LDR      r1,|L1.872|
0001dc  e5841014          STR      r1,[r4,#0x14]         ;459
0001e0  e59f1184          LDR      r1,|L1.876|
0001e4  e5841018          STR      r1,[r4,#0x18]         ;460
0001e8  e2841027          ADD      r1,r4,#0x27           ;462
0001ec  e5801000          STR      r1,[r0,#0]            ;462
0001f0  e3a00006          MOV      r0,#6                 ;462
0001f4  e5c40026          STRB     r0,[r4,#0x26]         ;462
0001f8  e59f0170          LDR      r0,|L1.880|
0001fc  e5d01000          LDRB     r1,[r0,#0]            ;462  ; my_mac_addr0
000200  e5c41027          STRB     r1,[r4,#0x27]         ;462
000204  e5d01001          LDRB     r1,[r0,#1]            ;462  ; my_mac_addr0
000208  e5c41028          STRB     r1,[r4,#0x28]         ;462
00020c  e5d01002          LDRB     r1,[r0,#2]            ;462  ; my_mac_addr0
000210  e5c41029          STRB     r1,[r4,#0x29]         ;462
000214  e5d01003          LDRB     r1,[r0,#3]            ;462  ; my_mac_addr0
000218  e5c4102a          STRB     r1,[r4,#0x2a]         ;462
00021c  e5d01004          LDRB     r1,[r0,#4]            ;462  ; my_mac_addr0
000220  e5c4102b          STRB     r1,[r4,#0x2b]         ;462
000224  e5d00005          LDRB     r0,[r0,#5]            ;462  ; my_mac_addr0
000228  e5c4002c          STRB     r0,[r4,#0x2c]         ;462
00022c  e59f0140          LDR      r0,|L1.884|
000230  e1c402b4          STRH     r0,[r4,#0x24]         ;462
000234  e3a000b2          MOV      r0,#0xb2              ;462
000238  e5c4002d          STRB     r0,[r4,#0x2d]         ;462
00023c  e2840027          ADD      r0,r4,#0x27           ;462
000240  ebfffffe          BL       ETH0_init
000244  e3a00000          MOV      r0,#0                 ;467
000248  e8bd8010          POP      {r4,pc}
;;;469    
                          ENDP

                  ethernetif_init1 PROC
;;;483    err_t
;;;484    ethernetif_init1(struct netif *netif)
00024c  e92d4010          PUSH     {r4,lr}
;;;485    {
000250  e1b04000          MOVS     r4,r0
000254  1a000004          BNE      |L1.620|
;;;486        struct ethernetif *ethernetif;
;;;487    
;;;488        LWIP_ASSERT("netif != NULL", (netif != NULL));
000258  e28f30ac          ADR      r3,|L1.780|
00025c  e3a02f7a          MOV      r2,#0x1e8
000260  e28f10c8          ADR      r1,|L1.816|
000264  e28f00d4          ADR      r0,|L1.832|
000268  ebfffffe          BL       sysprintf
                  |L1.620|
;;;489    
;;;490        _netif1 = netif;
00026c  e59f0094          LDR      r0,|L1.776|
000270  e5804004          STR      r4,[r0,#4]  ; _netif1
;;;491        ethernetif = mem_malloc(sizeof(struct ethernetif));
000274  e3a00004          MOV      r0,#4
000278  ebfffffe          BL       mem_malloc
;;;492        if (ethernetif == NULL) {
00027c  e3500000          CMP      r0,#0
;;;493            LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_init: out of memory\n"));
;;;494            return ERR_MEM;
000280  03e00000          MVNEQ    r0,#0
;;;495        }
;;;496    
;;;497    #if LWIP_NETIF_HOSTNAME
;;;498        /* Initialize interface hostname */
;;;499        netif->hostname = "nuc970";
;;;500    #endif /* LWIP_NETIF_HOSTNAME */
;;;501    
;;;502        /*
;;;503         * Initialize the snmp variables and counters inside the struct netif.
;;;504         * The last argument should be replaced with your link speed, in units
;;;505         * of bits per second.
;;;506         */
;;;507        NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);
;;;508    
;;;509        netif->state = ethernetif;
;;;510        netif->name[0] = IFNAME;
;;;511        netif->name[1] = IFNAME1;
;;;512        /* We directly use etharp_output() here to save a function call.
;;;513         * You can instead declare your own function an call etharp_output()
;;;514         * from it if you have to do some checks before sending (e.g. if link
;;;515         * is available...) */
;;;516        netif->output = etharp_output;
;;;517        netif->linkoutput = low_level_output1;
;;;518    
;;;519        ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
;;;520    
;;;521        /* initialize the hardware */
;;;522        low_level_init1(netif);
;;;523    
;;;524        return ERR_OK;
;;;525    }
000284  08bd8010          POPEQ    {r4,pc}
000288  e3a01065          MOV      r1,#0x65              ;510
00028c  e584001c          STR      r0,[r4,#0x1c]         ;510
000290  e5c4102e          STRB     r1,[r4,#0x2e]         ;510
000294  e3a01031          MOV      r1,#0x31              ;511
000298  e5c4102f          STRB     r1,[r4,#0x2f]         ;511
00029c  e59f10c4          LDR      r1,|L1.872|
0002a0  e5841014          STR      r1,[r4,#0x14]         ;516
0002a4  e59f10cc          LDR      r1,|L1.888|
0002a8  e5841018          STR      r1,[r4,#0x18]         ;517
0002ac  e2841027          ADD      r1,r4,#0x27           ;519
0002b0  e5801000          STR      r1,[r0,#0]            ;519
0002b4  e3a00006          MOV      r0,#6                 ;519
0002b8  e5c40026          STRB     r0,[r4,#0x26]         ;519
0002bc  e59f00b8          LDR      r0,|L1.892|
0002c0  e5d01000          LDRB     r1,[r0,#0]            ;519  ; my_mac_addr1
0002c4  e5c41027          STRB     r1,[r4,#0x27]         ;519
0002c8  e5d01001          LDRB     r1,[r0,#1]            ;519  ; my_mac_addr1
0002cc  e5c41028          STRB     r1,[r4,#0x28]         ;519
0002d0  e5d01002          LDRB     r1,[r0,#2]            ;519  ; my_mac_addr1
0002d4  e5c41029          STRB     r1,[r4,#0x29]         ;519
0002d8  e5d01003          LDRB     r1,[r0,#3]            ;519  ; my_mac_addr1
0002dc  e5c4102a          STRB     r1,[r4,#0x2a]         ;519
0002e0  e5d01004          LDRB     r1,[r0,#4]            ;519  ; my_mac_addr1
0002e4  e5c4102b          STRB     r1,[r4,#0x2b]         ;519
0002e8  e5d00005          LDRB     r0,[r0,#5]            ;519  ; my_mac_addr1
0002ec  e5c4002c          STRB     r0,[r4,#0x2c]         ;519
0002f0  e59f007c          LDR      r0,|L1.884|
0002f4  e1c402b4          STRH     r0,[r4,#0x24]         ;519
0002f8  e3a000b2          MOV      r0,#0xb2              ;519
0002fc  e5c4002d          STRB     r0,[r4,#0x2d]         ;519
000300  e3a00000          MOV      r0,#0                 ;524
000304  e8bd8010          POP      {r4,pc}
                          ENDP

                  |L1.776|
                          DCD      ||.data||
                  |L1.780|
00030c  6c776970          DCB      "lwip-1.4.1\\netif\\ethernetif.c",0
000310  2d312e34
000314  2e315c6e
000318  65746966
00031c  5c657468
000320  65726e65
000324  7469662e
000328  6300    
00032a  00                DCB      0
00032b  00                DCB      0
                  |L1.812|
                          DCD      0x000001af
                  |L1.816|
000330  6e657469          DCB      "netif != NULL",0
000334  6620213d
000338  204e554c
00033c  4c00    
00033e  00                DCB      0
00033f  00                DCB      0
                  |L1.832|
000340  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000344  7274696f
000348  6e202225
00034c  73222066
000350  61696c65
000354  64206174
000358  206c696e
00035c  65202564
000360  20696e20
000364  25730a00
                  |L1.872|
                          DCD      etharp_output
                  |L1.876|
                          DCD      low_level_output0
                  |L1.880|
                          DCD      my_mac_addr0
                  |L1.884|
                          DCD      0x000005dc
                  |L1.888|
                          DCD      low_level_output1
                  |L1.892|
                          DCD      my_mac_addr1

                          AREA ||.data||, DATA, ALIGN=2

                  _netif0
                          DCD      0x00000000
                  _netif1
                          DCD      0x00000000
