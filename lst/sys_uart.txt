; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\sys_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_uart.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\sys_uart.crf Driver\Source\sys_uart.c]
                          ARM

                          AREA ||i.FormatItem||, CODE, READONLY, ALIGN=2

                  FormatItem PROC
;;;135    
;;;136    static INT8 *FormatItem(INT8 *f, INT a)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;137    {
000004  e1a06000          MOV      r6,r0
000008  e1a08001          MOV      r8,r1
;;;138        INT8   c;
;;;139        INT    fieldwidth = 0;
00000c  e3a04000          MOV      r4,#0
;;;140        INT    leftjust = FALSE;
000010  e3a07000          MOV      r7,#0
;;;141        INT    radix = 0;
000014  e3a09000          MOV      r9,#0
;;;142        INT8   fill = ' ';
000018  e3a0a020          MOV      r10,#0x20
;;;143    
;;;144        if (*f == '0')
00001c  e5d60000          LDRB     r0,[r6,#0]
000020  e3500030          CMP      r0,#0x30
000024  1a000000          BNE      |L1.44|
;;;145            fill = '0';
000028  e3a0a030          MOV      r10,#0x30
                  |L1.44|
;;;146    
;;;147        while ((c = *f++) != 0)
00002c  ea000070          B        |L1.500|
                  |L1.48|
;;;148        {
;;;149            if (c >= '0' && c <= '9')
000030  e3550030          CMP      r5,#0x30
000034  ba000005          BLT      |L1.80|
000038  e3550039          CMP      r5,#0x39
00003c  ca000003          BGT      |L1.80|
;;;150            {
;;;151                fieldwidth = (fieldwidth * 10) + (c - '0');
000040  e2450030          SUB      r0,r5,#0x30
000044  e0841104          ADD      r1,r4,r4,LSL #2
000048  e0804081          ADD      r4,r0,r1,LSL #1
00004c  ea000064          B        |L1.484|
                  |L1.80|
;;;152            }
;;;153            else if (c == 'l')
000050  e355006c          CMP      r5,#0x6c
000054  1a000000          BNE      |L1.92|
;;;154                continue;
000058  ea000065          B        |L1.500|
                  |L1.92|
;;;155            else
;;;156                switch (c)
00005c  e3550064          CMP      r5,#0x64
000060  0a00004b          BEQ      |L1.404|
000064  ca00000c          BGT      |L1.156|
000068  e355002d          CMP      r5,#0x2d
00006c  0a000020          BEQ      |L1.244|
000070  ca000004          BGT      |L1.136|
000074  e3550000          CMP      r5,#0
000078  0a000014          BEQ      |L1.208|
00007c  e3550025          CMP      r5,#0x25
000080  1a000053          BNE      |L1.468|
000084  ea000015          B        |L1.224|
                  |L1.136|
000088  e3550058          CMP      r5,#0x58
00008c  0a00004a          BEQ      |L1.444|
000090  e3550063          CMP      r5,#0x63
000094  1a00004e          BNE      |L1.468|
000098  ea000018          B        |L1.256|
                  |L1.156|
00009c  e3550073          CMP      r5,#0x73
0000a0  0a000026          BEQ      |L1.320|
0000a4  ca000004          BGT      |L1.188|
0000a8  e3550069          CMP      r5,#0x69
0000ac  0a00003a          BEQ      |L1.412|
0000b0  e355006f          CMP      r5,#0x6f
0000b4  1a000046          BNE      |L1.468|
0000b8  ea000042          B        |L1.456|
                  |L1.188|
0000bc  e3550075          CMP      r5,#0x75
0000c0  0a000037          BEQ      |L1.420|
0000c4  e3550078          CMP      r5,#0x78
0000c8  1a000041          BNE      |L1.468|
0000cc  ea000037          B        |L1.432|
                  |L1.208|
;;;157                {
;;;158                    case '\000':
0000d0  e1a00000          MOV      r0,r0
;;;159                        return (--f);
0000d4  e2460001          SUB      r0,r6,#1
0000d8  e1a06000          MOV      r6,r0
                  |L1.220|
;;;160                    case '%':
;;;161                        _PutChar_f('%');
;;;162                        return (f);
;;;163                    case '-':
;;;164                        leftjust = TRUE;
;;;165                        break;
;;;166                    case 'c':
;;;167                        {
;;;168                            if (leftjust)
;;;169                                _PutChar_f(a & 0x7f);
;;;170    
;;;171                            if (fieldwidth > 0)
;;;172                                sysPutRepChar(fill, fieldwidth - 1);
;;;173    
;;;174                            if (!leftjust)
;;;175                                _PutChar_f(a & 0x7f);
;;;176                            return (f);
;;;177                        }
;;;178                    case 's':
;;;179                        {
;;;180                            if (leftjust)
;;;181                                sysPutString((PINT8)a);
;;;182    
;;;183                            if (fieldwidth > strlen((PINT8)a))
;;;184                                sysPutRepChar(fill, fieldwidth - strlen((PINT8)a));
;;;185    
;;;186                            if (!leftjust)
;;;187                                sysPutString((PINT8)a);
;;;188                            return (f);
;;;189                        }
;;;190                    case 'd':
;;;191                    case 'i':
;;;192                        radix = -10;
;;;193                        break;
;;;194                    case 'u':
;;;195                        radix = 10;
;;;196                        break;
;;;197                    case 'x':
;;;198                        radix = 16;
;;;199                        break;
;;;200                    case 'X':
;;;201                        radix = 16;
;;;202                        break;
;;;203                    case 'o':
;;;204                        radix = 8;
;;;205                        break;
;;;206                    default:
;;;207                        radix = 3;
;;;208                        break;      /* unknown switch! */
;;;209                }
;;;210            if (radix)
;;;211                break;
;;;212        }
;;;213    
;;;214        if (leftjust)
;;;215            fieldwidth = -fieldwidth;
;;;216    
;;;217        sysPutNumber(a, radix, fieldwidth, fill);
;;;218    
;;;219        return (f);
;;;220    }
0000dc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.224|
0000e0  e1a00000          MOV      r0,r0                 ;160
0000e4  e3a00025          MOV      r0,#0x25              ;161
0000e8  ebfffffe          BL       _PutChar_f
0000ec  e1a00006          MOV      r0,r6                 ;162
0000f0  eafffff9          B        |L1.220|
                  |L1.244|
0000f4  e1a00000          MOV      r0,r0                 ;163
0000f8  e3a07001          MOV      r7,#1                 ;164
0000fc  ea000037          B        |L1.480|
                  |L1.256|
000100  e1a00000          MOV      r0,r0                 ;166
000104  e3570000          CMP      r7,#0                 ;168
000108  0a000001          BEQ      |L1.276|
00010c  e208007f          AND      r0,r8,#0x7f           ;169
000110  ebfffffe          BL       _PutChar_f
                  |L1.276|
000114  e3540000          CMP      r4,#0                 ;171
000118  da000002          BLE      |L1.296|
00011c  e2441001          SUB      r1,r4,#1              ;172
000120  e1a0000a          MOV      r0,r10                ;172
000124  ebfffffe          BL       sysPutRepChar
                  |L1.296|
000128  e3570000          CMP      r7,#0                 ;174
00012c  1a000001          BNE      |L1.312|
000130  e208007f          AND      r0,r8,#0x7f           ;175
000134  ebfffffe          BL       _PutChar_f
                  |L1.312|
000138  e1a00006          MOV      r0,r6                 ;176
00013c  eaffffe6          B        |L1.220|
                  |L1.320|
000140  e1a00000          MOV      r0,r0                 ;178
000144  e3570000          CMP      r7,#0                 ;180
000148  0a000001          BEQ      |L1.340|
00014c  e1a00008          MOV      r0,r8                 ;181
000150  ebfffffe          BL       sysPutString
                  |L1.340|
000154  e1a00008          MOV      r0,r8                 ;183
000158  ebfffffe          BL       strlen
00015c  e1500004          CMP      r0,r4                 ;183
000160  2a000005          BCS      |L1.380|
000164  e1a00008          MOV      r0,r8                 ;184
000168  ebfffffe          BL       strlen
00016c  e044b000          SUB      r11,r4,r0             ;184
000170  e1a0100b          MOV      r1,r11                ;184
000174  e1a0000a          MOV      r0,r10                ;184
000178  ebfffffe          BL       sysPutRepChar
                  |L1.380|
00017c  e3570000          CMP      r7,#0                 ;186
000180  1a000001          BNE      |L1.396|
000184  e1a00008          MOV      r0,r8                 ;187
000188  ebfffffe          BL       sysPutString
                  |L1.396|
00018c  e1a00006          MOV      r0,r6                 ;188
000190  eaffffd1          B        |L1.220|
                  |L1.404|
000194  e1a00000          MOV      r0,r0                 ;190
000198  e1a00000          MOV      r0,r0                 ;191
                  |L1.412|
00019c  e3e09009          MVN      r9,#9                 ;192
0001a0  ea00000e          B        |L1.480|
                  |L1.420|
0001a4  e1a00000          MOV      r0,r0                 ;194
0001a8  e3a0900a          MOV      r9,#0xa               ;195
0001ac  ea00000b          B        |L1.480|
                  |L1.432|
0001b0  e1a00000          MOV      r0,r0                 ;197
0001b4  e3a09010          MOV      r9,#0x10              ;198
0001b8  ea000008          B        |L1.480|
                  |L1.444|
0001bc  e1a00000          MOV      r0,r0                 ;200
0001c0  e3a09010          MOV      r9,#0x10              ;201
0001c4  ea000005          B        |L1.480|
                  |L1.456|
0001c8  e1a00000          MOV      r0,r0                 ;203
0001cc  e3a09008          MOV      r9,#8                 ;204
0001d0  ea000002          B        |L1.480|
                  |L1.468|
0001d4  e1a00000          MOV      r0,r0                 ;206
0001d8  e3a09003          MOV      r9,#3                 ;207
0001dc  e1a00000          MOV      r0,r0                 ;208
                  |L1.480|
0001e0  e1a00000          MOV      r0,r0                 ;165
                  |L1.484|
0001e4  e3590000          CMP      r9,#0                 ;210
0001e8  0a000000          BEQ      |L1.496|
0001ec  ea000003          B        |L1.512|
                  |L1.496|
0001f0  e1a00000          MOV      r0,r0                 ;154
                  |L1.500|
0001f4  e4d65001          LDRB     r5,[r6],#1            ;147
0001f8  e3550000          CMP      r5,#0                 ;147
0001fc  1affff8b          BNE      |L1.48|
                  |L1.512|
000200  e1a00000          MOV      r0,r0                 ;211
000204  e3570000          CMP      r7,#0                 ;214
000208  0a000000          BEQ      |L1.528|
00020c  e2644000          RSB      r4,r4,#0              ;215
                  |L1.528|
000210  e1a0300a          MOV      r3,r10                ;217
000214  e1a02004          MOV      r2,r4                 ;217
000218  e1a01009          MOV      r1,r9                 ;217
00021c  e1a00008          MOV      r0,r8                 ;217
000220  ebfffffe          BL       sysPutNumber
000224  e1a00006          MOV      r0,r6                 ;219
000228  eaffffab          B        |L1.220|
;;;221    
                          ENDP


                          AREA ||i._PutChar_f||, CODE, READONLY, ALIGN=2

                  _PutChar_f PROC
;;;19     
;;;20     void _PutChar_f(UINT8 ch)
000000  e1a00000          MOV      r0,r0
                  |L2.4|
;;;21     {
;;;22         volatile int loop;
;;;23         while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000004  e3a0132e          MOV      r1,#0xb8000000
000008  e5911018          LDR      r1,[r1,#0x18]
00000c  e2011502          AND      r1,r1,#0x800000
000010  e3510000          CMP      r1,#0
000014  1afffffa          BNE      |L2.4|
;;;24         outpw(REG_UART0_THR, ch);
000018  e3a0132e          MOV      r1,#0xb8000000
00001c  e5810000          STR      r0,[r1,#0]
;;;25         if(ch == '\n')
000020  e350000a          CMP      r0,#0xa
000024  1a000008          BNE      |L2.76|
;;;26         {
;;;27             while((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000028  e1a00000          MOV      r0,r0
                  |L2.44|
00002c  e3a0132e          MOV      r1,#0xb8000000
000030  e5911018          LDR      r1,[r1,#0x18]
000034  e2011502          AND      r1,r1,#0x800000
000038  e3510000          CMP      r1,#0
00003c  1afffffa          BNE      |L2.44|
;;;28             outpw(REG_UART0_THR, '\r');
000040  e3a0100d          MOV      r1,#0xd
000044  e3a0232e          MOV      r2,#0xb8000000
000048  e5821000          STR      r1,[r2,#0]
                  |L2.76|
;;;29         }
;;;30     }
00004c  e12fff1e          BX       lr
;;;31     
                          ENDP


                          AREA ||i.sysGetChar||, CODE, READONLY, ALIGN=2

                  sysGetChar PROC
;;;278     */
;;;279    INT8 sysGetChar(void)
000000  ea00000d          B        |L3.60|
                  |L3.4|
;;;280    {
;;;281        int i;
;;;282        while (1)
;;;283        {
;;;284            for(i=0;i<0x1000;i++);
000004  e3a01000          MOV      r1,#0
000008  ea000000          B        |L3.16|
                  |L3.12|
00000c  e2811001          ADD      r1,r1,#1
                  |L3.16|
000010  e3510a01          CMP      r1,#0x1000
000014  bafffffc          BLT      |L3.12|
;;;285            if (!(inpw(REG_UART0_FSR) & (1 << 14)))
000018  e3a0032e          MOV      r0,#0xb8000000
00001c  e5900018          LDR      r0,[r0,#0x18]
000020  e2000901          AND      r0,r0,#0x4000
000024  e3500000          CMP      r0,#0
000028  1a000003          BNE      |L3.60|
;;;286            {
;;;287                return (inpw(REG_UART0_RBR));
00002c  e3a0032e          MOV      r0,#0xb8000000
000030  e5900000          LDR      r0,[r0,#0]
000034  e20000ff          AND      r0,r0,#0xff
;;;288            }
;;;289        }
;;;290    }
000038  e12fff1e          BX       lr
                  |L3.60|
00003c  eafffff0          B        |L3.4|
;;;291    
                          ENDP


                          AREA ||i.sysInitializeUART||, CODE, READONLY, ALIGN=2

                  sysInitializeUART PROC
;;;237     */
;;;238    INT32 sysInitializeUART(void)
000000  e3a0020b          MOV      r0,#0xb0000000
;;;239    {
;;;240        /* enable UART0 clock */
;;;241        outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0) | 0x10000);
000004  e5900218          LDR      r0,[r0,#0x218]
000008  e3800801          ORR      r0,r0,#0x10000
00000c  e3a0120b          MOV      r1,#0xb0000000
000010  e5810218          STR      r0,[r1,#0x218]
;;;242    
;;;243        /* GPE0, GPE1 */
;;;244        outpw(REG_SYS_GPE_MFPL, (inpw(REG_SYS_GPE_MFPL) & 0xffffff00) | 0x99);  // UART0 multi-function
000014  e3a0020b          MOV      r0,#0xb0000000
000018  e5900090          LDR      r0,[r0,#0x90]
00001c  e3c000ff          BIC      r0,r0,#0xff
000020  e3800099          ORR      r0,r0,#0x99
000024  e5810090          STR      r0,[r1,#0x90]
;;;245    
;;;246        /* UART0 line configuration for (115200,n,8,1) */
;;;247        outpw(REG_UART0_LCR, inpw(REG_UART0_LCR) | 0x7);
000028  e3a0032e          MOV      r0,#0xb8000000
00002c  e590000c          LDR      r0,[r0,#0xc]
000030  e3800007          ORR      r0,r0,#7
000034  e3a0132e          MOV      r1,#0xb8000000
000038  e581000c          STR      r0,[r1,#0xc]
;;;248        outpw(REG_UART0_BAUD, 0x30000066); /* 12MHz reference clock input, 115200 */
00003c  e59f0008          LDR      r0,|L4.76|
000040  e5810024          STR      r0,[r1,#0x24]
;;;249        return 0;
000044  e3a00000          MOV      r0,#0
;;;250    }
000048  e12fff1e          BX       lr
;;;251    
                          ENDP

                  |L4.76|
                          DCD      0x30000066

                          AREA ||i.sysIsKbHit||, CODE, READONLY, ALIGN=2

                  sysIsKbHit PROC
;;;222    
;;;223    INT  sysIsKbHit()
000000  e3a0032e          MOV      r0,#0xb8000000
;;;224    {
;;;225        if (inpw(REG_UART0_FSR) & (1 << 14))
000004  e5900018          LDR      r0,[r0,#0x18]
000008  e2000901          AND      r0,r0,#0x4000
00000c  e3500000          CMP      r0,#0
000010  0a000001          BEQ      |L5.28|
;;;226            return 0;
000014  e3a00000          MOV      r0,#0
                  |L5.24|
;;;227        else 
;;;228            return 1;
;;;229    }
000018  e12fff1e          BX       lr
                  |L5.28|
00001c  e3a00001          MOV      r0,#1                 ;228
000020  eafffffc          B        |L5.24|
;;;230    /// @endcond HIDDEN_SYMBOLS
                          ENDP


                          AREA ||i.sysPutChar||, CODE, READONLY, ALIGN=2

                  sysPutChar PROC
;;;298     */
;;;299    void sysPutChar(UINT8 ucCh)
000000  e1a00000          MOV      r0,r0
                  |L6.4|
;;;300    {
;;;301        volatile int loop;
;;;302        while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000004  e3a0132e          MOV      r1,#0xb8000000
000008  e5911018          LDR      r1,[r1,#0x18]
00000c  e2011502          AND      r1,r1,#0x800000
000010  e3510000          CMP      r1,#0
000014  1afffffa          BNE      |L6.4|
;;;303        outpw(REG_UART0_THR, ucCh);
000018  e3a0132e          MOV      r1,#0xb8000000
00001c  e5810000          STR      r0,[r1,#0]
;;;304    }
000020  e12fff1e          BX       lr
;;;305    
                          ENDP


                          AREA ||i.sysPutNumber||, CODE, READONLY, ALIGN=2

                  sysPutNumber PROC
;;;56     
;;;57     static void sysPutNumber(INT value, INT radix, INT width, INT8 fill)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;58     {
000004  e24dd02c          SUB      sp,sp,#0x2c
000008  e1a08000          MOV      r8,r0
00000c  e1a07001          MOV      r7,r1
000010  e1a05002          MOV      r5,r2
000014  e1a09003          MOV      r9,r3
;;;59         INT8    buffer[40];
;;;60         INT     bi = 0;
000018  e3a04000          MOV      r4,#0
;;;61         UINT32  uvalue;
;;;62         UINT16  digit;
;;;63         UINT16  left = FALSE;
00001c  e3a0b000          MOV      r11,#0
;;;64         UINT16  negative = FALSE;
000020  e3a00000          MOV      r0,#0
000024  e58d0000          STR      r0,[sp,#0]
;;;65     
;;;66         if (fill == 0)
000028  e3590000          CMP      r9,#0
00002c  1a000000          BNE      |L7.52|
;;;67             fill = ' ';
000030  e3a09020          MOV      r9,#0x20
                  |L7.52|
;;;68     
;;;69         if (width < 0)
000034  e3550000          CMP      r5,#0
000038  aa000001          BGE      |L7.68|
;;;70         {
;;;71             width = -width;
00003c  e2655000          RSB      r5,r5,#0
;;;72             left = TRUE;
000040  e3a0b001          MOV      r11,#1
                  |L7.68|
;;;73         }
;;;74     
;;;75         if (width < 0 || width > 80)
000044  e3550000          CMP      r5,#0
000048  ba000001          BLT      |L7.84|
00004c  e3550050          CMP      r5,#0x50
000050  da000000          BLE      |L7.88|
                  |L7.84|
;;;76             width = 0;
000054  e3a05000          MOV      r5,#0
                  |L7.88|
;;;77     
;;;78         if (radix < 0)
000058  e3570000          CMP      r7,#0
00005c  aa000005          BGE      |L7.120|
;;;79         {
;;;80             radix = -radix;
000060  e2677000          RSB      r7,r7,#0
;;;81             if (value < 0)
000064  e3580000          CMP      r8,#0
000068  aa000002          BGE      |L7.120|
;;;82             {
;;;83                 negative = TRUE;
00006c  e3a00001          MOV      r0,#1
000070  e58d0000          STR      r0,[sp,#0]
;;;84                 value = -value;
000074  e2688000          RSB      r8,r8,#0
                  |L7.120|
;;;85             }
;;;86         }
;;;87     
;;;88         uvalue = value;
000078  e1a06008          MOV      r6,r8
;;;89     
;;;90         do
00007c  e1a00000          MOV      r0,r0
                  |L7.128|
;;;91         {
;;;92             if (radix != 16)
000080  e3570010          CMP      r7,#0x10
000084  0a000009          BEQ      |L7.176|
;;;93             {
;;;94                 digit = uvalue % radix;
000088  e1a01007          MOV      r1,r7
00008c  e1a00006          MOV      r0,r6
000090  ebfffffe          BL       __aeabi_uidivmod
000094  e1a0a801          LSL      r10,r1,#16
000098  e1a0a82a          LSR      r10,r10,#16
;;;95                 uvalue = uvalue / radix;
00009c  e1a01007          MOV      r1,r7
0000a0  e1a00006          MOV      r0,r6
0000a4  ebfffffe          BL       __aeabi_uidivmod
0000a8  e1a06000          MOV      r6,r0
0000ac  ea000001          B        |L7.184|
                  |L7.176|
;;;96             }
;;;97             else
;;;98             {
;;;99                 digit = uvalue & 0xf;
0000b0  e206a00f          AND      r10,r6,#0xf
;;;100                uvalue = uvalue >> 4;
0000b4  e1a06226          LSR      r6,r6,#4
                  |L7.184|
;;;101            }
;;;102            buffer[bi] = digit + ((digit <= 9) ? '0' : ('A' - 10));
0000b8  e35a0009          CMP      r10,#9
0000bc  ca000001          BGT      |L7.200|
0000c0  e3a00030          MOV      r0,#0x30
0000c4  ea000000          B        |L7.204|
                  |L7.200|
0000c8  e3a00037          MOV      r0,#0x37
                  |L7.204|
0000cc  e080000a          ADD      r0,r0,r10
0000d0  e28d1004          ADD      r1,sp,#4
0000d4  e7c10004          STRB     r0,[r1,r4]
;;;103            bi++;
0000d8  e2844001          ADD      r4,r4,#1
;;;104    
;;;105            if (uvalue != 0)
0000dc  e3560000          CMP      r6,#0
0000e0  0a000017          BEQ      |L7.324|
;;;106            {
;;;107                if ((radix == 10)
0000e4  e357000a          CMP      r7,#0xa
0000e8  1a000015          BNE      |L7.324|
;;;108                    && ((bi == 3) || (bi == 7) || (bi == 11) | (bi == 15)))
0000ec  e3540003          CMP      r4,#3
0000f0  0a00000e          BEQ      |L7.304|
0000f4  e3540007          CMP      r4,#7
0000f8  0a00000c          BEQ      |L7.304|
0000fc  e354000b          CMP      r4,#0xb
000100  1a000001          BNE      |L7.268|
000104  e3a00001          MOV      r0,#1
000108  ea000000          B        |L7.272|
                  |L7.268|
00010c  e3a00000          MOV      r0,#0
                  |L7.272|
000110  e354000f          CMP      r4,#0xf
000114  1a000001          BNE      |L7.288|
000118  e3a01001          MOV      r1,#1
00011c  ea000000          B        |L7.292|
                  |L7.288|
000120  e3a01000          MOV      r1,#0
                  |L7.292|
000124  e1800001          ORR      r0,r0,r1
000128  e3500000          CMP      r0,#0
00012c  0a000004          BEQ      |L7.324|
                  |L7.304|
;;;109                {
;;;110                    buffer[bi++] = ',';
000130  e3a0102c          MOV      r1,#0x2c
000134  e1a00004          MOV      r0,r4
000138  e2844001          ADD      r4,r4,#1
00013c  e28d2004          ADD      r2,sp,#4
000140  e7c21000          STRB     r1,[r2,r0]
                  |L7.324|
;;;111                }
;;;112            }
;;;113        }
;;;114        while (uvalue != 0);
000144  e3560000          CMP      r6,#0
000148  1affffcc          BNE      |L7.128|
;;;115    
;;;116        if (negative)
00014c  e59d0000          LDR      r0,[sp,#0]
000150  e3500000          CMP      r0,#0
000154  0a000003          BEQ      |L7.360|
;;;117        {
;;;118            buffer[bi] = '-';
000158  e3a0002d          MOV      r0,#0x2d
00015c  e28d1004          ADD      r1,sp,#4
000160  e7c10004          STRB     r0,[r1,r4]
;;;119            bi += 1;
000164  e2844001          ADD      r4,r4,#1
                  |L7.360|
;;;120        }
;;;121    
;;;122        if (width <= bi)
000168  e1550004          CMP      r5,r4
00016c  ca000003          BGT      |L7.384|
;;;123            sysPutStringReverse(buffer, bi);
000170  e1a01004          MOV      r1,r4
000174  e28d0004          ADD      r0,sp,#4
000178  ebfffffe          BL       sysPutStringReverse
00017c  ea00000d          B        |L7.440|
                  |L7.384|
;;;124        else
;;;125        {
;;;126            width -= bi;
000180  e0455004          SUB      r5,r5,r4
;;;127            if (!left)
000184  e35b0000          CMP      r11,#0
000188  1a000002          BNE      |L7.408|
;;;128                sysPutRepChar(fill, width);
00018c  e1a01005          MOV      r1,r5
000190  e1a00009          MOV      r0,r9
000194  ebfffffe          BL       sysPutRepChar
                  |L7.408|
;;;129            sysPutStringReverse(buffer, bi);
000198  e1a01004          MOV      r1,r4
00019c  e28d0004          ADD      r0,sp,#4
0001a0  ebfffffe          BL       sysPutStringReverse
;;;130            if (left)
0001a4  e35b0000          CMP      r11,#0
0001a8  0a000002          BEQ      |L7.440|
;;;131                sysPutRepChar(fill, width);
0001ac  e1a01005          MOV      r1,r5
0001b0  e1a00009          MOV      r0,r9
0001b4  ebfffffe          BL       sysPutRepChar
                  |L7.440|
;;;132        }
;;;133    }
0001b8  e28dd02c          ADD      sp,sp,#0x2c
0001bc  e8bd8ff0          POP      {r4-r11,pc}
;;;134    
                          ENDP


                          AREA ||i.sysPutRepChar||, CODE, READONLY, ALIGN=2

                  sysPutRepChar PROC
;;;42     
;;;43     static void sysPutRepChar(INT8 c, INT count)
000000  e92d4010          PUSH     {r4,lr}
;;;44     {
000004  e1a04000          MOV      r4,r0
000008  e1a03001          MOV      r3,r1
;;;45         while (count--)
00000c  ea000001          B        |L8.24|
                  |L8.16|
;;;46             _PutChar_f(c);
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       _PutChar_f
                  |L8.24|
000018  e2530000          SUBS     r0,r3,#0              ;45
00001c  e2433001          SUB      r3,r3,#1              ;45
000020  1afffffa          BNE      |L8.16|
;;;47     }
000024  e8bd8010          POP      {r4,pc}
;;;48     
                          ENDP


                          AREA ||i.sysPutString||, CODE, READONLY, ALIGN=2

                  sysPutString PROC
;;;32     
;;;33     void sysPutString(INT8 *string)
000000  e52de004          PUSH     {lr}
;;;34     {
000004  e1a03000          MOV      r3,r0
;;;35         while (*string != '\0')
000008  ea000002          B        |L9.24|
                  |L9.12|
;;;36         {
;;;37             _PutChar_f(*string);
00000c  e5d30000          LDRB     r0,[r3,#0]
000010  ebfffffe          BL       _PutChar_f
;;;38             string++;
000014  e2833001          ADD      r3,r3,#1
                  |L9.24|
000018  e5d30000          LDRB     r0,[r3,#0]            ;35
00001c  e3500000          CMP      r0,#0                 ;35
000020  1afffff9          BNE      |L9.12|
;;;39         }
;;;40     }
000024  e49df004          POP      {pc}
;;;41     
                          ENDP


                          AREA ||i.sysPutStringReverse||, CODE, READONLY, ALIGN=2

                  sysPutStringReverse PROC
;;;49     
;;;50     static void sysPutStringReverse(INT8 *s, INT index)
000000  e92d4010          PUSH     {r4,lr}
;;;51     {
000004  e1a04000          MOV      r4,r0
000008  e1a03001          MOV      r3,r1
;;;52         while ((index--) > 0)
00000c  ea000001          B        |L10.24|
                  |L10.16|
;;;53             _PutChar_f(s[index]);
000010  e7d40003          LDRB     r0,[r4,r3]
000014  ebfffffe          BL       _PutChar_f
                  |L10.24|
000018  e2530000          SUBS     r0,r3,#0              ;52
00001c  e2433001          SUB      r3,r3,#1              ;52
000020  cafffffa          BGT      |L10.16|
;;;54     }
000024  e8bd8010          POP      {r4,pc}
;;;55     
                          ENDP


                          AREA ||i.sysprintf||, CODE, READONLY, ALIGN=2

                  sysprintf PROC
;;;259     */
;;;260    void sysprintf(PINT8 pcStr,...)
000000  e92d000f          PUSH     {r0-r3}
;;;261    {
000004  e92d4010          PUSH     {r4,lr}
;;;262        INT8  *argP;
;;;263    
;;;264        vaStart(argP, pcStr);       /* point at the end of the format string */
000008  e28d400c          ADD      r4,sp,#0xc
;;;265        while (*pcStr)
00000c  ea000011          B        |L11.88|
                  |L11.16|
;;;266        {                       /* this works because args are all ints */
;;;267            if (*pcStr == '%')
000010  e59d0008          LDR      r0,[sp,#8]
000014  e5d00000          LDRB     r0,[r0,#0]
000018  e3500025          CMP      r0,#0x25
00001c  1a000007          BNE      |L11.64|
;;;268                pcStr = FormatItem(pcStr + 1, vaArg(argP, INT));
000020  e2840004          ADD      r0,r4,#4
000024  e1a04000          MOV      r4,r0
000028  e5101004          LDR      r1,[r0,#-4]
00002c  e59d0008          LDR      r0,[sp,#8]
000030  e2800001          ADD      r0,r0,#1
000034  ebfffffe          BL       FormatItem
000038  e58d0008          STR      r0,[sp,#8]
00003c  ea000005          B        |L11.88|
                  |L11.64|
;;;269            else
;;;270                _PutChar_f(*pcStr++);
000040  e59d1008          LDR      r1,[sp,#8]
000044  e5d10000          LDRB     r0,[r1,#0]
000048  e59d2008          LDR      r2,[sp,#8]
00004c  e2822001          ADD      r2,r2,#1
000050  e58d2008          STR      r2,[sp,#8]
000054  ebfffffe          BL       _PutChar_f
                  |L11.88|
000058  e59d0008          LDR      r0,[sp,#8]            ;265
00005c  e5d00000          LDRB     r0,[r0,#0]            ;265
000060  e3500000          CMP      r0,#0                 ;265
000064  1affffe9          BNE      |L11.16|
;;;271        }
;;;272    }
000068  e49d4004          POP      {r4}
00006c  e49df014          LDR      pc,[sp],#0x14
;;;273    
                          ENDP

