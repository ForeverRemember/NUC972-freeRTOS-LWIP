; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sys_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_uart.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\sys_uart.crf Driver\Source\sys_uart.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _PutChar_f PROC
;;;19     
;;;20     void _PutChar_f(UINT8 ch)
000000  e3a0132e          MOV      r1,#0xb8000000
                  |L1.4|
;;;21     {
;;;22         volatile int loop;
;;;23         while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000004  e5912018          LDR      r2,[r1,#0x18]
000008  e3120502          TST      r2,#0x800000
00000c  1afffffc          BNE      |L1.4|
;;;24         outpw(REG_UART0_THR, ch);
000010  e5810000          STR      r0,[r1,#0]
;;;25         if(ch == '\n')
000014  e350000a          CMP      r0,#0xa
;;;26         {
;;;27             while((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
;;;28             outpw(REG_UART0_THR, '\r');
;;;29         }
;;;30     }
000018  112fff1e          BXNE     lr
                  |L1.28|
00001c  e5910018          LDR      r0,[r1,#0x18]         ;27
000020  e3100502          TST      r0,#0x800000          ;27
000024  03a0000d          MOVEQ    r0,#0xd               ;28
000028  05810000          STREQ    r0,[r1,#0]            ;28
00002c  1afffffa          BNE      |L1.28|
000030  e12fff1e          BX       lr
;;;31     
                          ENDP

                  sysPutString PROC
;;;32     
;;;33     void sysPutString(INT8 *string)
000034  e1a03000          MOV      r3,r0
;;;34     {
000038  e52de004          PUSH     {lr}
;;;35         while (*string != '\0')
;;;36         {
;;;37             _PutChar_f(*string);
;;;38             string++;
00003c  ea000001          B        |L1.72|
                  |L1.64|
000040  ebfffffe          BL       _PutChar_f
000044  e2833001          ADD      r3,r3,#1              ;37
                  |L1.72|
000048  e5d30000          LDRB     r0,[r3,#0]            ;35
00004c  e3500000          CMP      r0,#0                 ;35
000050  1afffffa          BNE      |L1.64|
;;;39         }
;;;40     }
000054  e49df004          POP      {pc}
;;;41     
                          ENDP

                  FormatItem PROC
;;;135    
;;;136    static INT8 *FormatItem(INT8 *f, INT a)
000058  e92d41f0          PUSH     {r4-r8,lr}
;;;137    {
00005c  e1a05000          MOV      r5,r0
;;;138        INT8   c;
;;;139        INT    fieldwidth = 0;
;;;140        INT    leftjust = FALSE;
;;;141        INT    radix = 0;
;;;142        INT8   fill = ' ';
;;;143    
;;;144        if (*f == '0')
000060  e5d00000          LDRB     r0,[r0,#0]
000064  e3a04000          MOV      r4,#0                 ;139
000068  e1a08001          MOV      r8,r1                 ;137
00006c  e3500030          CMP      r0,#0x30
000070  e3a07020          MOV      r7,#0x20              ;142
000074  e1a06004          MOV      r6,r4                 ;140
000078  e1a01004          MOV      r1,r4                 ;141
;;;145            fill = '0';
00007c  03a07030          MOVEQ    r7,#0x30
000080  ea00004d          B        |L1.444|
                  |L1.132|
;;;146    
;;;147        while ((c = *f++) != 0)
;;;148        {
;;;149            if (c >= '0' && c <= '9')
000084  e2402030          SUB      r2,r0,#0x30
000088  e3520009          CMP      r2,#9
;;;150            {
;;;151                fieldwidth = (fieldwidth * 10) + (c - '0');
00008c  90842104          ADDLS    r2,r4,r4,LSL #2
000090  90800082          ADDLS    r0,r0,r2,LSL #1
000094  92404030          SUBLS    r4,r0,#0x30
000098  9a000023          BLS      |L1.300|
;;;152            }
;;;153            else if (c == 'l')
00009c  e350006c          CMP      r0,#0x6c
0000a0  0a000045          BEQ      |L1.444|
;;;154                continue;
;;;155            else
;;;156                switch (c)
0000a4  e3500064          CMP      r0,#0x64
0000a8  0a00003f          BEQ      |L1.428|
0000ac  ca00000e          BGT      |L1.236|
0000b0  e350002d          CMP      r0,#0x2d
;;;157                {
;;;158                    case '\000':
;;;159                        return (--f);
;;;160                    case '%':
;;;161                        _PutChar_f('%');
;;;162                        return (f);
;;;163                    case '-':
;;;164                        leftjust = TRUE;
0000b4  03a06001          MOVEQ    r6,#1
0000b8  0a00001b          BEQ      |L1.300|
0000bc  ca000005          BGT      |L1.216|
0000c0  e3500000          CMP      r0,#0                 ;156
0000c4  02450001          SUBEQ    r0,r5,#1              ;159
;;;165                        break;
;;;166                    case 'c':
;;;167                        {
;;;168                            if (leftjust)
;;;169                                _PutChar_f(a & 0x7f);
;;;170    
;;;171                            if (fieldwidth > 0)
;;;172                                sysPutRepChar(fill, fieldwidth - 1);
;;;173    
;;;174                            if (!leftjust)
;;;175                                _PutChar_f(a & 0x7f);
;;;176                            return (f);
;;;177                        }
;;;178                    case 's':
;;;179                        {
;;;180                            if (leftjust)
;;;181                                sysPutString((PINT8)a);
;;;182    
;;;183                            if (fieldwidth > strlen((PINT8)a))
;;;184                                sysPutRepChar(fill, fieldwidth - strlen((PINT8)a));
;;;185    
;;;186                            if (!leftjust)
;;;187                                sysPutString((PINT8)a);
;;;188                            return (f);
;;;189                        }
;;;190                    case 'd':
;;;191                    case 'i':
;;;192                        radix = -10;
;;;193                        break;
;;;194                    case 'u':
;;;195                        radix = 10;
;;;196                        break;
;;;197                    case 'x':
;;;198                        radix = 16;
;;;199                        break;
;;;200                    case 'X':
;;;201                        radix = 16;
;;;202                        break;
;;;203                    case 'o':
;;;204                        radix = 8;
;;;205                        break;
;;;206                    default:
;;;207                        radix = 3;
;;;208                        break;      /* unknown switch! */
;;;209                }
;;;210            if (radix)
;;;211                break;
;;;212        }
;;;213    
;;;214        if (leftjust)
;;;215            fieldwidth = -fieldwidth;
;;;216    
;;;217        sysPutNumber(a, radix, fieldwidth, fill);
;;;218    
;;;219        return (f);
;;;220    }
0000c8  08bd81f0          POPEQ    {r4-r8,pc}
0000cc  e3500025          CMP      r0,#0x25              ;156
0000d0  0a000022          BEQ      |L1.352|
0000d4  ea000012          B        |L1.292|
                  |L1.216|
0000d8  e3500058          CMP      r0,#0x58              ;156
0000dc  0a000034          BEQ      |L1.436|
0000e0  e3500063          CMP      r0,#0x63              ;156
0000e4  0a000013          BEQ      |L1.312|
0000e8  ea00000d          B        |L1.292|
                  |L1.236|
0000ec  e3500073          CMP      r0,#0x73              ;156
0000f0  0a00001c          BEQ      |L1.360|
0000f4  ca000005          BGT      |L1.272|
0000f8  e3500069          CMP      r0,#0x69              ;156
0000fc  0a00002a          BEQ      |L1.428|
000100  e350006f          CMP      r0,#0x6f              ;156
000104  03a01008          MOVEQ    r1,#8                 ;204
000108  0a00002e          BEQ      |L1.456|
00010c  ea000004          B        |L1.292|
                  |L1.272|
000110  e3500075          CMP      r0,#0x75              ;156
000114  03a0100a          MOVEQ    r1,#0xa               ;195
000118  0a00002a          BEQ      |L1.456|
00011c  e3500078          CMP      r0,#0x78              ;156
000120  0a000023          BEQ      |L1.436|
                  |L1.292|
000124  e3a01003          MOV      r1,#3                 ;207
000128  ea000026          B        |L1.456|
                  |L1.300|
00012c  e3510000          CMP      r1,#0                 ;210
000130  0a000021          BEQ      |L1.444|
000134  ea000023          B        |L1.456|
                  |L1.312|
000138  e3560000          CMP      r6,#0                 ;168
00013c  1208007f          ANDNE    r0,r8,#0x7f           ;169
000140  1bfffffe          BLNE     _PutChar_f
000144  e3540000          CMP      r4,#0                 ;171
000148  c2441001          SUBGT    r1,r4,#1              ;172
00014c  c1a00007          MOVGT    r0,r7                 ;172
000150  cbfffffe          BLGT     sysPutRepChar
000154  e3560000          CMP      r6,#0                 ;174
000158  0208007f          ANDEQ    r0,r8,#0x7f           ;175
00015c  1a000010          BNE      |L1.420|
                  |L1.352|
000160  ebfffffe          BL       _PutChar_f
000164  ea00000e          B        |L1.420|
                  |L1.360|
000168  e3560000          CMP      r6,#0                 ;180
00016c  11a00008          MOVNE    r0,r8                 ;181
000170  1bfffffe          BLNE     sysPutString
000174  e1a00008          MOV      r0,r8                 ;183
000178  ebfffffe          BL       strlen
00017c  e1500004          CMP      r0,r4                 ;183
000180  2a000004          BCS      |L1.408|
000184  e1a00008          MOV      r0,r8                 ;184
000188  ebfffffe          BL       strlen
00018c  e0441000          SUB      r1,r4,r0              ;184
000190  e1a00007          MOV      r0,r7                 ;184
000194  ebfffffe          BL       sysPutRepChar
                  |L1.408|
000198  e3560000          CMP      r6,#0                 ;186
00019c  01a00008          MOVEQ    r0,r8                 ;187
0001a0  0bfffffe          BLEQ     sysPutString
                  |L1.420|
0001a4  e1a00005          MOV      r0,r5                 ;188
0001a8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.428|
0001ac  e3e01009          MVN      r1,#9                 ;192
0001b0  ea000004          B        |L1.456|
                  |L1.436|
0001b4  e3a01010          MOV      r1,#0x10              ;198
0001b8  ea000002          B        |L1.456|
                  |L1.444|
0001bc  e4d50001          LDRB     r0,[r5],#1            ;147
0001c0  e3500000          CMP      r0,#0                 ;147
0001c4  1affffae          BNE      |L1.132|
                  |L1.456|
0001c8  e3560000          CMP      r6,#0                 ;214
0001cc  12644000          RSBNE    r4,r4,#0              ;215
0001d0  e1a03007          MOV      r3,r7                 ;217
0001d4  e1a02004          MOV      r2,r4                 ;217
0001d8  e1a00008          MOV      r0,r8                 ;217
0001dc  ebfffffe          BL       sysPutNumber
0001e0  eaffffef          B        |L1.420|
;;;221    
                          ENDP

                  sysIsKbHit PROC
;;;222    
;;;223    INT  sysIsKbHit()
0001e4  e3a0032e          MOV      r0,#0xb8000000
;;;224    {
;;;225        if (inpw(REG_UART0_FSR) & (1 << 14))
0001e8  e5900018          LDR      r0,[r0,#0x18]
0001ec  e3100901          TST      r0,#0x4000
;;;226            return 0;
0001f0  13a00000          MOVNE    r0,#0
;;;227        else 
;;;228            return 1;
0001f4  03a00001          MOVEQ    r0,#1
;;;229    }
0001f8  e12fff1e          BX       lr
;;;230    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysInitializeUART PROC
;;;237     */
;;;238    INT32 sysInitializeUART(void)
0001fc  e3a0020b          MOV      r0,#0xb0000000
;;;239    {
;;;240        /* enable UART0 clock */
;;;241        outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0) | 0x10000);
000200  e5901218          LDR      r1,[r0,#0x218]
000204  e3811801          ORR      r1,r1,#0x10000
000208  e5801218          STR      r1,[r0,#0x218]
;;;242    
;;;243        /* GPE0, GPE1 */
;;;244        outpw(REG_SYS_GPE_MFPL, (inpw(REG_SYS_GPE_MFPL) & 0xffffff00) | 0x99);  // UART0 multi-function
00020c  e5901090          LDR      r1,[r0,#0x90]
000210  e3c110ff          BIC      r1,r1,#0xff
000214  e3811099          ORR      r1,r1,#0x99
000218  e5801090          STR      r1,[r0,#0x90]
;;;245    
;;;246        /* UART0 line configuration for (115200,n,8,1) */
;;;247        outpw(REG_UART0_LCR, inpw(REG_UART0_LCR) | 0x7);
00021c  e3a0032e          MOV      r0,#0xb8000000
000220  e590100c          LDR      r1,[r0,#0xc]
000224  e3811007          ORR      r1,r1,#7
000228  e580100c          STR      r1,[r0,#0xc]
;;;248        outpw(REG_UART0_BAUD, 0x30000066); /* 12MHz reference clock input, 115200 */
00022c  e59f1224          LDR      r1,|L1.1112|
000230  e5801024          STR      r1,[r0,#0x24]
;;;249        return 0;
000234  e3a00000          MOV      r0,#0
;;;250    }
000238  e12fff1e          BX       lr
;;;251    
                          ENDP

                  sysprintf PROC
;;;259     */
;;;260    void sysprintf(PINT8 pcStr,...)
00023c  e92d000f          PUSH     {r0-r3}
;;;261    {
000240  e92d4010          PUSH     {r4,lr}
;;;262        INT8  *argP;
;;;263    
;;;264        vaStart(argP, pcStr);       /* point at the end of the format string */
000244  e28d400c          ADD      r4,sp,#0xc
000248  ea000004          B        |L1.608|
                  |L1.588|
;;;265        while (*pcStr)
;;;266        {                       /* this works because args are all ints */
;;;267            if (*pcStr == '%')
00024c  e3500025          CMP      r0,#0x25
000250  0a000008          BEQ      |L1.632|
;;;268                pcStr = FormatItem(pcStr + 1, vaArg(argP, INT));
;;;269            else
;;;270                _PutChar_f(*pcStr++);
000254  e2821001          ADD      r1,r2,#1
000258  e58d1008          STR      r1,[sp,#8]
00025c  ebfffffe          BL       _PutChar_f
                  |L1.608|
000260  e59d2008          LDR      r2,[sp,#8]            ;265
000264  e5d20000          LDRB     r0,[r2,#0]            ;265
000268  e3500000          CMP      r0,#0                 ;265
00026c  1afffff6          BNE      |L1.588|
;;;271        }
;;;272    }
000270  e49d4004          POP      {r4}
000274  e49df014          LDR      pc,[sp],#0x14
                  |L1.632|
000278  e4941004          LDR      r1,[r4],#4            ;268
00027c  e2820001          ADD      r0,r2,#1              ;268
000280  ebfffffe          BL       FormatItem
000284  e58d0008          STR      r0,[sp,#8]            ;268
000288  eafffff4          B        |L1.608|
;;;273    
                          ENDP

                  sysGetChar PROC
;;;278     */
;;;279    INT8 sysGetChar(void)
00028c  e3a0132e          MOV      r1,#0xb8000000
                  |L1.656|
;;;280    {
;;;281        int i;
;;;282        while (1)
;;;283        {
;;;284            for(i=0;i<0x1000;i++);
000290  e3a00000          MOV      r0,#0
                  |L1.660|
000294  e2800001          ADD      r0,r0,#1
000298  e3500a01          CMP      r0,#0x1000
00029c  bafffffc          BLT      |L1.660|
;;;285            if (!(inpw(REG_UART0_FSR) & (1 << 14)))
0002a0  e5910018          LDR      r0,[r1,#0x18]
0002a4  e3100901          TST      r0,#0x4000
;;;286            {
;;;287                return (inpw(REG_UART0_RBR));
0002a8  05910000          LDREQ    r0,[r1,#0]
0002ac  020000ff          ANDEQ    r0,r0,#0xff
0002b0  1afffff6          BNE      |L1.656|
;;;288            }
;;;289        }
;;;290    }
0002b4  e12fff1e          BX       lr
;;;291    
                          ENDP

                  sysPutChar PROC
;;;298     */
;;;299    void sysPutChar(UINT8 ucCh)
0002b8  e3a0132e          MOV      r1,#0xb8000000
                  |L1.700|
;;;300    {
;;;301        volatile int loop;
;;;302        while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
0002bc  e5912018          LDR      r2,[r1,#0x18]
0002c0  e3120502          TST      r2,#0x800000
;;;303        outpw(REG_UART0_THR, ucCh);
0002c4  05810000          STREQ    r0,[r1,#0]
0002c8  1afffffb          BNE      |L1.700|
;;;304    }
0002cc  e12fff1e          BX       lr
;;;305    
                          ENDP

                  sysPutRepChar PROC
;;;42     
;;;43     static void sysPutRepChar(INT8 c, INT count)
0002d0  e1a03001          MOV      r3,r1
;;;44     {
0002d4  e1a0c000          MOV      r12,r0
0002d8  e52de004          PUSH     {lr}
;;;45         while (count--)
;;;46             _PutChar_f(c);
0002dc  ea000001          B        |L1.744|
                  |L1.736|
0002e0  e1a0000c          MOV      r0,r12
0002e4  ebfffffe          BL       _PutChar_f
                  |L1.744|
0002e8  e2533001          SUBS     r3,r3,#1
0002ec  2afffffb          BCS      |L1.736|
;;;47     }
0002f0  e49df004          POP      {pc}
;;;48     
                          ENDP

                  sysPutNumber PROC
;;;56     
;;;57     static void sysPutNumber(INT value, INT radix, INT width, INT8 fill)
0002f4  e92d47f0          PUSH     {r4-r10,lr}
;;;58     {
0002f8  e1b0a003          MOVS     r10,r3
0002fc  e1a05002          MOV      r5,r2
;;;59         INT8    buffer[40];
;;;60         INT     bi = 0;
000300  e3a04000          MOV      r4,#0
;;;61         UINT32  uvalue;
;;;62         UINT16  digit;
;;;63         UINT16  left = FALSE;
;;;64         UINT16  negative = FALSE;
;;;65     
;;;66         if (fill == 0)
;;;67             fill = ' ';
000304  03a0a020          MOVEQ    r10,#0x20
;;;68     
;;;69         if (width < 0)
000308  e3550000          CMP      r5,#0
00030c  e1a07004          MOV      r7,r4                 ;63
;;;70         {
;;;71             width = -width;
000310  b2625000          RSBLT    r5,r2,#0
;;;72             left = TRUE;
000314  b3a07001          MOVLT    r7,#1
;;;73         }
;;;74     
;;;75         if (width < 0 || width > 80)
000318  e3550051          CMP      r5,#0x51
00031c  e1a06001          MOV      r6,r1                 ;58
;;;76             width = 0;
000320  23a05000          MOVCS    r5,#0
;;;77     
;;;78         if (radix < 0)
000324  e3560000          CMP      r6,#0
;;;79         {
;;;80             radix = -radix;
000328  b2616000          RSBLT    r6,r1,#0
;;;81             if (value < 0)
00032c  b3500000          CMPLT    r0,#0
000330  e24dd028          SUB      sp,sp,#0x28           ;58
000334  e1a08004          MOV      r8,r4                 ;64
;;;82             {
;;;83                 negative = TRUE;
000338  b3a08001          MOVLT    r8,#1
;;;84                 value = -value;
00033c  b2600000          RSBLT    r0,r0,#0
000340  e1a0900d          MOV      r9,sp                 ;59
                  |L1.836|
;;;85             }
;;;86         }
;;;87     
;;;88         uvalue = value;
;;;89     
;;;90         do
;;;91         {
;;;92             if (radix != 16)
000344  e3560010          CMP      r6,#0x10
;;;93             {
;;;94                 digit = uvalue % radix;
;;;95                 uvalue = uvalue / radix;
;;;96             }
;;;97             else
;;;98             {
;;;99                 digit = uvalue & 0xf;
000348  0200100f          ANDEQ    r1,r0,#0xf
;;;100                uvalue = uvalue >> 4;
00034c  01a00220          LSREQ    r0,r0,#4
000350  0a000003          BEQ      |L1.868|
000354  e1a01006          MOV      r1,r6                 ;94
000358  ebfffffe          BL       __aeabi_uidivmod
00035c  e1a01801          LSL      r1,r1,#16             ;94
000360  e1a01821          LSR      r1,r1,#16             ;94
                  |L1.868|
;;;101            }
;;;102            buffer[bi] = digit + ((digit <= 9) ? '0' : ('A' - 10));
000364  e3510009          CMP      r1,#9
000368  93a02030          MOVLS    r2,#0x30
00036c  83a02037          MOVHI    r2,#0x37
000370  e0811002          ADD      r1,r1,r2
000374  e7c91004          STRB     r1,[r9,r4]
;;;103            bi++;
;;;104    
;;;105            if (uvalue != 0)
000378  e3500000          CMP      r0,#0
00037c  e2844001          ADD      r4,r4,#1
000380  0a000012          BEQ      |L1.976|
;;;106            {
;;;107                if ((radix == 10)
000384  e356000a          CMP      r6,#0xa
000388  1affffed          BNE      |L1.836|
;;;108                    && ((bi == 3) || (bi == 7) || (bi == 11) | (bi == 15)))
00038c  e3540003          CMP      r4,#3
000390  13540007          CMPNE    r4,#7
000394  0a000009          BEQ      |L1.960|
000398  e354000b          CMP      r4,#0xb
00039c  03a01001          MOVEQ    r1,#1
0003a0  0a000003          BEQ      |L1.948|
0003a4  e354000f          CMP      r4,#0xf
0003a8  e3a01000          MOV      r1,#0
0003ac  03a02001          MOVEQ    r2,#1
0003b0  0a000000          BEQ      |L1.952|
                  |L1.948|
0003b4  e3a02000          MOV      r2,#0
                  |L1.952|
0003b8  e1911002          ORRS     r1,r1,r2
0003bc  0affffe0          BEQ      |L1.836|
                  |L1.960|
;;;109                {
;;;110                    buffer[bi++] = ',';
0003c0  e3a0102c          MOV      r1,#0x2c
0003c4  e7c91004          STRB     r1,[r9,r4]
0003c8  e2844001          ADD      r4,r4,#1
0003cc  eaffffdc          B        |L1.836|
                  |L1.976|
;;;111                }
;;;112            }
;;;113        }
;;;114        while (uvalue != 0);
;;;115    
;;;116        if (negative)
0003d0  e3580000          CMP      r8,#0
;;;117        {
;;;118            buffer[bi] = '-';
0003d4  13a0002d          MOVNE    r0,#0x2d
0003d8  17c90004          STRBNE   r0,[r9,r4]
0003dc  12844001          ADDNE    r4,r4,#1
;;;119            bi += 1;
;;;120        }
;;;121    
;;;122        if (width <= bi)
0003e0  e1550004          CMP      r5,r4
0003e4  ca000004          BGT      |L1.1020|
;;;123            sysPutStringReverse(buffer, bi);
0003e8  e1a01004          MOV      r1,r4
0003ec  e1a0000d          MOV      r0,sp
0003f0  ebfffffe          BL       sysPutStringReverse
                  |L1.1012|
;;;124        else
;;;125        {
;;;126            width -= bi;
;;;127            if (!left)
;;;128                sysPutRepChar(fill, width);
;;;129            sysPutStringReverse(buffer, bi);
;;;130            if (left)
;;;131                sysPutRepChar(fill, width);
;;;132        }
;;;133    }
0003f4  e28dd028          ADD      sp,sp,#0x28
0003f8  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1020|
0003fc  e3570000          CMP      r7,#0                 ;127
000400  e0455004          SUB      r5,r5,r4              ;126
000404  01a01005          MOVEQ    r1,r5                 ;128
000408  01a0000a          MOVEQ    r0,r10                ;128
00040c  0bfffffe          BLEQ     sysPutRepChar
000410  e1a01004          MOV      r1,r4                 ;129
000414  e1a0000d          MOV      r0,sp                 ;129
000418  ebfffffe          BL       sysPutStringReverse
00041c  e3570000          CMP      r7,#0                 ;130
000420  11a01005          MOVNE    r1,r5                 ;131
000424  11a0000a          MOVNE    r0,r10                ;131
000428  1bfffffe          BLNE     sysPutRepChar
00042c  eafffff0          B        |L1.1012|
;;;134    
                          ENDP

                  sysPutStringReverse PROC
;;;49     
;;;50     static void sysPutStringReverse(INT8 *s, INT index)
000430  e1a03001          MOV      r3,r1
;;;51     {
000434  e1a0c000          MOV      r12,r0
000438  e52de004          PUSH     {lr}
;;;52         while ((index--) > 0)
;;;53             _PutChar_f(s[index]);
00043c  ea000001          B        |L1.1096|
                  |L1.1088|
000440  e7dc0003          LDRB     r0,[r12,r3]
000444  ebfffffe          BL       _PutChar_f
                  |L1.1096|
000448  e2530000          SUBS     r0,r3,#0              ;52
00044c  e2433001          SUB      r3,r3,#1              ;52
000450  cafffffa          BGT      |L1.1088|
;;;54     }
000454  e49df004          POP      {pc}
;;;55     
                          ENDP

                  |L1.1112|
                          DCD      0x30000066
