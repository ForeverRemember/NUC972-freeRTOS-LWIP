; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -D__UVISION_VERSION=524 --omf_browse=.\obj\sys.crf Driver\Source\sys.c]
                          ARM

                          AREA ||i.SYS_Interrupt_Shell||, CODE, READONLY, ALIGN=2

                  SYS_Interrupt_Shell PROC
;;;183    
;;;184    void SYS_Interrupt_Shell()
000000  e92d4010          PUSH     {r4,lr}
;;;185    {
;;;186        sysprintf("ISR not found! ISNR=%d\n", inpw(REG_AIC_ISNR));
000004  e59f000c          LDR      r0,|L1.24|
000008  e5901120          LDR      r1,[r0,#0x120]
00000c  e28f0008          ADR      r0,|L1.28|
000010  ebfffffe          BL       sysprintf
;;;187    }
000014  e8bd8010          POP      {r4,pc}
;;;188    
                          ENDP

                  |L1.24|
                          DCD      0xb8002000
                  |L1.28|
00001c  49535220          DCB      "ISR not found! ISNR=%d\n",0
000020  6e6f7420
000024  666f756e
000028  64212049
00002c  534e523d
000030  25640a00

                          AREA ||i.sysDisableInterrupt||, CODE, READONLY, ALIGN=2

                  sysDisableInterrupt PROC
;;;205     */
;;;206    INT32 sysDisableInterrupt(IRQn_Type eIntNo)
000000  e1a01000          MOV      r1,r0
;;;207    {
;;;208        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e351003e          CMP      r1,#0x3e
000008  ca000001          BGT      |L2.20|
00000c  e3510001          CMP      r1,#1
000010  aa000001          BGE      |L2.28|
                  |L2.20|
;;;209            return 1;
000014  e3a00001          MOV      r0,#1
                  |L2.24|
;;;210    
;;;211        if (eIntNo < 32)
;;;212            outpw(REG_AIC_MDCR, (1 << eIntNo));
;;;213        else
;;;214            outpw(REG_AIC_MDCRH, (1 << (eIntNo - 32)));
;;;215    
;;;216        return 0;
;;;217    }
000018  e12fff1e          BX       lr
                  |L2.28|
00001c  e3510020          CMP      r1,#0x20              ;211
000020  aa000004          BGE      |L2.56|
000024  e3a00001          MOV      r0,#1                 ;212
000028  e1a00110          LSL      r0,r0,r1              ;212
00002c  e59f2020          LDR      r2,|L2.84|
000030  e5820138          STR      r0,[r2,#0x138]        ;212
000034  ea000004          B        |L2.76|
                  |L2.56|
000038  e2410020          SUB      r0,r1,#0x20           ;214
00003c  e3a02001          MOV      r2,#1                 ;214
000040  e1a00012          LSL      r0,r2,r0              ;214
000044  e59f2008          LDR      r2,|L2.84|
000048  e582013c          STR      r0,[r2,#0x13c]        ;214
                  |L2.76|
00004c  e3a00000          MOV      r0,#0                 ;216
000050  eafffff0          B        |L2.24|
;;;218    
                          ENDP

                  |L2.84|
                          DCD      0xb8002000

                          AREA ||i.sysEnableInterrupt||, CODE, READONLY, ALIGN=2

                  sysEnableInterrupt PROC
;;;226     */
;;;227    INT32 sysEnableInterrupt(IRQn_Type eIntNo)
000000  e1a01000          MOV      r1,r0
;;;228    {
;;;229       if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e351003e          CMP      r1,#0x3e
000008  ca000001          BGT      |L3.20|
00000c  e3510001          CMP      r1,#1
000010  aa000001          BGE      |L3.28|
                  |L3.20|
;;;230          return 1;
000014  e3a00001          MOV      r0,#1
                  |L3.24|
;;;231    
;;;232        if (eIntNo < 32)
;;;233            outpw(REG_AIC_MECR, (1 << eIntNo));
;;;234        else
;;;235            outpw(REG_AIC_MECRH, (1 << (eIntNo - 32)));
;;;236    
;;;237        return 0;
;;;238    }
000018  e12fff1e          BX       lr
                  |L3.28|
00001c  e3510020          CMP      r1,#0x20              ;232
000020  aa000004          BGE      |L3.56|
000024  e3a00001          MOV      r0,#1                 ;233
000028  e1a00110          LSL      r0,r0,r1              ;233
00002c  e59f2020          LDR      r2,|L3.84|
000030  e5820130          STR      r0,[r2,#0x130]        ;233
000034  ea000004          B        |L3.76|
                  |L3.56|
000038  e2410020          SUB      r0,r1,#0x20           ;235
00003c  e3a02001          MOV      r2,#1                 ;235
000040  e1a00012          LSL      r0,r2,r0              ;235
000044  e59f2008          LDR      r2,|L3.84|
000048  e5820134          STR      r0,[r2,#0x134]        ;235
                  |L3.76|
00004c  e3a00000          MOV      r0,#0                 ;237
000050  eafffff0          B        |L3.24|
;;;239    
                          ENDP

                  |L3.84|
                          DCD      0xb8002000

                          AREA ||i.sysFiqHandler||, CODE, READONLY, ALIGN=2

                  sysFiqHandler PROC
;;;170    
;;;171    __irq void sysFiqHandler()
000000  e92d500f          PUSH     {r0-r3,r12,lr}
;;;172    {
000004  e24dd008          SUB      sp,sp,#8
;;;173        UINT32 volatile _mIPER, _mISNR;
;;;174    
;;;175        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000008  e59f0058          LDR      r0,|L4.104|
00000c  e5900118          LDR      r0,[r0,#0x118]
000010  e3a0103f          MOV      r1,#0x3f
000014  e0010120          AND      r0,r1,r0,LSR #2
000018  e58d0004          STR      r0,[sp,#4]
;;;176        _mISNR = inpw(REG_AIC_ISNR);
00001c  e59f0044          LDR      r0,|L4.104|
000020  e5900120          LDR      r0,[r0,#0x120]
000024  e58d0000          STR      r0,[sp,#0]
;;;177        if (_mIPER != 0) {
000028  e59d0004          LDR      r0,[sp,#4]
00002c  e3500000          CMP      r0,#0
000030  0a000009          BEQ      |L4.92|
;;;178            if (_mISNR != 0)
000034  e59d0000          LDR      r0,[sp,#0]
000038  e3500000          CMP      r0,#0
00003c  0a000003          BEQ      |L4.80|
;;;179                (*sysFiqHandlerTable[_mIPER])();
000040  e59f1024          LDR      r1,|L4.108|
000044  e59d2004          LDR      r2,[sp,#4]
000048  e7910102          LDR      r0,[r1,r2,LSL #2]
00004c  e12fff30          BLX      r0
                  |L4.80|
;;;180            outpw(REG_AIC_EOSCR, 1);
000050  e3a00001          MOV      r0,#1
000054  e59f100c          LDR      r1,|L4.104|
000058  e5810150          STR      r0,[r1,#0x150]
                  |L4.92|
;;;181        }
;;;182    }
00005c  e28dd008          ADD      sp,sp,#8
000060  e8bd500f          POP      {r0-r3,r12,lr}
000064  e25ef004          SUBS     pc,lr,#4
;;;183    
                          ENDP

                  |L4.104|
                          DCD      0xb8002000
                  |L4.108|
                          DCD      sysFiqHandlerTable

                          AREA ||i.sysGetClock||, CODE, READONLY, ALIGN=2

                  sysGetClock PROC
;;;506     */
;;;507    UINT32 sysGetClock(CLK_Type clk)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;508    {
000004  e1a09000          MOV      r9,r0
;;;509        UINT32 src, divS, divN, reg, div;
;;;510    
;;;511        switch(clk)
000008  e3590008          CMP      r9,#8
00000c  308ff109          ADDCC    pc,pc,r9,LSL #2
000010  ea0000e9          B        |L5.956|
000014  ea0000e8          B        |L5.956|
000018  ea000005          B        |L5.52|
00001c  ea000008          B        |L5.68|
000020  ea00000b          B        |L5.84|
000024  ea000032          B        |L5.244|
000028  ea00005a          B        |L5.408|
00002c  ea000087          B        |L5.592|
000030  ea0000b4          B        |L5.776|
                  |L5.52|
;;;512        {
;;;513            case SYS_UPLL:
000034  e1a00000          MOV      r0,r0
;;;514                return sysGetPLL(REG_CLK_UPLLCON);
000038  e59f0390          LDR      r0,|L5.976|
00003c  ebfffffe          BL       sysGetPLL
                  |L5.64|
;;;515    
;;;516            case SYS_APLL:
;;;517                return sysGetPLL(REG_CLK_APLLCON);
;;;518    
;;;519            case SYS_SYSTEM:
;;;520            {
;;;521                reg = inpw(REG_CLK_DIVCTL0);
;;;522                switch (reg & 0x18)
;;;523                {
;;;524                    case 0x0:
;;;525                        src = 12;   /* HXT */
;;;526                        break;
;;;527                    case 0x10:
;;;528                        src = sysGetPLL(REG_CLK_APLLCON);
;;;529                        break;
;;;530                    case 0x18:
;;;531                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;532                        break;
;;;533                    default:
;;;534                        return 0;
;;;535                }
;;;536                divS = (reg & 0x7) + 1;
;;;537                divN = ((reg & 0xf00) >> 8) + 1;
;;;538                return (src / divS / divN);
;;;539            }
;;;540    
;;;541            case SYS_HCLK1:
;;;542            {
;;;543                reg = inpw(REG_CLK_DIVCTL0);
;;;544                switch (reg & 0x18)
;;;545                {
;;;546                    case 0x0:
;;;547                        src = 12;   /* HXT */
;;;548                        break;
;;;549                    case 0x10:
;;;550                        src = sysGetPLL(REG_CLK_APLLCON);
;;;551                        break;
;;;552                    case 0x18:
;;;553                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;554                        break;
;;;555                    default:
;;;556                        return 0;
;;;557                }
;;;558                divS = (reg & 0x7) + 1;
;;;559                divN = ((reg & 0xf00) >> 8) + 1;
;;;560                return (src / divS / divN / 2);
;;;561            }
;;;562    
;;;563            case SYS_HCLK234:
;;;564            {
;;;565                reg = inpw(REG_CLK_DIVCTL0);
;;;566                switch (reg & 0x18)
;;;567                {
;;;568                    case 0x0:
;;;569                        src = 12;   /* HXT */
;;;570                        break;
;;;571                    case 0x10:
;;;572                        src = sysGetPLL(REG_CLK_APLLCON);
;;;573                        break;
;;;574                    case 0x18:
;;;575                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;576                        break;
;;;577                    default:
;;;578                        return 0;
;;;579                }
;;;580                divS = (reg & 0x7) + 1;
;;;581                divN = ((reg & 0xf00) >> 8) + 1;
;;;582                div = ((reg & 0xf00000) >> 20) + 1;
;;;583                return (src / divS / divN / 2 / div);
;;;584            }
;;;585    
;;;586            case SYS_PCLK:
;;;587            {
;;;588                reg = inpw(REG_CLK_DIVCTL0);
;;;589                switch (reg & 0x18)
;;;590                {
;;;591                    case 0x0:
;;;592                        src = 12;   /* HXT */
;;;593                        break;
;;;594                    case 0x10:
;;;595                        src = sysGetPLL(REG_CLK_APLLCON);
;;;596                        break;
;;;597                    case 0x18:
;;;598                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;599                        break;
;;;600                    default:
;;;601                        return 0;
;;;602                }
;;;603                divS = (reg & 0x7) + 1;
;;;604                divN = ((reg & 0xf00) >> 8) + 1;
;;;605                div = ((reg & 0xf000000) >> 24) + 1;
;;;606                return (src / divS / divN / 2 / div);
;;;607            }
;;;608            case SYS_CPU:
;;;609            {
;;;610                reg = inpw(REG_CLK_DIVCTL0);
;;;611                switch (reg & 0x18)
;;;612                {
;;;613                    case 0x0:
;;;614                        src = 12;   /* HXT */
;;;615                        break;
;;;616                    case 0x10:
;;;617                        src = sysGetPLL(REG_CLK_APLLCON);
;;;618                        break;
;;;619                    case 0x18:
;;;620                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;621                        break;
;;;622                    default:
;;;623                        return 0;
;;;624                }
;;;625                divS = (reg & 0x7) + 1;
;;;626                divN = ((reg & 0xf00) >> 8) + 1;
;;;627                div = ((reg & 0xf0000) >> 16) + 1;
;;;628                return (src / divS / divN / div);
;;;629            }
;;;630    
;;;631            default:
;;;632                ;
;;;633        }
;;;634        return 0;
;;;635    }
000040  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.68|
000044  e1a00000          MOV      r0,r0                 ;516
000048  e59f0384          LDR      r0,|L5.980|
00004c  ebfffffe          BL       sysGetPLL
000050  eafffffa          B        |L5.64|
                  |L5.84|
000054  e1a00000          MOV      r0,r0                 ;519
000058  e3a0020b          MOV      r0,#0xb0000000        ;521
00005c  e5904220          LDR      r4,[r0,#0x220]        ;521
000060  e2040018          AND      r0,r4,#0x18           ;522
000064  e3500000          CMP      r0,#0                 ;522
000068  0a000004          BEQ      |L5.128|
00006c  e3500010          CMP      r0,#0x10              ;522
000070  0a000005          BEQ      |L5.140|
000074  e3500018          CMP      r0,#0x18              ;522
000078  1a00000d          BNE      |L5.180|
00007c  ea000007          B        |L5.160|
                  |L5.128|
000080  e1a00000          MOV      r0,r0                 ;524
000084  e3a0500c          MOV      r5,#0xc               ;525
000088  ea00000c          B        |L5.192|
                  |L5.140|
00008c  e1a00000          MOV      r0,r0                 ;527
000090  e59f033c          LDR      r0,|L5.980|
000094  ebfffffe          BL       sysGetPLL
000098  e1a05000          MOV      r5,r0                 ;528
00009c  ea000007          B        |L5.192|
                  |L5.160|
0000a0  e1a00000          MOV      r0,r0                 ;530
0000a4  e59f0324          LDR      r0,|L5.976|
0000a8  ebfffffe          BL       sysGetPLL
0000ac  e1a05000          MOV      r5,r0                 ;531
0000b0  ea000002          B        |L5.192|
                  |L5.180|
0000b4  e1a00000          MOV      r0,r0                 ;533
0000b8  e3a00000          MOV      r0,#0                 ;534
0000bc  eaffffdf          B        |L5.64|
                  |L5.192|
0000c0  e1a00000          MOV      r0,r0                 ;526
0000c4  e2040007          AND      r0,r4,#7              ;536
0000c8  e2806001          ADD      r6,r0,#1              ;536
0000cc  e2040c0f          AND      r0,r4,#0xf00          ;537
0000d0  e3a01001          MOV      r1,#1                 ;537
0000d4  e0817420          ADD      r7,r1,r0,LSR #8       ;537
0000d8  e1a01006          MOV      r1,r6                 ;538
0000dc  e1a00005          MOV      r0,r5                 ;538
0000e0  ebfffffe          BL       __aeabi_uidivmod
0000e4  e1a0a000          MOV      r10,r0                ;538
0000e8  e1a01007          MOV      r1,r7                 ;538
0000ec  ebfffffe          BL       __aeabi_uidivmod
0000f0  eaffffd2          B        |L5.64|
                  |L5.244|
0000f4  e1a00000          MOV      r0,r0                 ;541
0000f8  e3a0020b          MOV      r0,#0xb0000000        ;543
0000fc  e5904220          LDR      r4,[r0,#0x220]        ;543
000100  e2040018          AND      r0,r4,#0x18           ;544
000104  e3500000          CMP      r0,#0                 ;544
000108  0a000004          BEQ      |L5.288|
00010c  e3500010          CMP      r0,#0x10              ;544
000110  0a000005          BEQ      |L5.300|
000114  e3500018          CMP      r0,#0x18              ;544
000118  1a00000d          BNE      |L5.340|
00011c  ea000007          B        |L5.320|
                  |L5.288|
000120  e1a00000          MOV      r0,r0                 ;546
000124  e3a0500c          MOV      r5,#0xc               ;547
000128  ea00000c          B        |L5.352|
                  |L5.300|
00012c  e1a00000          MOV      r0,r0                 ;549
000130  e59f029c          LDR      r0,|L5.980|
000134  ebfffffe          BL       sysGetPLL
000138  e1a05000          MOV      r5,r0                 ;550
00013c  ea000007          B        |L5.352|
                  |L5.320|
000140  e1a00000          MOV      r0,r0                 ;552
000144  e59f0284          LDR      r0,|L5.976|
000148  ebfffffe          BL       sysGetPLL
00014c  e1a05000          MOV      r5,r0                 ;553
000150  ea000002          B        |L5.352|
                  |L5.340|
000154  e1a00000          MOV      r0,r0                 ;555
000158  e3a00000          MOV      r0,#0                 ;556
00015c  eaffffb7          B        |L5.64|
                  |L5.352|
000160  e1a00000          MOV      r0,r0                 ;548
000164  e2040007          AND      r0,r4,#7              ;558
000168  e2806001          ADD      r6,r0,#1              ;558
00016c  e2040c0f          AND      r0,r4,#0xf00          ;559
000170  e3a01001          MOV      r1,#1                 ;559
000174  e0817420          ADD      r7,r1,r0,LSR #8       ;559
000178  e1a01006          MOV      r1,r6                 ;560
00017c  e1a00005          MOV      r0,r5                 ;560
000180  ebfffffe          BL       __aeabi_uidivmod
000184  e1a0a000          MOV      r10,r0                ;560
000188  e1a01007          MOV      r1,r7                 ;560
00018c  ebfffffe          BL       __aeabi_uidivmod
000190  e1a000a0          LSR      r0,r0,#1              ;560
000194  eaffffa9          B        |L5.64|
                  |L5.408|
000198  e1a00000          MOV      r0,r0                 ;563
00019c  e3a0020b          MOV      r0,#0xb0000000        ;565
0001a0  e5904220          LDR      r4,[r0,#0x220]        ;565
0001a4  e2040018          AND      r0,r4,#0x18           ;566
0001a8  e3500000          CMP      r0,#0                 ;566
0001ac  0a000004          BEQ      |L5.452|
0001b0  e3500010          CMP      r0,#0x10              ;566
0001b4  0a000005          BEQ      |L5.464|
0001b8  e3500018          CMP      r0,#0x18              ;566
0001bc  1a00000d          BNE      |L5.504|
0001c0  ea000007          B        |L5.484|
                  |L5.452|
0001c4  e1a00000          MOV      r0,r0                 ;568
0001c8  e3a0500c          MOV      r5,#0xc               ;569
0001cc  ea00000c          B        |L5.516|
                  |L5.464|
0001d0  e1a00000          MOV      r0,r0                 ;571
0001d4  e59f01f8          LDR      r0,|L5.980|
0001d8  ebfffffe          BL       sysGetPLL
0001dc  e1a05000          MOV      r5,r0                 ;572
0001e0  ea000007          B        |L5.516|
                  |L5.484|
0001e4  e1a00000          MOV      r0,r0                 ;574
0001e8  e59f01e0          LDR      r0,|L5.976|
0001ec  ebfffffe          BL       sysGetPLL
0001f0  e1a05000          MOV      r5,r0                 ;575
0001f4  ea000002          B        |L5.516|
                  |L5.504|
0001f8  e1a00000          MOV      r0,r0                 ;577
0001fc  e3a00000          MOV      r0,#0                 ;578
000200  eaffff8e          B        |L5.64|
                  |L5.516|
000204  e1a00000          MOV      r0,r0                 ;570
000208  e2040007          AND      r0,r4,#7              ;580
00020c  e2806001          ADD      r6,r0,#1              ;580
000210  e2040c0f          AND      r0,r4,#0xf00          ;581
000214  e3a01001          MOV      r1,#1                 ;581
000218  e0817420          ADD      r7,r1,r0,LSR #8       ;581
00021c  e204060f          AND      r0,r4,#0xf00000       ;582
000220  e0818a20          ADD      r8,r1,r0,LSR #20      ;582
000224  e1a01006          MOV      r1,r6                 ;583
000228  e1a00005          MOV      r0,r5                 ;583
00022c  ebfffffe          BL       __aeabi_uidivmod
000230  e1a0b000          MOV      r11,r0                ;583
000234  e1a01007          MOV      r1,r7                 ;583
000238  ebfffffe          BL       __aeabi_uidivmod
00023c  e1a0a0a0          LSR      r10,r0,#1             ;583
000240  e1a01008          MOV      r1,r8                 ;583
000244  e1a0000a          MOV      r0,r10                ;583
000248  ebfffffe          BL       __aeabi_uidivmod
00024c  eaffff7b          B        |L5.64|
                  |L5.592|
000250  e1a00000          MOV      r0,r0                 ;586
000254  e3a0020b          MOV      r0,#0xb0000000        ;588
000258  e5904220          LDR      r4,[r0,#0x220]        ;588
00025c  e2040018          AND      r0,r4,#0x18           ;589
000260  e3500000          CMP      r0,#0                 ;589
000264  0a000004          BEQ      |L5.636|
000268  e3500010          CMP      r0,#0x10              ;589
00026c  0a000005          BEQ      |L5.648|
000270  e3500018          CMP      r0,#0x18              ;589
000274  1a00000d          BNE      |L5.688|
000278  ea000007          B        |L5.668|
                  |L5.636|
00027c  e1a00000          MOV      r0,r0                 ;591
000280  e3a0500c          MOV      r5,#0xc               ;592
000284  ea00000c          B        |L5.700|
                  |L5.648|
000288  e1a00000          MOV      r0,r0                 ;594
00028c  e59f0140          LDR      r0,|L5.980|
000290  ebfffffe          BL       sysGetPLL
000294  e1a05000          MOV      r5,r0                 ;595
000298  ea000007          B        |L5.700|
                  |L5.668|
00029c  e1a00000          MOV      r0,r0                 ;597
0002a0  e59f0128          LDR      r0,|L5.976|
0002a4  ebfffffe          BL       sysGetPLL
0002a8  e1a05000          MOV      r5,r0                 ;598
0002ac  ea000002          B        |L5.700|
                  |L5.688|
0002b0  e1a00000          MOV      r0,r0                 ;600
0002b4  e3a00000          MOV      r0,#0                 ;601
0002b8  eaffff60          B        |L5.64|
                  |L5.700|
0002bc  e1a00000          MOV      r0,r0                 ;593
0002c0  e2040007          AND      r0,r4,#7              ;603
0002c4  e2806001          ADD      r6,r0,#1              ;603
0002c8  e2040c0f          AND      r0,r4,#0xf00          ;604
0002cc  e3a01001          MOV      r1,#1                 ;604
0002d0  e0817420          ADD      r7,r1,r0,LSR #8       ;604
0002d4  e204040f          AND      r0,r4,#0xf000000      ;605
0002d8  e0818c20          ADD      r8,r1,r0,LSR #24      ;605
0002dc  e1a01006          MOV      r1,r6                 ;606
0002e0  e1a00005          MOV      r0,r5                 ;606
0002e4  ebfffffe          BL       __aeabi_uidivmod
0002e8  e1a0b000          MOV      r11,r0                ;606
0002ec  e1a01007          MOV      r1,r7                 ;606
0002f0  ebfffffe          BL       __aeabi_uidivmod
0002f4  e1a0a0a0          LSR      r10,r0,#1             ;606
0002f8  e1a01008          MOV      r1,r8                 ;606
0002fc  e1a0000a          MOV      r0,r10                ;606
000300  ebfffffe          BL       __aeabi_uidivmod
000304  eaffff4d          B        |L5.64|
                  |L5.776|
000308  e1a00000          MOV      r0,r0                 ;608
00030c  e3a0020b          MOV      r0,#0xb0000000        ;610
000310  e5904220          LDR      r4,[r0,#0x220]        ;610
000314  e2040018          AND      r0,r4,#0x18           ;611
000318  e3500000          CMP      r0,#0                 ;611
00031c  0a000004          BEQ      |L5.820|
000320  e3500010          CMP      r0,#0x10              ;611
000324  0a000005          BEQ      |L5.832|
000328  e3500018          CMP      r0,#0x18              ;611
00032c  1a00000d          BNE      |L5.872|
000330  ea000007          B        |L5.852|
                  |L5.820|
000334  e1a00000          MOV      r0,r0                 ;613
000338  e3a0500c          MOV      r5,#0xc               ;614
00033c  ea00000c          B        |L5.884|
                  |L5.832|
000340  e1a00000          MOV      r0,r0                 ;616
000344  e59f0088          LDR      r0,|L5.980|
000348  ebfffffe          BL       sysGetPLL
00034c  e1a05000          MOV      r5,r0                 ;617
000350  ea000007          B        |L5.884|
                  |L5.852|
000354  e1a00000          MOV      r0,r0                 ;619
000358  e59f0070          LDR      r0,|L5.976|
00035c  ebfffffe          BL       sysGetPLL
000360  e1a05000          MOV      r5,r0                 ;620
000364  ea000002          B        |L5.884|
                  |L5.872|
000368  e1a00000          MOV      r0,r0                 ;622
00036c  e3a00000          MOV      r0,#0                 ;623
000370  eaffff32          B        |L5.64|
                  |L5.884|
000374  e1a00000          MOV      r0,r0                 ;615
000378  e2040007          AND      r0,r4,#7              ;625
00037c  e2806001          ADD      r6,r0,#1              ;625
000380  e2040c0f          AND      r0,r4,#0xf00          ;626
000384  e3a01001          MOV      r1,#1                 ;626
000388  e0817420          ADD      r7,r1,r0,LSR #8       ;626
00038c  e204080f          AND      r0,r4,#0xf0000        ;627
000390  e0818820          ADD      r8,r1,r0,LSR #16      ;627
000394  e1a01006          MOV      r1,r6                 ;628
000398  e1a00005          MOV      r0,r5                 ;628
00039c  ebfffffe          BL       __aeabi_uidivmod
0003a0  e1a0b000          MOV      r11,r0                ;628
0003a4  e1a01007          MOV      r1,r7                 ;628
0003a8  ebfffffe          BL       __aeabi_uidivmod
0003ac  e1a0a000          MOV      r10,r0                ;628
0003b0  e1a01008          MOV      r1,r8                 ;628
0003b4  ebfffffe          BL       __aeabi_uidivmod
0003b8  eaffff20          B        |L5.64|
                  |L5.956|
0003bc  e1a00000          MOV      r0,r0                 ;631
0003c0  e1a00000          MOV      r0,r0                 ;511
0003c4  e1a00000          MOV      r0,r0                 ;511
0003c8  e3a00000          MOV      r0,#0                 ;634
0003cc  eaffff1b          B        |L5.64|
;;;636    
                          ENDP

                  |L5.976|
                          DCD      0xb0000264
                  |L5.980|
                          DCD      0xb0000260

                          AREA ||i.sysGetIBitState||, CODE, READONLY, ALIGN=2

                  sysGetIBitState PROC
;;;472    /// @cond HIDDEN_SYMBOLS
;;;473    BOOL sysGetIBitState()
000000  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;474    {
;;;475        INT32 temp;
;;;476    
;;;477        __asm
;;;478        {
;;;479            MRS temp, CPSR
;;;480        }
;;;481    
;;;482        if (temp & 0x80)
000004  e2010080          AND      r0,r1,#0x80
000008  e3500000          CMP      r0,#0
00000c  0a000001          BEQ      |L6.24|
;;;483            return FALSE;
000010  e3a00000          MOV      r0,#0
                  |L6.20|
;;;484        else
;;;485            return TRUE;
;;;486    }
000014  e12fff1e          BX       lr
                  |L6.24|
000018  e3a00001          MOV      r0,#1                 ;485
00001c  eafffffc          B        |L6.20|
;;;487    
                          ENDP


                          AREA ||i.sysGetInterruptEnableStatus||, CODE, READONLY, ALIGN=2

                  sysGetInterruptEnableStatus PROC
;;;460    
;;;461    UINT32  sysGetInterruptEnableStatus(void)
000000  e59f0004          LDR      r0,|L7.12|
;;;462    {
;;;463        return (inpw(REG_AIC_IMR));
000004  e5900128          LDR      r0,[r0,#0x128]
;;;464    }
000008  e12fff1e          BX       lr
;;;465    
                          ENDP

                  |L7.12|
                          DCD      0xb8002000

                          AREA ||i.sysGetInterruptEnableStatusH||, CODE, READONLY, ALIGN=2

                  sysGetInterruptEnableStatusH PROC
;;;466    
;;;467    UINT32  sysGetInterruptEnableStatusH(void)
000000  e59f0004          LDR      r0,|L8.12|
;;;468    {
;;;469        return (inpw(REG_AIC_IMRH));
000004  e590012c          LDR      r0,[r0,#0x12c]
;;;470    }
000008  e12fff1e          BX       lr
;;;471    
                          ENDP

                  |L8.12|
                          DCD      0xb8002000

                          AREA ||i.sysGetPLL||, CODE, READONLY, ALIGN=2

                  sysGetPLL PROC
;;;487    
;;;488    INT32 sysGetPLL(UINT32 reg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;489    {
000004  e1a04000          MOV      r4,r0
;;;490        UINT32 N,M,P;
;;;491    
;;;492        N =((inpw(reg) & 0x007F)>>0)+1;
000008  e5940000          LDR      r0,[r4,#0]
00000c  e200007f          AND      r0,r0,#0x7f
000010  e2805001          ADD      r5,r0,#1
;;;493        M =((inpw(reg) & 0x1F80)>>7)+1;
000014  e5940000          LDR      r0,[r4,#0]
000018  e2000d7e          AND      r0,r0,#0x1f80
00001c  e3a01001          MOV      r1,#1
000020  e08163a0          ADD      r6,r1,r0,LSR #7
;;;494        P =((inpw(reg) & 0xE000)>>13)+1;
000024  e5940000          LDR      r0,[r4,#0]
000028  e2000a0e          AND      r0,r0,#0xe000
00002c  e08176a0          ADD      r7,r1,r0,LSR #13
;;;495    
;;;496        return (12*N/(M*P));    /* 12MHz HXT */
000030  e1610786          SMULBB   r1,r6,r7
000034  e0852085          ADD      r2,r5,r5,LSL #1
000038  e1a00102          LSL      r0,r2,#2
00003c  ebfffffe          BL       __aeabi_uidivmod
;;;497    }
000040  e8bd81f0          POP      {r4-r8,pc}
;;;498    /// @endcond HIDDEN_SYMBOLS
                          ENDP


                          AREA ||i.sysInitializeAIC||, CODE, READONLY, ALIGN=2

                  sysInitializeAIC PROC
;;;188    
;;;189    void sysInitializeAIC()
000000  e59f0010          LDR      r0,|L10.24|
;;;190    {
;;;191        *(unsigned int volatile *)0x38 = (unsigned int)sysIrqHandler;
000004  e3a01000          MOV      r1,#0
000008  e5810038          STR      r0,[r1,#0x38]
;;;192    
;;;193        *(unsigned int volatile *)0x3C = (unsigned int)sysFiqHandler;
00000c  e59f0008          LDR      r0,|L10.28|
000010  e581003c          STR      r0,[r1,#0x3c]
;;;194    }
000014  e12fff1e          BX       lr
;;;195    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  |L10.24|
                          DCD      sysIrqHandler
                  |L10.28|
                          DCD      sysFiqHandler

                          AREA ||i.sysInstallExceptionHandler||, CODE, READONLY, ALIGN=2

                  sysInstallExceptionHandler PROC
;;;248     */
;;;249    PVOID sysInstallExceptionHandler(INT32 nExceptType, PVOID pvNewHandler)
000000  e1a02000          MOV      r2,r0
;;;250    {
;;;251       PVOID _mOldVect = NULL;
000004  e3a00000          MOV      r0,#0
;;;252    
;;;253       switch (nExceptType)
000008  e3520000          CMP      r2,#0
00000c  0a000006          BEQ      |L11.44|
000010  e3520001          CMP      r2,#1
000014  0a000009          BEQ      |L11.64|
000018  e3520002          CMP      r2,#2
00001c  0a00000c          BEQ      |L11.84|
000020  e3520003          CMP      r2,#3
000024  1a000014          BNE      |L11.124|
000028  ea00000e          B        |L11.104|
                  |L11.44|
;;;254       {
;;;255          case SYS_SWI:
00002c  e1a00000          MOV      r0,r0
;;;256               _mOldVect = *(PVOID volatile *)0x28;
000030  e3a03000          MOV      r3,#0
000034  e5930028          LDR      r0,[r3,#0x28]
;;;257               *(PVOID volatile *)0x28 = pvNewHandler;
000038  e5831028          STR      r1,[r3,#0x28]
;;;258               break;
00003c  ea000010          B        |L11.132|
                  |L11.64|
;;;259    
;;;260          case SYS_D_ABORT:
000040  e1a00000          MOV      r0,r0
;;;261               _mOldVect = *(PVOID volatile *)0x30;
000044  e3a03000          MOV      r3,#0
000048  e5930030          LDR      r0,[r3,#0x30]
;;;262               *(PVOID volatile *)0x30 = pvNewHandler;
00004c  e5831030          STR      r1,[r3,#0x30]
;;;263               break;
000050  ea00000b          B        |L11.132|
                  |L11.84|
;;;264    
;;;265          case SYS_I_ABORT:
000054  e1a00000          MOV      r0,r0
;;;266               _mOldVect = *(PVOID volatile *)0x2C;
000058  e3a03000          MOV      r3,#0
00005c  e593002c          LDR      r0,[r3,#0x2c]
;;;267               *(PVOID volatile *)0x2C = pvNewHandler;
000060  e583102c          STR      r1,[r3,#0x2c]
;;;268               break;
000064  ea000006          B        |L11.132|
                  |L11.104|
;;;269    
;;;270          case SYS_UNDEFINE:
000068  e1a00000          MOV      r0,r0
;;;271               _mOldVect = *(PVOID volatile *)0x24;
00006c  e3a03000          MOV      r3,#0
000070  e5930024          LDR      r0,[r3,#0x24]
;;;272               *(PVOID volatile *)0x24 = pvNewHandler;
000074  e5831024          STR      r1,[r3,#0x24]
;;;273               break;
000078  ea000001          B        |L11.132|
                  |L11.124|
;;;274    
;;;275          default:
00007c  e1a00000          MOV      r0,r0
000080  e1a00000          MOV      r0,r0                 ;253
                  |L11.132|
000084  e1a00000          MOV      r0,r0                 ;258
;;;276               ;
;;;277       }
;;;278       return _mOldVect;
;;;279    }
000088  e12fff1e          BX       lr
;;;280    
                          ENDP


                          AREA ||i.sysInstallFiqHandler||, CODE, READONLY, ALIGN=2

                  sysInstallFiqHandler PROC
;;;287     */
;;;288    PVOID sysInstallFiqHandler(PVOID pvNewISR)
000000  e1a01000          MOV      r1,r0
;;;289    {
;;;290        PVOID _mOldVect;
;;;291    
;;;292        _mOldVect = *(PVOID volatile *)0x3C;
000004  e3a02000          MOV      r2,#0
000008  e592003c          LDR      r0,[r2,#0x3c]
;;;293        *(PVOID volatile *)0x3C = pvNewISR;
00000c  e582103c          STR      r1,[r2,#0x3c]
;;;294        return _mOldVect;
;;;295    }
000010  e12fff1e          BX       lr
;;;296    
                          ENDP


                          AREA ||i.sysInstallISR||, CODE, READONLY, ALIGN=2

                  sysInstallISR PROC
;;;323     */
;;;324    PVOID sysInstallISR(INT32 nIntTypeLevel, IRQn_Type eIntNo, PVOID pvNewISR)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;325    {
000004  e1a04000          MOV      r4,r0
000008  e1a03001          MOV      r3,r1
;;;326        PVOID   _mOldVect;
;;;327        UINT32  _mRegAddr/*, _mRegValue*/;
;;;328        INT     shift;
;;;329    
;;;330        if (!_sys_bIsAICInitial)
00000c  e59f0090          LDR      r0,|L13.164|
000010  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsAICInitial
000014  e3500000          CMP      r0,#0
000018  1a000003          BNE      |L13.44|
;;;331        {
;;;332            sysInitializeAIC();
00001c  ebfffffe          BL       sysInitializeAIC
;;;333            _sys_bIsAICInitial = TRUE;
000020  e3a00001          MOV      r0,#1
000024  e59f1078          LDR      r1,|L13.164|
000028  e5c10000          STRB     r0,[r1,#0]  ; _sys_bIsAICInitial
                  |L13.44|
;;;334        }
;;;335    
;;;336        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
00002c  e1a00003          MOV      r0,r3
000030  e1a01fc3          ASR      r1,r3,#31
000034  e0831f21          ADD      r1,r3,r1,LSR #30
000038  e1a01141          ASR      r1,r1,#2
00003c  e59fc064          LDR      r12,|L13.168|
000040  e08c6101          ADD      r6,r12,r1,LSL #2
;;;337        shift = (eIntNo % 4) * 8;
000044  e1a00003          MOV      r0,r3
000048  e1a01fc3          ASR      r1,r3,#31
00004c  e0831f21          ADD      r1,r3,r1,LSR #30
000050  e1a01141          ASR      r1,r1,#2
000054  e0431101          SUB      r1,r3,r1,LSL #2
000058  e1a07181          LSL      r7,r1,#3
;;;338        nIntTypeLevel &= 0xff;
00005c  e20440ff          AND      r4,r4,#0xff
;;;339        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (nIntTypeLevel << shift));
000060  e5960000          LDR      r0,[r6,#0]
000064  e3a01007          MOV      r1,#7
000068  e1c00711          BIC      r0,r0,r1,LSL r7
00006c  e1800714          ORR      r0,r0,r4,LSL r7
000070  e5860000          STR      r0,[r6,#0]
;;;340    
;;;341        if ((nIntTypeLevel & 0x7) == FIQ_LEVEL_0)
000074  e2040007          AND      r0,r4,#7
000078  e3500000          CMP      r0,#0
00007c  1a000003          BNE      |L13.144|
;;;342        {
;;;343            _mOldVect = (PVOID) sysFiqHandlerTable[eIntNo];
000080  e59f0024          LDR      r0,|L13.172|
000084  e7905103          LDR      r5,[r0,r3,LSL #2]
;;;344            sysFiqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
000088  e7802103          STR      r2,[r0,r3,LSL #2]
00008c  ea000002          B        |L13.156|
                  |L13.144|
;;;345        }
;;;346        else
;;;347        {
;;;348           _mOldVect = (PVOID) sysIrqHandlerTable[eIntNo];
000090  e59f0018          LDR      r0,|L13.176|
000094  e7905103          LDR      r5,[r0,r3,LSL #2]
;;;349           sysIrqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
000098  e7802103          STR      r2,[r0,r3,LSL #2]
                  |L13.156|
;;;350        }
;;;351        return _mOldVect;
00009c  e1a00005          MOV      r0,r5
;;;352    }
0000a0  e8bd80f0          POP      {r4-r7,pc}
;;;353    
                          ENDP

                  |L13.164|
                          DCD      _sys_bIsAICInitial
                  |L13.168|
                          DCD      0xb8002000
                  |L13.172|
                          DCD      sysFiqHandlerTable
                  |L13.176|
                          DCD      sysIrqHandlerTable

                          AREA ||i.sysInstallIrqHandler||, CODE, READONLY, ALIGN=2

                  sysInstallIrqHandler PROC
;;;303     */
;;;304    PVOID sysInstallIrqHandler(PVOID pvNewISR)
000000  e1a01000          MOV      r1,r0
;;;305    {
;;;306        PVOID _mOldVect;
;;;307    
;;;308        _mOldVect = *(PVOID volatile *)0x38;
000004  e3a02000          MOV      r2,#0
000008  e5920038          LDR      r0,[r2,#0x38]
;;;309        *(PVOID volatile *)0x38 = pvNewISR;
00000c  e5821038          STR      r1,[r2,#0x38]
;;;310        return _mOldVect;
;;;311    }
000010  e12fff1e          BX       lr
;;;312    
                          ENDP


                          AREA ||i.sysIrqHandler||, CODE, READONLY, ALIGN=2

                  sysIrqHandler PROC
;;;157    /* Interrupt Handler */
;;;158    __irq void sysIrqHandler()
000000  e92d500f          PUSH     {r0-r3,r12,lr}
;;;159    {
000004  e24dd008          SUB      sp,sp,#8
;;;160        UINT32 volatile _mIPER, _mISNR;
;;;161    
;;;162        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000008  e59f0058          LDR      r0,|L15.104|
00000c  e5900118          LDR      r0,[r0,#0x118]
000010  e3a0103f          MOV      r1,#0x3f
000014  e0010120          AND      r0,r1,r0,LSR #2
000018  e58d0004          STR      r0,[sp,#4]
;;;163        _mISNR = inpw(REG_AIC_ISNR);
00001c  e59f0044          LDR      r0,|L15.104|
000020  e5900120          LDR      r0,[r0,#0x120]
000024  e58d0000          STR      r0,[sp,#0]
;;;164        if (_mIPER != 0) {
000028  e59d0004          LDR      r0,[sp,#4]
00002c  e3500000          CMP      r0,#0
000030  0a000009          BEQ      |L15.92|
;;;165            if (_mISNR != 0)
000034  e59d0000          LDR      r0,[sp,#0]
000038  e3500000          CMP      r0,#0
00003c  0a000003          BEQ      |L15.80|
;;;166                (*sysIrqHandlerTable[_mIPER])();
000040  e59f1024          LDR      r1,|L15.108|
000044  e59d2004          LDR      r2,[sp,#4]
000048  e7910102          LDR      r0,[r1,r2,LSL #2]
00004c  e12fff30          BLX      r0
                  |L15.80|
;;;167            outpw(REG_AIC_EOSCR, 1);
000050  e3a00001          MOV      r0,#1
000054  e59f100c          LDR      r1,|L15.104|
000058  e5810150          STR      r0,[r1,#0x150]
                  |L15.92|
;;;168        }
;;;169    }
00005c  e28dd008          ADD      sp,sp,#8
000060  e8bd500f          POP      {r0-r3,r12,lr}
000064  e25ef004          SUBS     pc,lr,#4
;;;170    
                          ENDP

                  |L15.104|
                          DCD      0xb8002000
                  |L15.108|
                          DCD      sysIrqHandlerTable

                          AREA ||i.sysSetGlobalInterrupt||, CODE, READONLY, ALIGN=2

                  sysSetGlobalInterrupt PROC
;;;354    
;;;355    INT32 sysSetGlobalInterrupt(INT32 nIntState)
000000  e1a01000          MOV      r1,r0
;;;356    {
;;;357       switch (nIntState)
000004  e3510000          CMP      r1,#0
000008  0a000002          BEQ      |L16.24|
00000c  e3510001          CMP      r1,#1
000010  1a00000c          BNE      |L16.72|
000014  ea000005          B        |L16.48|
                  |L16.24|
;;;358       {
;;;359          case ENABLE_ALL_INTERRUPTS:
000018  e1a00000          MOV      r0,r0
;;;360               outpw(REG_AIC_MECR, 0xFFFFFFFF);
00001c  e3e00000          MVN      r0,#0
000020  e59f2034          LDR      r2,|L16.92|
000024  e5820130          STR      r0,[r2,#0x130]
;;;361               outpw(REG_AIC_MECRH, 0xFFFFFFFF);
000028  e5820134          STR      r0,[r2,#0x134]
;;;362               break;
00002c  ea000007          B        |L16.80|
                  |L16.48|
;;;363    
;;;364          case DISABLE_ALL_INTERRUPTS:
000030  e1a00000          MOV      r0,r0
;;;365               outpw(REG_AIC_MDCR, 0xFFFFFFFF);
000034  e3e00000          MVN      r0,#0
000038  e59f201c          LDR      r2,|L16.92|
00003c  e5820138          STR      r0,[r2,#0x138]
;;;366               outpw(REG_AIC_MDCRH, 0xFFFFFFFF);
000040  e582013c          STR      r0,[r2,#0x13c]
;;;367               break;
000044  ea000001          B        |L16.80|
                  |L16.72|
;;;368    
;;;369          default:
000048  e1a00000          MOV      r0,r0
00004c  e1a00000          MOV      r0,r0                 ;357
                  |L16.80|
000050  e1a00000          MOV      r0,r0                 ;362
;;;370               ;
;;;371       }
;;;372       return 0;
000054  e3a00000          MOV      r0,#0
;;;373    }
000058  e12fff1e          BX       lr
;;;374    
                          ENDP

                  |L16.92|
                          DCD      0xb8002000

                          AREA ||i.sysSetInterruptPriorityLevel||, CODE, READONLY, ALIGN=2

                  sysSetInterruptPriorityLevel PROC
;;;384     */
;;;385    INT32 sysSetInterruptPriorityLevel(IRQn_Type eIntNo, UINT32 uIntLevel)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;386    {
000004  e1a02000          MOV      r2,r0
;;;387        UINT32  _mRegAddr;
;;;388        INT     shift;
;;;389    
;;;390       if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000008  e352003e          CMP      r2,#0x3e
00000c  ca000001          BGT      |L17.24|
000010  e3520001          CMP      r2,#1
000014  aa000001          BGE      |L17.32|
                  |L17.24|
;;;391          return 1;
000018  e3a00001          MOV      r0,#1
                  |L17.28|
;;;392    
;;;393        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;394        shift = (eIntNo % 4) * 8;
;;;395        uIntLevel &= 0x7;
;;;396        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (uIntLevel << shift));
;;;397    
;;;398        return 0;
;;;399    }
00001c  e8bd8030          POP      {r4,r5,pc}
                  |L17.32|
000020  e1a00002          MOV      r0,r2                 ;393
000024  e1a04fc2          ASR      r4,r2,#31             ;393
000028  e0824f24          ADD      r4,r2,r4,LSR #30      ;393
00002c  e1a04144          ASR      r4,r4,#2              ;393
000030  e59f5038          LDR      r5,|L17.112|
000034  e085c104          ADD      r12,r5,r4,LSL #2      ;393
000038  e1a00002          MOV      r0,r2                 ;394
00003c  e1a04fc2          ASR      r4,r2,#31             ;394
000040  e0824f24          ADD      r4,r2,r4,LSR #30      ;394
000044  e1a04144          ASR      r4,r4,#2              ;394
000048  e0424104          SUB      r4,r2,r4,LSL #2       ;394
00004c  e1a03184          LSL      r3,r4,#3              ;394
000050  e2011007          AND      r1,r1,#7              ;395
000054  e59c0000          LDR      r0,[r12,#0]           ;396
000058  e3a04007          MOV      r4,#7                 ;396
00005c  e1c00314          BIC      r0,r0,r4,LSL r3       ;396
000060  e1800311          ORR      r0,r0,r1,LSL r3       ;396
000064  e58c0000          STR      r0,[r12,#0]           ;396
000068  e3a00000          MOV      r0,#0                 ;398
00006c  eaffffea          B        |L17.28|
;;;400    
                          ENDP

                  |L17.112|
                          DCD      0xb8002000

                          AREA ||i.sysSetInterruptType||, CODE, READONLY, ALIGN=2

                  sysSetInterruptType PROC
;;;401    
;;;402    INT32 sysSetInterruptType(IRQn_Type eIntNo, UINT32 uIntSourceType)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;403    {
000004  e1a02000          MOV      r2,r0
;;;404        UINT32 _mRegAddr;
;;;405        INT     shift;
;;;406    
;;;407        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000008  e352003e          CMP      r2,#0x3e
00000c  ca000001          BGT      |L18.24|
000010  e3520001          CMP      r2,#1
000014  aa000001          BGE      |L18.32|
                  |L18.24|
;;;408            return 1;
000018  e3a00001          MOV      r0,#1
                  |L18.28|
;;;409    
;;;410        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;411        shift = (eIntNo % 4) * 8;
;;;412        uIntSourceType &= 0xC0;
;;;413        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0xC0 << shift)) | (uIntSourceType << shift));
;;;414    
;;;415        return 0;
;;;416    }
00001c  e8bd8030          POP      {r4,r5,pc}
                  |L18.32|
000020  e1a00002          MOV      r0,r2                 ;410
000024  e1a04fc2          ASR      r4,r2,#31             ;410
000028  e0824f24          ADD      r4,r2,r4,LSR #30      ;410
00002c  e1a04144          ASR      r4,r4,#2              ;410
000030  e59f5038          LDR      r5,|L18.112|
000034  e085c104          ADD      r12,r5,r4,LSL #2      ;410
000038  e1a00002          MOV      r0,r2                 ;411
00003c  e1a04fc2          ASR      r4,r2,#31             ;411
000040  e0824f24          ADD      r4,r2,r4,LSR #30      ;411
000044  e1a04144          ASR      r4,r4,#2              ;411
000048  e0424104          SUB      r4,r2,r4,LSL #2       ;411
00004c  e1a03184          LSL      r3,r4,#3              ;411
000050  e20110c0          AND      r1,r1,#0xc0           ;412
000054  e59c0000          LDR      r0,[r12,#0]           ;413
000058  e3a040c0          MOV      r4,#0xc0              ;413
00005c  e1c00314          BIC      r0,r0,r4,LSL r3       ;413
000060  e1800311          ORR      r0,r0,r1,LSL r3       ;413
000064  e58c0000          STR      r0,[r12,#0]           ;413
000068  e3a00000          MOV      r0,#0                 ;415
00006c  eaffffea          B        |L18.28|
;;;417    
                          ENDP

                  |L18.112|
                          DCD      0xb8002000

                          AREA ||i.sysSetLocalInterrupt||, CODE, READONLY, ALIGN=2

                  sysSetLocalInterrupt PROC
;;;426     */
;;;427    INT32 sysSetLocalInterrupt(INT32 nIntState)
000000  e1a01000          MOV      r1,r0
;;;428    {
;;;429       INT32 temp;
;;;430    
;;;431       switch (nIntState)
000004  e3510080          CMP      r1,#0x80
000008  0a000013          BEQ      |L19.92|
00000c  ca000006          BGT      |L19.44|
000010  e351003f          CMP      r1,#0x3f
000014  0a00000c          BEQ      |L19.76|
000018  e3510040          CMP      r1,#0x40
00001c  0a000010          BEQ      |L19.100|
000020  e351007f          CMP      r1,#0x7f
000024  1a000013          BNE      |L19.120|
000028  ea000004          B        |L19.64|
                  |L19.44|
00002c  e35100bf          CMP      r1,#0xbf
000030  0a000004          BEQ      |L19.72|
000034  e35100c0          CMP      r1,#0xc0
000038  1a00000e          BNE      |L19.120|
00003c  ea000009          B        |L19.104|
                  |L19.64|
;;;432       {
;;;433          case ENABLE_IRQ:
000040  e1a00000          MOV      r0,r0
;;;434          case ENABLE_FIQ:
000044  e1a00000          MOV      r0,r0
                  |L19.72|
;;;435          case ENABLE_FIQ_IRQ:
000048  e1a00000          MOV      r0,r0
                  |L19.76|
;;;436               __asm
;;;437               {
;;;438                   MRS    temp, CPSR
00004c  e10f2000          MRS      r2,APSR ; formerly CPSR
;;;439                   AND    temp, temp, nIntState
000050  e0022001          AND      r2,r2,r1
;;;440                   MSR    CPSR_c, temp
000054  e121f002          MSR      CPSR_c,r2
;;;441               }
;;;442               break;
000058  ea000008          B        |L19.128|
                  |L19.92|
;;;443    
;;;444          case DISABLE_IRQ:
00005c  e1a00000          MOV      r0,r0
;;;445          case DISABLE_FIQ:
000060  e1a00000          MOV      r0,r0
                  |L19.100|
;;;446          case DISABLE_FIQ_IRQ:
000064  e1a00000          MOV      r0,r0
                  |L19.104|
;;;447               __asm
;;;448               {
;;;449                   MRS    temp, CPSR
000068  e10f2000          MRS      r2,APSR ; formerly CPSR
;;;450                   ORR    temp, temp, nIntState
00006c  e1822001          ORR      r2,r2,r1
;;;451                   MSR    CPSR_c, temp
000070  e121f002          MSR      CPSR_c,r2
;;;452               }
;;;453               break;
000074  ea000001          B        |L19.128|
                  |L19.120|
;;;454    
;;;455          default:
000078  e1a00000          MOV      r0,r0
00007c  e1a00000          MOV      r0,r0                 ;431
                  |L19.128|
000080  e1a00000          MOV      r0,r0                 ;442
;;;456               ;
;;;457       }
;;;458       return 0;
000084  e3a00000          MOV      r0,#0
;;;459    }
000088  e12fff1e          BX       lr
;;;460    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsAICInitial
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  sysIrqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                  sysFiqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
