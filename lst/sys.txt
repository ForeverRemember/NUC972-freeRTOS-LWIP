; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\sys.crf Driver\Source\sys.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sysIrqHandler PROC
                  |L1.0|
;;;157    /* Interrupt Handler */
;;;158    __irq void sysIrqHandler()
000000  e92d501f          PUSH     {r0-r4,r12,lr}
;;;159    {
;;;160        UINT32 volatile _mIPER, _mISNR;
;;;161    
;;;162        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000004  e59f428c          LDR      r4,|L1.664|
000008  e24dd00c          SUB      sp,sp,#0xc            ;159
00000c  e5940118          LDR      r0,[r4,#0x118]
000010  e1a00c00          LSL      r0,r0,#24
000014  e1a00d20          LSR      r0,r0,#26
;;;163        _mISNR = inpw(REG_AIC_ISNR);
000018  e58d0000          STR      r0,[sp,#0]
00001c  e5940120          LDR      r0,[r4,#0x120]
;;;164        if (_mIPER != 0) {
000020  e58d0004          STR      r0,[sp,#4]
000024  e59d0000          LDR      r0,[sp,#0]
000028  e3500000          CMP      r0,#0
00002c  0a000008          BEQ      |L1.84|
;;;165            if (_mISNR != 0)
000030  e59d0004          LDR      r0,[sp,#4]
000034  e3500000          CMP      r0,#0
000038  0a000003          BEQ      |L1.76|
;;;166                (*sysIrqHandlerTable[_mIPER])();
00003c  e59f0258          LDR      r0,|L1.668|
000040  e59d1000          LDR      r1,[sp,#0]
000044  e7900101          LDR      r0,[r0,r1,LSL #2]
000048  e12fff30          BLX      r0
                  |L1.76|
;;;167            outpw(REG_AIC_EOSCR, 1);
00004c  e3a00001          MOV      r0,#1
000050  e5840150          STR      r0,[r4,#0x150]
                  |L1.84|
;;;168        }
;;;169    }
000054  e28dd00c          ADD      sp,sp,#0xc
000058  e8bd501f          POP      {r0-r4,r12,lr}
00005c  e25ef004          SUBS     pc,lr,#4
;;;170    
                          ENDP

                  sysFiqHandler PROC
                  |L1.96|
;;;171    __irq void sysFiqHandler()
000060  e92d501f          PUSH     {r0-r4,r12,lr}
;;;172    {
;;;173        UINT32 volatile _mIPER, _mISNR;
;;;174    
;;;175        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000064  e59f422c          LDR      r4,|L1.664|
000068  e24dd00c          SUB      sp,sp,#0xc            ;172
00006c  e5940118          LDR      r0,[r4,#0x118]
000070  e1a00c00          LSL      r0,r0,#24
000074  e1a00d20          LSR      r0,r0,#26
;;;176        _mISNR = inpw(REG_AIC_ISNR);
000078  e58d0000          STR      r0,[sp,#0]
00007c  e5940120          LDR      r0,[r4,#0x120]
;;;177        if (_mIPER != 0) {
000080  e58d0004          STR      r0,[sp,#4]
000084  e59d0000          LDR      r0,[sp,#0]
000088  e3500000          CMP      r0,#0
00008c  0a000008          BEQ      |L1.180|
;;;178            if (_mISNR != 0)
000090  e59d0004          LDR      r0,[sp,#4]
000094  e3500000          CMP      r0,#0
000098  0a000003          BEQ      |L1.172|
;;;179                (*sysFiqHandlerTable[_mIPER])();
00009c  e59f01fc          LDR      r0,|L1.672|
0000a0  e59d1000          LDR      r1,[sp,#0]
0000a4  e7900101          LDR      r0,[r0,r1,LSL #2]
0000a8  e12fff30          BLX      r0
                  |L1.172|
;;;180            outpw(REG_AIC_EOSCR, 1);
0000ac  e3a00001          MOV      r0,#1
0000b0  e5840150          STR      r0,[r4,#0x150]
                  |L1.180|
;;;181        }
;;;182    }
0000b4  e28dd00c          ADD      sp,sp,#0xc
0000b8  e8bd501f          POP      {r0-r4,r12,lr}
0000bc  e25ef004          SUBS     pc,lr,#4
;;;183    
                          ENDP

                  SYS_Interrupt_Shell PROC
;;;184    void SYS_Interrupt_Shell()
0000c0  e59f01d0          LDR      r0,|L1.664|
;;;185    {
;;;186        sysprintf("ISR not found! ISNR=%d\n", inpw(REG_AIC_ISNR));
0000c4  e5901120          LDR      r1,[r0,#0x120]
0000c8  e28f0f75          ADR      r0,|L1.676|
0000cc  eafffffe          B        sysprintf
;;;187    }
;;;188    
                          ENDP

                  sysInitializeAIC PROC
;;;189    void sysInitializeAIC()
0000d0  e24f10d8          ADR      r1,|L1.0|
;;;190    {
;;;191        *(unsigned int volatile *)0x38 = (unsigned int)sysIrqHandler;
0000d4  e3a00000          MOV      r0,#0
0000d8  e5801038          STR      r1,[r0,#0x38]
;;;192    
;;;193        *(unsigned int volatile *)0x3C = (unsigned int)sysFiqHandler;
0000dc  e24f1084          ADR      r1,|L1.96|
0000e0  e580103c          STR      r1,[r0,#0x3c]
;;;194    }
0000e4  e12fff1e          BX       lr
;;;195    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysDisableInterrupt PROC
;;;205     */
;;;206    INT32 sysDisableInterrupt(IRQn_Type eIntNo)
0000e8  e2401001          SUB      r1,r0,#1
;;;207    {
;;;208        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
0000ec  e351003e          CMP      r1,#0x3e
;;;209            return 1;
0000f0  23a00001          MOVCS    r0,#1
;;;210    
;;;211        if (eIntNo < 32)
;;;212            outpw(REG_AIC_MDCR, (1 << eIntNo));
;;;213        else
;;;214            outpw(REG_AIC_MDCRH, (1 << (eIntNo - 32)));
;;;215    
;;;216        return 0;
;;;217    }
0000f4  212fff1e          BXCS     lr
0000f8  e3500020          CMP      r0,#0x20              ;211
0000fc  e3a02001          MOV      r2,#1                 ;209
000100  22400020          SUBCS    r0,r0,#0x20           ;211
000104  e59f118c          LDR      r1,|L1.664|
000108  e1a00012          LSL      r0,r2,r0              ;214
00010c  35810138          STRCC    r0,[r1,#0x138]        ;212
000110  2581013c          STRCS    r0,[r1,#0x13c]        ;214
000114  e3a00000          MOV      r0,#0                 ;216
000118  e12fff1e          BX       lr
;;;218    
                          ENDP

                  sysEnableInterrupt PROC
;;;226     */
;;;227    INT32 sysEnableInterrupt(IRQn_Type eIntNo)
00011c  e2401001          SUB      r1,r0,#1
;;;228    {
;;;229       if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000120  e351003e          CMP      r1,#0x3e
;;;230          return 1;
000124  23a00001          MOVCS    r0,#1
;;;231    
;;;232        if (eIntNo < 32)
;;;233            outpw(REG_AIC_MECR, (1 << eIntNo));
;;;234        else
;;;235            outpw(REG_AIC_MECRH, (1 << (eIntNo - 32)));
;;;236    
;;;237        return 0;
;;;238    }
000128  212fff1e          BXCS     lr
00012c  e3500020          CMP      r0,#0x20              ;232
000130  e3a02001          MOV      r2,#1                 ;230
000134  22400020          SUBCS    r0,r0,#0x20           ;232
000138  e59f1158          LDR      r1,|L1.664|
00013c  e1a00012          LSL      r0,r2,r0              ;235
000140  35810130          STRCC    r0,[r1,#0x130]        ;233
000144  25810134          STRCS    r0,[r1,#0x134]        ;235
000148  e3a00000          MOV      r0,#0                 ;237
00014c  e12fff1e          BX       lr
;;;239    
                          ENDP

                  sysInstallExceptionHandler PROC
;;;248     */
;;;249    PVOID sysInstallExceptionHandler(INT32 nExceptType, PVOID pvNewHandler)
000150  e1b02000          MOVS     r2,r0
;;;250    {
;;;251       PVOID _mOldVect = NULL;
000154  e3a00000          MOV      r0,#0
000158  e1a03000          MOV      r3,r0
;;;252    
;;;253       switch (nExceptType)
;;;254       {
;;;255          case SYS_SWI:
;;;256               _mOldVect = *(PVOID volatile *)0x28;
00015c  05930028          LDREQ    r0,[r3,#0x28]
;;;257               *(PVOID volatile *)0x28 = pvNewHandler;
000160  05831028          STREQ    r1,[r3,#0x28]
;;;258               break;
;;;259    
;;;260          case SYS_D_ABORT:
;;;261               _mOldVect = *(PVOID volatile *)0x30;
;;;262               *(PVOID volatile *)0x30 = pvNewHandler;
;;;263               break;
;;;264    
;;;265          case SYS_I_ABORT:
;;;266               _mOldVect = *(PVOID volatile *)0x2C;
;;;267               *(PVOID volatile *)0x2C = pvNewHandler;
;;;268               break;
;;;269    
;;;270          case SYS_UNDEFINE:
;;;271               _mOldVect = *(PVOID volatile *)0x24;
;;;272               *(PVOID volatile *)0x24 = pvNewHandler;
;;;273               break;
;;;274    
;;;275          default:
;;;276               ;
;;;277       }
;;;278       return _mOldVect;
;;;279    }
000164  012fff1e          BXEQ     lr
000168  e3520001          CMP      r2,#1                 ;253
00016c  05930030          LDREQ    r0,[r3,#0x30]         ;261
000170  05831030          STREQ    r1,[r3,#0x30]         ;262
000174  012fff1e          BXEQ     lr
000178  e3520002          CMP      r2,#2                 ;253
00017c  0593002c          LDREQ    r0,[r3,#0x2c]         ;266
000180  0583102c          STREQ    r1,[r3,#0x2c]         ;267
000184  012fff1e          BXEQ     lr
000188  e3520003          CMP      r2,#3                 ;253
00018c  05930024          LDREQ    r0,[r3,#0x24]         ;271
000190  05831024          STREQ    r1,[r3,#0x24]         ;272
000194  e12fff1e          BX       lr
;;;280    
                          ENDP

                  sysInstallFiqHandler PROC
;;;287     */
;;;288    PVOID sysInstallFiqHandler(PVOID pvNewISR)
000198  e1a01000          MOV      r1,r0
;;;289    {
;;;290        PVOID _mOldVect;
;;;291    
;;;292        _mOldVect = *(PVOID volatile *)0x3C;
00019c  e3a02000          MOV      r2,#0
0001a0  e592003c          LDR      r0,[r2,#0x3c]
;;;293        *(PVOID volatile *)0x3C = pvNewISR;
0001a4  e582103c          STR      r1,[r2,#0x3c]
;;;294        return _mOldVect;
;;;295    }
0001a8  e12fff1e          BX       lr
;;;296    
                          ENDP

                  sysInstallIrqHandler PROC
;;;303     */
;;;304    PVOID sysInstallIrqHandler(PVOID pvNewISR)
0001ac  e1a01000          MOV      r1,r0
;;;305    {
;;;306        PVOID _mOldVect;
;;;307    
;;;308        _mOldVect = *(PVOID volatile *)0x38;
0001b0  e3a02000          MOV      r2,#0
0001b4  e5920038          LDR      r0,[r2,#0x38]
;;;309        *(PVOID volatile *)0x38 = pvNewISR;
0001b8  e5821038          STR      r1,[r2,#0x38]
;;;310        return _mOldVect;
;;;311    }
0001bc  e12fff1e          BX       lr
;;;312    
                          ENDP

                  sysInstallISR PROC
;;;323     */
;;;324    PVOID sysInstallISR(INT32 nIntTypeLevel, IRQn_Type eIntNo, PVOID pvNewISR)
0001c0  e92d4030          PUSH     {r4,r5,lr}
;;;325    {
;;;326        PVOID   _mOldVect;
;;;327        UINT32  _mRegAddr/*, _mRegValue*/;
;;;328        INT     shift;
;;;329    
;;;330        if (!_sys_bIsAICInitial)
0001c4  e59fc0f0          LDR      r12,|L1.700|
0001c8  e1a04000          MOV      r4,r0                 ;325
0001cc  e5dc0000          LDRB     r0,[r12,#0]  ; _sys_bIsAICInitial
0001d0  e1a03001          MOV      r3,r1                 ;325
0001d4  e3500000          CMP      r0,#0
0001d8  1a000002          BNE      |L1.488|
;;;331        {
;;;332            sysInitializeAIC();
0001dc  ebfffffe          BL       sysInitializeAIC
;;;333            _sys_bIsAICInitial = TRUE;
0001e0  e3a00001          MOV      r0,#1
0001e4  e5cc0000          STRB     r0,[r12,#0]  ; _sys_bIsAICInitial
                  |L1.488|
;;;334        }
;;;335    
;;;336        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
0001e8  e59f10a8          LDR      r1,|L1.664|
0001ec  e3c30003          BIC      r0,r3,#3
0001f0  e080c001          ADD      r12,r0,r1
;;;337        shift = (eIntNo % 4) * 8;
0001f4  e1a00f03          LSL      r0,r3,#30
0001f8  e1a01da0          LSR      r1,r0,#27
;;;338        nIntTypeLevel &= 0xff;
0001fc  e20400ff          AND      r0,r4,#0xff
;;;339        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (nIntTypeLevel << shift));
000200  e59c4000          LDR      r4,[r12,#0]
000204  e3a05007          MOV      r5,#7
000208  e1c44115          BIC      r4,r4,r5,LSL r1
00020c  e1841110          ORR      r1,r4,r0,LSL r1
000210  e58c1000          STR      r1,[r12,#0]
;;;340    
;;;341        if ((nIntTypeLevel & 0x7) == FIQ_LEVEL_0)
000214  e3100007          TST      r0,#7
;;;342        {
;;;343            _mOldVect = (PVOID) sysFiqHandlerTable[eIntNo];
000218  059f1080          LDREQ    r1,|L1.672|
;;;344            sysFiqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
;;;345        }
;;;346        else
;;;347        {
;;;348           _mOldVect = (PVOID) sysIrqHandlerTable[eIntNo];
00021c  159f1078          LDRNE    r1,|L1.668|
000220  e7910103          LDR      r0,[r1,r3,LSL #2]     ;343
000224  e7812103          STR      r2,[r1,r3,LSL #2]     ;344
;;;349           sysIrqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
;;;350        }
;;;351        return _mOldVect;
;;;352    }
000228  e8bd8030          POP      {r4,r5,pc}
;;;353    
                          ENDP

                  sysSetGlobalInterrupt PROC
;;;354    
;;;355    INT32 sysSetGlobalInterrupt(INT32 nIntState)
00022c  e59f2064          LDR      r2,|L1.664|
;;;356    {
;;;357       switch (nIntState)
000230  e3500000          CMP      r0,#0
;;;358       {
;;;359          case ENABLE_ALL_INTERRUPTS:
;;;360               outpw(REG_AIC_MECR, 0xFFFFFFFF);
000234  e3e01000          MVN      r1,#0
000238  05821130          STREQ    r1,[r2,#0x130]
;;;361               outpw(REG_AIC_MECRH, 0xFFFFFFFF);
00023c  05821134          STREQ    r1,[r2,#0x134]
000240  0a000002          BEQ      |L1.592|
000244  e3500001          CMP      r0,#1                 ;357
;;;362               break;
;;;363    
;;;364          case DISABLE_ALL_INTERRUPTS:
;;;365               outpw(REG_AIC_MDCR, 0xFFFFFFFF);
000248  05821138          STREQ    r1,[r2,#0x138]
;;;366               outpw(REG_AIC_MDCRH, 0xFFFFFFFF);
00024c  0582113c          STREQ    r1,[r2,#0x13c]
                  |L1.592|
;;;367               break;
;;;368    
;;;369          default:
;;;370               ;
;;;371       }
;;;372       return 0;
000250  e3a00000          MOV      r0,#0
;;;373    }
000254  e12fff1e          BX       lr
;;;374    
                          ENDP

                  sysSetInterruptPriorityLevel PROC
;;;384     */
;;;385    INT32 sysSetInterruptPriorityLevel(IRQn_Type eIntNo, UINT32 uIntLevel)
000258  e2402001          SUB      r2,r0,#1
;;;386    {
;;;387        UINT32  _mRegAddr;
;;;388        INT     shift;
;;;389    
;;;390       if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
00025c  e352003e          CMP      r2,#0x3e
;;;391          return 1;
000260  23a00001          MOVCS    r0,#1
;;;392    
;;;393        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;394        shift = (eIntNo % 4) * 8;
;;;395        uIntLevel &= 0x7;
;;;396        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (uIntLevel << shift));
;;;397    
;;;398        return 0;
;;;399    }
000264  212fff1e          BXCS     lr
000268  e3c02003          BIC      r2,r0,#3              ;393
00026c  e1a00f00          LSL      r0,r0,#30             ;394
000270  e1a00da0          LSR      r0,r0,#27             ;394
000274  e59f301c          LDR      r3,|L1.664|
000278  e2011007          AND      r1,r1,#7              ;395
00027c  e7b23003          LDR      r3,[r2,r3]!           ;396
000280  e3a0c007          MOV      r12,#7                ;396
000284  e1c3301c          BIC      r3,r3,r12,LSL r0      ;396
000288  e1830011          ORR      r0,r3,r1,LSL r0       ;396
00028c  e5820000          STR      r0,[r2,#0]            ;396
000290  e3a00000          MOV      r0,#0                 ;398
000294  e12fff1e          BX       lr
                  |L1.664|
                          DCD      0xb8002000
                  |L1.668|
                          DCD      ||.data||+0x4
                  |L1.672|
                          DCD      ||.data||+0xfc
                  |L1.676|
0002a4  49535220          DCB      "ISR not found! ISNR=%d\n",0
0002a8  6e6f7420
0002ac  666f756e
0002b0  64212049
0002b4  534e523d
0002b8  25640a00
                  |L1.700|
                          DCD      ||.data||
                          ENDP

                  sysSetInterruptType PROC
;;;401    
;;;402    INT32 sysSetInterruptType(IRQn_Type eIntNo, UINT32 uIntSourceType)
0002c0  e2402001          SUB      r2,r0,#1
;;;403    {
;;;404        UINT32 _mRegAddr;
;;;405        INT     shift;
;;;406    
;;;407        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
0002c4  e352003e          CMP      r2,#0x3e
;;;408            return 1;
0002c8  23a00001          MOVCS    r0,#1
;;;409    
;;;410        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;411        shift = (eIntNo % 4) * 8;
;;;412        uIntSourceType &= 0xC0;
;;;413        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0xC0 << shift)) | (uIntSourceType << shift));
;;;414    
;;;415        return 0;
;;;416    }
0002cc  212fff1e          BXCS     lr
0002d0  e3c02003          BIC      r2,r0,#3              ;410
0002d4  e1a00f00          LSL      r0,r0,#30             ;411
0002d8  e1a00da0          LSR      r0,r0,#27             ;411
0002dc  e51f304c          LDR      r3,|L1.664|
0002e0  e20110c0          AND      r1,r1,#0xc0           ;412
0002e4  e7b23003          LDR      r3,[r2,r3]!           ;413
0002e8  e3a0c0c0          MOV      r12,#0xc0             ;413
0002ec  e1c3301c          BIC      r3,r3,r12,LSL r0      ;413
0002f0  e1830011          ORR      r0,r3,r1,LSL r0       ;413
0002f4  e5820000          STR      r0,[r2,#0]            ;413
0002f8  e3a00000          MOV      r0,#0                 ;415
0002fc  e12fff1e          BX       lr
;;;417    
                          ENDP

                  sysSetLocalInterrupt PROC
;;;426     */
;;;427    INT32 sysSetLocalInterrupt(INT32 nIntState)
000300  e3500080          CMP      r0,#0x80
;;;428    {
;;;429       INT32 temp;
;;;430    
;;;431       switch (nIntState)
000304  0a000010          BEQ      |L1.844|
000308  ca000006          BGT      |L1.808|
00030c  e350003f          CMP      r0,#0x3f
000310  0a000009          BEQ      |L1.828|
000314  e3500040          CMP      r0,#0x40
000318  0a00000b          BEQ      |L1.844|
00031c  e350007f          CMP      r0,#0x7f
000320  0a000005          BEQ      |L1.828|
000324  ea00000b          B        |L1.856|
                  |L1.808|
000328  e35000bf          CMP      r0,#0xbf
00032c  0a000002          BEQ      |L1.828|
000330  e35000c0          CMP      r0,#0xc0
000334  0a000004          BEQ      |L1.844|
000338  ea000006          B        |L1.856|
                  |L1.828|
;;;432       {
;;;433          case ENABLE_IRQ:
;;;434          case ENABLE_FIQ:
;;;435          case ENABLE_FIQ_IRQ:
;;;436               __asm
;;;437               {
;;;438                   MRS    temp, CPSR
00033c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;439                   AND    temp, temp, nIntState
000340  e0010000          AND      r0,r1,r0
;;;440                   MSR    CPSR_c, temp
000344  e121f000          MSR      CPSR_c,r0
;;;441               }
;;;442               break;
000348  ea000002          B        |L1.856|
                  |L1.844|
;;;443    
;;;444          case DISABLE_IRQ:
;;;445          case DISABLE_FIQ:
;;;446          case DISABLE_FIQ_IRQ:
;;;447               __asm
;;;448               {
;;;449                   MRS    temp, CPSR
00034c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;450                   ORR    temp, temp, nIntState
000350  e1810000          ORR      r0,r1,r0
;;;451                   MSR    CPSR_c, temp
000354  e121f000          MSR      CPSR_c,r0
                  |L1.856|
;;;452               }
;;;453               break;
;;;454    
;;;455          default:
;;;456               ;
;;;457       }
;;;458       return 0;
000358  e3a00000          MOV      r0,#0
;;;459    }
00035c  e12fff1e          BX       lr
;;;460    
                          ENDP

                  sysGetInterruptEnableStatus PROC
;;;461    UINT32  sysGetInterruptEnableStatus(void)
000360  e51f00d0          LDR      r0,|L1.664|
;;;462    {
;;;463        return (inpw(REG_AIC_IMR));
000364  e5900128          LDR      r0,[r0,#0x128]
;;;464    }
000368  e12fff1e          BX       lr
;;;465    
                          ENDP

                  sysGetInterruptEnableStatusH PROC
;;;466    
;;;467    UINT32  sysGetInterruptEnableStatusH(void)
00036c  e51f00dc          LDR      r0,|L1.664|
;;;468    {
;;;469        return (inpw(REG_AIC_IMRH));
000370  e590012c          LDR      r0,[r0,#0x12c]
;;;470    }
000374  e12fff1e          BX       lr
;;;471    
                          ENDP

                  sysGetIBitState PROC
;;;472    /// @cond HIDDEN_SYMBOLS
;;;473    BOOL sysGetIBitState()
000378  e10f0000          MRS      r0,APSR ; formerly CPSR
;;;474    {
;;;475        INT32 temp;
;;;476    
;;;477        __asm
;;;478        {
;;;479            MRS temp, CPSR
;;;480        }
;;;481    
;;;482        if (temp & 0x80)
00037c  e3100080          TST      r0,#0x80
;;;483            return FALSE;
000380  13a00000          MOVNE    r0,#0
;;;484        else
;;;485            return TRUE;
000384  03a00001          MOVEQ    r0,#1
;;;486    }
000388  e12fff1e          BX       lr
;;;487    
                          ENDP

                  sysGetPLL PROC
;;;488    INT32 sysGetPLL(UINT32 reg)
00038c  e92d4010          PUSH     {r4,lr}
;;;489    {
;;;490        UINT32 N,M,P;
;;;491    
;;;492        N =((inpw(reg) & 0x007F)>>0)+1;
000390  e5901000          LDR      r1,[r0,#0]
000394  e201107f          AND      r1,r1,#0x7f
000398  e2812001          ADD      r2,r1,#1
;;;493        M =((inpw(reg) & 0x1F80)>>7)+1;
00039c  e5901000          LDR      r1,[r0,#0]
;;;494        P =((inpw(reg) & 0xE000)>>13)+1;
0003a0  e5900000          LDR      r0,[r0,#0]
0003a4  e2011d7e          AND      r1,r1,#0x1f80         ;493
0003a8  e3a03001          MOV      r3,#1                 ;493
0003ac  e08313a1          ADD      r1,r3,r1,LSR #7       ;493
0003b0  e2000a0e          AND      r0,r0,#0xe000
0003b4  e08306a0          ADD      r0,r3,r0,LSR #13
;;;495    
;;;496        return (12*N/(M*P));    /* 12MHz HXT */
0003b8  e1610081          SMULBB   r1,r1,r0
0003bc  e0820082          ADD      r0,r2,r2,LSL #1
0003c0  e1a00100          LSL      r0,r0,#2
0003c4  ebfffffe          BL       __aeabi_uidivmod
;;;497    }
0003c8  e8bd8010          POP      {r4,pc}
;;;498    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  sysGetClock PROC
;;;506     */
;;;507    UINT32 sysGetClock(CLK_Type clk)
0003cc  e92d4070          PUSH     {r4-r6,lr}
;;;508    {
0003d0  e1a03000          MOV      r3,r0
;;;509        UINT32 src, divS, divN, reg, div;
;;;510    
;;;511        switch(clk)
;;;512        {
;;;513            case SYS_UPLL:
;;;514                return sysGetPLL(REG_CLK_UPLLCON);
0003d4  e59f01a8          LDR      r0,|L1.1412|
0003d8  e3530008          CMP      r3,#8                 ;511
0003dc  e3a05001          MOV      r5,#1                 ;508
;;;515    
;;;516            case SYS_APLL:
;;;517                return sysGetPLL(REG_CLK_APLLCON);
0003e0  e2402004          SUB      r2,r0,#4
;;;518    
;;;519            case SYS_SYSTEM:
;;;520            {
;;;521                reg = inpw(REG_CLK_DIVCTL0);
0003e4  e3a0120b          MOV      r1,#0xb0000000
0003e8  308ff103          ADDCC    pc,pc,r3,LSL #2       ;511
0003ec  ea000013          B        |L1.1088|
0003f0  ea000012          B        |L1.1088|
0003f4  ea000005          B        |L1.1040|
0003f8  ea000006          B        |L1.1048|
0003fc  ea000007          B        |L1.1056|
000400  ea000016          B        |L1.1120|
000404  ea000027          B        |L1.1192|
000408  ea000034          B        |L1.1248|
00040c  ea000047          B        |L1.1328|
                  |L1.1040|
000410  e8bd4070          POP      {r4-r6,lr}            ;514
000414  eafffffe          B        sysGetPLL
                  |L1.1048|
000418  e1a00002          MOV      r0,r2                 ;517
00041c  eafffffb          B        |L1.1040|
                  |L1.1056|
000420  e5914220          LDR      r4,[r1,#0x220]
;;;522                switch (reg & 0x18)
000424  e2141018          ANDS     r1,r4,#0x18
;;;523                {
;;;524                    case 0x0:
;;;525                        src = 12;   /* HXT */
000428  03a0000c          MOVEQ    r0,#0xc
00042c  0a000006          BEQ      |L1.1100|
000430  e3510010          CMP      r1,#0x10              ;522
;;;526                        break;
;;;527                    case 0x10:
;;;528                        src = sysGetPLL(REG_CLK_APLLCON);
000434  01a00002          MOVEQ    r0,r2
000438  13510018          CMPNE    r1,#0x18              ;522
00043c  0a000001          BEQ      |L1.1096|
                  |L1.1088|
;;;529                        break;
;;;530                    case 0x18:
;;;531                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;532                        break;
;;;533                    default:
;;;534                        return 0;
;;;535                }
;;;536                divS = (reg & 0x7) + 1;
;;;537                divN = ((reg & 0xf00) >> 8) + 1;
;;;538                return (src / divS / divN);
;;;539            }
;;;540    
;;;541            case SYS_HCLK1:
;;;542            {
;;;543                reg = inpw(REG_CLK_DIVCTL0);
;;;544                switch (reg & 0x18)
;;;545                {
;;;546                    case 0x0:
;;;547                        src = 12;   /* HXT */
;;;548                        break;
;;;549                    case 0x10:
;;;550                        src = sysGetPLL(REG_CLK_APLLCON);
;;;551                        break;
;;;552                    case 0x18:
;;;553                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;554                        break;
;;;555                    default:
;;;556                        return 0;
;;;557                }
;;;558                divS = (reg & 0x7) + 1;
;;;559                divN = ((reg & 0xf00) >> 8) + 1;
;;;560                return (src / divS / divN / 2);
;;;561            }
;;;562    
;;;563            case SYS_HCLK234:
;;;564            {
;;;565                reg = inpw(REG_CLK_DIVCTL0);
;;;566                switch (reg & 0x18)
;;;567                {
;;;568                    case 0x0:
;;;569                        src = 12;   /* HXT */
;;;570                        break;
;;;571                    case 0x10:
;;;572                        src = sysGetPLL(REG_CLK_APLLCON);
;;;573                        break;
;;;574                    case 0x18:
;;;575                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;576                        break;
;;;577                    default:
;;;578                        return 0;
;;;579                }
;;;580                divS = (reg & 0x7) + 1;
;;;581                divN = ((reg & 0xf00) >> 8) + 1;
;;;582                div = ((reg & 0xf00000) >> 20) + 1;
;;;583                return (src / divS / divN / 2 / div);
;;;584            }
;;;585    
;;;586            case SYS_PCLK:
;;;587            {
;;;588                reg = inpw(REG_CLK_DIVCTL0);
;;;589                switch (reg & 0x18)
;;;590                {
;;;591                    case 0x0:
;;;592                        src = 12;   /* HXT */
;;;593                        break;
;;;594                    case 0x10:
;;;595                        src = sysGetPLL(REG_CLK_APLLCON);
;;;596                        break;
;;;597                    case 0x18:
;;;598                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;599                        break;
;;;600                    default:
;;;601                        return 0;
;;;602                }
;;;603                divS = (reg & 0x7) + 1;
;;;604                divN = ((reg & 0xf00) >> 8) + 1;
;;;605                div = ((reg & 0xf000000) >> 24) + 1;
;;;606                return (src / divS / divN / 2 / div);
;;;607            }
;;;608            case SYS_CPU:
;;;609            {
;;;610                reg = inpw(REG_CLK_DIVCTL0);
;;;611                switch (reg & 0x18)
;;;612                {
;;;613                    case 0x0:
;;;614                        src = 12;   /* HXT */
;;;615                        break;
;;;616                    case 0x10:
;;;617                        src = sysGetPLL(REG_CLK_APLLCON);
;;;618                        break;
;;;619                    case 0x18:
;;;620                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;621                        break;
;;;622                    default:
;;;623                        return 0;
;;;624                }
;;;625                divS = (reg & 0x7) + 1;
;;;626                divN = ((reg & 0xf00) >> 8) + 1;
;;;627                div = ((reg & 0xf0000) >> 16) + 1;
;;;628                return (src / divS / divN / div);
;;;629            }
;;;630    
;;;631            default:
;;;632                ;
;;;633        }
;;;634        return 0;
000440  e3a00000          MOV      r0,#0
;;;635    }
000444  e8bd8070          POP      {r4-r6,pc}
                  |L1.1096|
000448  ebfffffe          BL       sysGetPLL
                  |L1.1100|
00044c  e2041007          AND      r1,r4,#7              ;536
000450  e1a02a04          LSL      r2,r4,#20             ;537
000454  e0854e22          ADD      r4,r5,r2,LSR #28      ;537
000458  e2811001          ADD      r1,r1,#1              ;537
00045c  ea000044          B        |L1.1396|
                  |L1.1120|
000460  e5914220          LDR      r4,[r1,#0x220]        ;543
000464  e2141018          ANDS     r1,r4,#0x18           ;544
000468  03a0000c          MOVEQ    r0,#0xc               ;547
00046c  0a000004          BEQ      |L1.1156|
000470  e3510010          CMP      r1,#0x10              ;544
000474  01a00002          MOVEQ    r0,r2                 ;550
000478  13510018          CMPNE    r1,#0x18              ;544
00047c  1affffef          BNE      |L1.1088|
000480  ebfffffe          BL       sysGetPLL
                  |L1.1156|
000484  e2041007          AND      r1,r4,#7              ;558
000488  e1a02a04          LSL      r2,r4,#20             ;559
00048c  e0854e22          ADD      r4,r5,r2,LSR #28      ;559
000490  e2811001          ADD      r1,r1,#1              ;559
000494  ebfffffe          BL       __aeabi_uidivmod
000498  e1a01004          MOV      r1,r4                 ;560
00049c  ebfffffe          BL       __aeabi_uidivmod
0004a0  e1a000a0          LSR      r0,r0,#1              ;560
0004a4  e8bd8070          POP      {r4-r6,pc}
                  |L1.1192|
0004a8  e5914220          LDR      r4,[r1,#0x220]        ;565
0004ac  e2141018          ANDS     r1,r4,#0x18           ;566
0004b0  03a0000c          MOVEQ    r0,#0xc               ;569
0004b4  0a000004          BEQ      |L1.1228|
0004b8  e3510010          CMP      r1,#0x10              ;566
0004bc  01a00002          MOVEQ    r0,r2                 ;572
0004c0  13510018          CMPNE    r1,#0x18              ;566
0004c4  1affffdd          BNE      |L1.1088|
0004c8  ebfffffe          BL       sysGetPLL
                  |L1.1228|
0004cc  e1a02a04          LSL      r2,r4,#20             ;581
0004d0  e0856e22          ADD      r6,r5,r2,LSR #28      ;581
0004d4  e2041007          AND      r1,r4,#7              ;580
0004d8  e1a02404          LSL      r2,r4,#8              ;582
0004dc  ea00000c          B        |L1.1300|
                  |L1.1248|
0004e0  e5914220          LDR      r4,[r1,#0x220]        ;588
0004e4  e2141018          ANDS     r1,r4,#0x18           ;589
0004e8  03a0000c          MOVEQ    r0,#0xc               ;592
0004ec  0a000004          BEQ      |L1.1284|
0004f0  e3510010          CMP      r1,#0x10              ;589
0004f4  01a00002          MOVEQ    r0,r2                 ;595
0004f8  13510018          CMPNE    r1,#0x18              ;589
0004fc  1affffcf          BNE      |L1.1088|
000500  ebfffffe          BL       sysGetPLL
                  |L1.1284|
000504  e1a02a04          LSL      r2,r4,#20             ;604
000508  e0856e22          ADD      r6,r5,r2,LSR #28      ;604
00050c  e2041007          AND      r1,r4,#7              ;603
000510  e1a02204          LSL      r2,r4,#4              ;605
                  |L1.1300|
000514  e0854e22          ADD      r4,r5,r2,LSR #28      ;582
000518  e2811001          ADD      r1,r1,#1              ;582
00051c  ebfffffe          BL       __aeabi_uidivmod
000520  e1a01006          MOV      r1,r6                 ;583
000524  ebfffffe          BL       __aeabi_uidivmod
000528  e1a000a0          LSR      r0,r0,#1              ;583
00052c  ea000011          B        |L1.1400|
                  |L1.1328|
000530  e5914220          LDR      r4,[r1,#0x220]        ;610
000534  e2141018          ANDS     r1,r4,#0x18           ;611
000538  03a0000c          MOVEQ    r0,#0xc               ;614
00053c  0a000004          BEQ      |L1.1364|
000540  e3510010          CMP      r1,#0x10              ;611
000544  01a00002          MOVEQ    r0,r2                 ;617
000548  13510018          CMPNE    r1,#0x18              ;611
00054c  1affffbb          BNE      |L1.1088|
000550  ebfffffe          BL       sysGetPLL
                  |L1.1364|
000554  e1a02a04          LSL      r2,r4,#20             ;626
000558  e2041007          AND      r1,r4,#7              ;625
00055c  e0856e22          ADD      r6,r5,r2,LSR #28      ;626
000560  e1a02604          LSL      r2,r4,#12             ;627
000564  e0854e22          ADD      r4,r5,r2,LSR #28      ;627
000568  e2811001          ADD      r1,r1,#1              ;627
00056c  ebfffffe          BL       __aeabi_uidivmod
000570  e1a01006          MOV      r1,r6                 ;628
                  |L1.1396|
000574  ebfffffe          BL       __aeabi_uidivmod
                  |L1.1400|
000578  e1a01004          MOV      r1,r4                 ;628
00057c  ebfffffe          BL       __aeabi_uidivmod
000580  e8bd8070          POP      {r4-r6,pc}
;;;636    
                          ENDP

                  |L1.1412|
                          DCD      0xb0000264

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsAICInitial
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  sysIrqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                  sysFiqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
