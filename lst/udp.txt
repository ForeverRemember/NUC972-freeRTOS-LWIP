; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\udp.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\udp.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\udp.crf lwip-1.4.1\src\core\udp.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  udp_init PROC
;;;85     void
;;;86     udp_init(void)
000000  e12fff1e          BX       lr
;;;87     {
;;;88     #if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
;;;89       udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
;;;90     #endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
;;;91     }
;;;92     
                          ENDP

                  udp_input PROC
;;;150    void
;;;151    udp_input(struct pbuf *p, struct netif *inp)
000004  e92d4ff8          PUSH     {r3-r11,lr}
;;;152    {
;;;153      struct udp_hdr *udphdr;
;;;154      struct udp_pcb *pcb, *prev;
;;;155      struct udp_pcb *uncon_pcb;
;;;156      struct ip_hdr *iphdr;
;;;157      u16_t src, dest;
;;;158      u8_t local_match;
;;;159      u8_t broadcast;
;;;160    
;;;161      PERF_START;
;;;162    
;;;163      UDP_STATS_INC(udp.recv);
;;;164    
;;;165      iphdr = (struct ip_hdr *)p->payload;
000008  e5908004          LDR      r8,[r0,#4]
;;;166    
;;;167      /* Check minimum length (IP header + UDP header)
;;;168       * and move payload pointer to UDP header */
;;;169      if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
00000c  e1d020b8          LDRH     r2,[r0,#8]
000010  e1a05000          MOV      r5,r0                 ;152
000014  e5d80000          LDRB     r0,[r8,#0]
000018  e1a0a001          MOV      r10,r1                ;152
00001c  e3a01008          MOV      r1,#8
000020  e200000f          AND      r0,r0,#0xf
000024  e0811100          ADD      r1,r1,r0,LSL #2
000028  e1520001          CMP      r2,r1
00002c  3a0000a4          BCC      |L1.708|
000030  e1a00100          LSL      r0,r0,#2
000034  e2601000          RSB      r1,r0,#0
000038  e1a00005          MOV      r0,r5
00003c  ebfffffe          BL       pbuf_header
000040  e3500000          CMP      r0,#0
000044  1a00009e          BNE      |L1.708|
;;;170        /* drop short packets */
;;;171        LWIP_DEBUGF(UDP_DEBUG,
;;;172                    ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
;;;173        UDP_STATS_INC(udp.lenerr);
;;;174        UDP_STATS_INC(udp.drop);
;;;175        snmp_inc_udpinerrors();
;;;176        pbuf_free(p);
;;;177        goto end;
;;;178      }
;;;179    
;;;180      udphdr = (struct udp_hdr *)p->payload;
;;;181    
;;;182      /* is broadcast packet ? */
;;;183      broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
000048  e59fb3b0          LDR      r11,|L1.1024|
00004c  e5959004          LDR      r9,[r5,#4]
000050  e59b0000          LDR      r0,[r11,#0]  ; current_iphdr_dest
000054  e1a0100a          MOV      r1,r10
000058  ebfffffe          BL       ip4_addr_isbroadcast
00005c  e1a06000          MOV      r6,r0
;;;184    
;;;185      LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
;;;186    
;;;187      /* convert src and dest ports to host byte order */
;;;188      src = ntohs(udphdr->src);
000060  e5d90001          LDRB     r0,[r9,#1]
000064  e5d91000          LDRB     r1,[r9,#0]
000068  e1810400          ORR      r0,r1,r0,LSL #8
00006c  ebfffffe          BL       lwip_ntohs
000070  e1a07000          MOV      r7,r0
;;;189      dest = ntohs(udphdr->dest);
000074  e5d90003          LDRB     r0,[r9,#3]
000078  e5d91002          LDRB     r1,[r9,#2]
00007c  e1810400          ORR      r0,r1,r0,LSL #8
000080  ebfffffe          BL       lwip_ntohs
;;;190    
;;;191      udp_debug_print(udphdr);
;;;192    
;;;193      /* print the UDP source and destination */
;;;194      LWIP_DEBUGF(UDP_DEBUG,
;;;195                  ("udp (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "
;;;196                   "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;197                   ip4_addr1_16(&iphdr->dest), ip4_addr2_16(&iphdr->dest),
;;;198                   ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
;;;199                   ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
;;;200                   ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));
;;;201    
;;;202    #if LWIP_DHCP
;;;203      pcb = NULL;
;;;204      /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
;;;205         the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
;;;206      if (dest == DHCP_CLIENT_PORT) {
000084  e3500044          CMP      r0,#0x44
000088  e1a03000          MOV      r3,r0                 ;189
00008c  e3a04000          MOV      r4,#0                 ;203
000090  0a000005          BEQ      |L1.172|
;;;207        /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
;;;208        if (src == DHCP_SERVER_PORT) {
;;;209          if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
;;;210            /* accept the packe if 
;;;211               (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
;;;212               - inp->dhcp->pcb->remote == ANY or iphdr->src */
;;;213            if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
;;;214               ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
;;;215              pcb = inp->dhcp->pcb;
;;;216            }
;;;217          }
;;;218        }
;;;219      } else
;;;220    #endif /* LWIP_DHCP */
;;;221      {
;;;222        prev = NULL;
;;;223        local_match = 0;
;;;224        uncon_pcb = NULL;
;;;225        /* Iterate through the UDP pcb list for a matching pcb.
;;;226         * 'Perfect match' pcbs (connected to the remote port & ip address) are
;;;227         * preferred. If no perfect match is found, the first unconnected pcb that
;;;228         * matches the local port and ip address gets the datagram. */
;;;229        for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
000094  e59f1368          LDR      r1,|L1.1028|
000098  e3a02000          MOV      r2,#0                 ;222
00009c  e5914004          LDR      r4,[r1,#4]  ; udp_pcbs
0000a0  e1a00002          MOV      r0,r2                 ;224
0000a4  e58d4000          STR      r4,[sp,#0]
0000a8  ea000042          B        |L1.440|
                  |L1.172|
0000ac  e3570043          CMP      r7,#0x43              ;208
0000b0  1a000044          BNE      |L1.456|
0000b4  e59a0020          LDR      r0,[r10,#0x20]        ;209
0000b8  e3500000          CMP      r0,#0                 ;209
0000bc  15900004          LDRNE    r0,[r0,#4]            ;209
0000c0  13500000          CMPNE    r0,#0                 ;209
0000c4  0a00003f          BEQ      |L1.456|
0000c8  e3700004          CMN      r0,#4                 ;213
0000cc  15901004          LDRNE    r1,[r0,#4]            ;213
0000d0  13510000          CMPNE    r1,#0                 ;213
0000d4  159f232c          LDRNE    r2,|L1.1032|
0000d8  15922000          LDRNE    r2,[r2,#0]            ;214  ; current_iphdr_src
0000dc  11510002          CMPNE    r1,r2                 ;214
0000e0  01a04000          MOVEQ    r4,r0                 ;215
0000e4  0a00003b          BEQ      |L1.472|
0000e8  ea000036          B        |L1.456|
                  |L1.236|
;;;230          local_match = 0;
;;;231          /* print the PCB local and remote address */
;;;232          LWIP_DEBUGF(UDP_DEBUG,
;;;233                      ("pcb (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "
;;;234                       "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;235                       ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;236                       ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
;;;237                       ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
;;;238                       ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));
;;;239    
;;;240          /* compare PCB local addr+port to UDP destination addr+port */
;;;241          if (pcb->local_port == dest) {
0000ec  e1d411b2          LDRH     r1,[r4,#0x12]
0000f0  e1510003          CMP      r1,r3
0000f4  1a00002d          BNE      |L1.432|
;;;242            if (
0000f8  e3560000          CMP      r6,#0
0000fc  0a000026          BEQ      |L1.412|
                  |L1.256|
;;;243               (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
;;;244               ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
000100  e594e000          LDR      lr,[r4,#0]
000104  e59bc000          LDR      r12,[r11,#0]  ; current_iphdr_dest
000108  e15e000c          CMP      lr,r12
00010c  0a000009          BEQ      |L1.312|
;;;245    #if LWIP_IGMP
;;;246               ip_addr_ismulticast(&current_iphdr_dest) ||
;;;247    #endif /* LWIP_IGMP */
;;;248    #if IP_SOF_BROADCAST_RECV
;;;249                (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
;;;250                 (ip_addr_isany(&pcb->local_ip) ||
;;;251                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
;;;252    #else /* IP_SOF_BROADCAST_RECV */
;;;253                (broadcast &&
000110  e3560000          CMP      r6,#0
000114  0a000025          BEQ      |L1.432|
;;;254                 (ip_addr_isany(&pcb->local_ip) ||
000118  e3540000          CMP      r4,#0
00011c  135e0000          CMPNE    lr,#0
000120  0a000004          BEQ      |L1.312|
;;;255                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
000124  e59a1008          LDR      r1,[r10,#8]
000128  e00ee001          AND      lr,lr,r1
00012c  e001100c          AND      r1,r1,r12
000130  e15e0001          CMP      lr,r1
000134  1a00001d          BNE      |L1.432|
                  |L1.312|
;;;256    #endif /* IP_SOF_BROADCAST_RECV */ 
;;;257              local_match = 1;
;;;258              if ((uncon_pcb == NULL) && 
000138  e3500000          CMP      r0,#0
;;;259                  ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
00013c  05d41010          LDRBEQ   r1,[r4,#0x10]
000140  03110004          TSTEQ    r1,#4
;;;260                /* the first unconnected matching PCB */
;;;261                uncon_pcb = pcb;
;;;262              }
;;;263            }
;;;264          }
;;;265          /* compare PCB remote addr+port to UDP source addr+port */
;;;266          if ((local_match != 0) &&
;;;267              (pcb->remote_port == src) &&
000144  e1d411b4          LDRH     r1,[r4,#0x14]
000148  01a00004          MOVEQ    r0,r4                 ;261
00014c  e1510007          CMP      r1,r7
000150  1a000016          BNE      |L1.432|
;;;268              (ip_addr_isany(&pcb->remote_ip) ||
000154  e3740004          CMN      r4,#4
000158  15941004          LDRNE    r1,[r4,#4]
00015c  13510000          CMPNE    r1,#0
;;;269               ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
000160  159fc2a0          LDRNE    r12,|L1.1032|
000164  159cc000          LDRNE    r12,[r12,#0]  ; current_iphdr_src
000168  1151000c          CMPNE    r1,r12
00016c  1a00000f          BNE      |L1.432|
;;;270            /* the first fully matching PCB */
;;;271            if (prev != NULL) {
000170  e3520000          CMP      r2,#0
000174  0a000005          BEQ      |L1.400|
;;;272              /* move the pcb to the front of udp_pcbs so that is
;;;273                 found faster next time */
;;;274              prev->next = pcb->next;
000178  e594100c          LDR      r1,[r4,#0xc]
00017c  e582100c          STR      r1,[r2,#0xc]
;;;275              pcb->next = udp_pcbs;
000180  e59d2000          LDR      r2,[sp,#0]
000184  e59f1278          LDR      r1,|L1.1028|
;;;276              udp_pcbs = pcb;
000188  e584200c          STR      r2,[r4,#0xc]
00018c  e5814004          STR      r4,[r1,#4]  ; udp_pcbs
                  |L1.400|
;;;277            } else {
;;;278              UDP_STATS_INC(udp.cachehit);
;;;279            }
;;;280            break;
;;;281          }
;;;282          prev = pcb;
;;;283        }
;;;284        /* no fully matching pcb found? then look for an unconnected pcb */
;;;285        if (pcb == NULL) {
000190  e3540000          CMP      r4,#0
000194  1a00000f          BNE      |L1.472|
000198  ea000008          B        |L1.448|
                  |L1.412|
00019c  e3540000          CMP      r4,#0                 ;243
0001a0  15941000          LDRNE    r1,[r4,#0]            ;243
0001a4  13510000          CMPNE    r1,#0                 ;243
0001a8  1affffd4          BNE      |L1.256|
0001ac  eaffffe1          B        |L1.312|
                  |L1.432|
0001b0  e1a02004          MOV      r2,r4                 ;229
0001b4  e594400c          LDR      r4,[r4,#0xc]          ;229
                  |L1.440|
0001b8  e3540000          CMP      r4,#0                 ;229
0001bc  1affffca          BNE      |L1.236|
                  |L1.448|
;;;286          pcb = uncon_pcb;
0001c0  e1b04000          MOVS     r4,r0
0001c4  1a000003          BNE      |L1.472|
                  |L1.456|
;;;287        }
;;;288      }
;;;289    
;;;290      /* Check checksum if this is a match or if it was directed at us. */
;;;291      if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
0001c8  e59a0004          LDR      r0,[r10,#4]
0001cc  e59b1000          LDR      r1,[r11,#0]  ; current_iphdr_dest
0001d0  e1500001          CMP      r0,r1
0001d4  1a00003a          BNE      |L1.708|
                  |L1.472|
;;;292        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
;;;293    #if LWIP_UDPLITE
;;;294        if (IPH_PROTO(iphdr) == IP_PROTO_UDPLITE) {
;;;295          /* Do the UDP Lite checksum */
;;;296    #if CHECKSUM_CHECK_UDP
;;;297          u16_t chklen = ntohs(udphdr->len);
;;;298          if (chklen < sizeof(struct udp_hdr)) {
;;;299            if (chklen == 0) {
;;;300              /* For UDP-Lite, checksum length of 0 means checksum
;;;301                 over the complete packet (See RFC 3828 chap. 3.1) */
;;;302              chklen = p->tot_len;
;;;303            } else {
;;;304              /* At least the UDP-Lite header must be covered by the
;;;305                 checksum! (Again, see RFC 3828 chap. 3.1) */
;;;306              UDP_STATS_INC(udp.chkerr);
;;;307              UDP_STATS_INC(udp.drop);
;;;308              snmp_inc_udpinerrors();
;;;309              pbuf_free(p);
;;;310              goto end;
;;;311            }
;;;312          }
;;;313          if (inet_chksum_pseudo_partial(p, &current_iphdr_src, &current_iphdr_dest,
;;;314                                 IP_PROTO_UDPLITE, p->tot_len, chklen) != 0) {
;;;315           LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;316                       ("udp_input: UDP Lite datagram discarded due to failing checksum\n"));
;;;317            UDP_STATS_INC(udp.chkerr);
;;;318            UDP_STATS_INC(udp.drop);
;;;319            snmp_inc_udpinerrors();
;;;320            pbuf_free(p);
;;;321            goto end;
;;;322          }
;;;323    #endif /* CHECKSUM_CHECK_UDP */
;;;324        } else
;;;325    #endif /* LWIP_UDPLITE */
;;;326        {
;;;327    #if CHECKSUM_CHECK_UDP
;;;328          if (udphdr->chksum != 0) {
0001d8  e5d90007          LDRB     r0,[r9,#7]
0001dc  e5d91006          LDRB     r1,[r9,#6]
0001e0  e1910400          ORRS     r0,r1,r0,LSL #8
0001e4  0a000008          BEQ      |L1.524|
;;;329            if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
0001e8  e1d500b8          LDRH     r0,[r5,#8]
0001ec  e59f220c          LDR      r2,|L1.1024|
0001f0  e59f1210          LDR      r1,|L1.1032|
0001f4  e58d0000          STR      r0,[sp,#0]
0001f8  e3a03011          MOV      r3,#0x11
0001fc  e1a00005          MOV      r0,r5
000200  ebfffffe          BL       inet_chksum_pseudo
000204  e3500000          CMP      r0,#0
000208  1a00002d          BNE      |L1.708|
                  |L1.524|
;;;330                                   IP_PROTO_UDP, p->tot_len) != 0) {
;;;331              LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;332                          ("udp_input: UDP datagram discarded due to failing checksum\n"));
;;;333              UDP_STATS_INC(udp.chkerr);
;;;334              UDP_STATS_INC(udp.drop);
;;;335              snmp_inc_udpinerrors();
;;;336              pbuf_free(p);
;;;337              goto end;
;;;338            }
;;;339          }
;;;340    #endif /* CHECKSUM_CHECK_UDP */
;;;341        }
;;;342        if(pbuf_header(p, -UDP_HLEN)) {
00020c  e3e01007          MVN      r1,#7
000210  e1a00005          MOV      r0,r5
000214  ebfffffe          BL       pbuf_header
000218  e3500000          CMP      r0,#0
00021c  0a000005          BEQ      |L1.568|
;;;343          /* Can we cope with this failing? Just assert for now */
;;;344          LWIP_ASSERT("pbuf_header failed\n", 0);
000220  e28f3f79          ADR      r3,|L1.1036|
000224  e3a02f56          MOV      r2,#0x158
000228  e28f1f7e          ADR      r1,|L1.1064|
00022c  e28f0f82          ADR      r0,|L1.1084|
000230  ebfffffe          BL       sysprintf
;;;345          UDP_STATS_INC(udp.drop);
;;;346          snmp_inc_udpinerrors();
;;;347          pbuf_free(p);
;;;348          goto end;
000234  ea000022          B        |L1.708|
                  |L1.568|
;;;349        }
;;;350        if (pcb != NULL) {
000238  e3540000          CMP      r4,#0
00023c  0a000009          BEQ      |L1.616|
;;;351          snmp_inc_udpindatagrams();
;;;352    #if SO_REUSE && SO_REUSE_RXTOALL
;;;353          if ((broadcast || ip_addr_ismulticast(&current_iphdr_dest)) &&
;;;354              ip_get_option(pcb, SOF_REUSEADDR)) {
;;;355            /* pass broadcast- or multicast packets to all multicast pcbs
;;;356               if SOF_REUSEADDR is set on the first match */
;;;357            struct udp_pcb *mpcb;
;;;358            u8_t p_header_changed = 0;
;;;359            for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
;;;360              if (mpcb != pcb) {
;;;361                /* compare PCB local addr+port to UDP destination addr+port */
;;;362                if ((mpcb->local_port == dest) &&
;;;363                    ((!broadcast && ip_addr_isany(&mpcb->local_ip)) ||
;;;364                     ip_addr_cmp(&(mpcb->local_ip), &current_iphdr_dest) ||
;;;365    #if LWIP_IGMP
;;;366                     ip_addr_ismulticast(&current_iphdr_dest) ||
;;;367    #endif /* LWIP_IGMP */
;;;368    #if IP_SOF_BROADCAST_RECV
;;;369                     (broadcast && ip_get_option(mpcb, SOF_BROADCAST)))) {
;;;370    #else  /* IP_SOF_BROADCAST_RECV */
;;;371                     (broadcast))) {
;;;372    #endif /* IP_SOF_BROADCAST_RECV */
;;;373                  /* pass a copy of the packet to all local matches */
;;;374                  if (mpcb->recv != NULL) {
;;;375                    struct pbuf *q;
;;;376                    /* for that, move payload to IP header again */
;;;377                    if (p_header_changed == 0) {
;;;378                      pbuf_header(p, (s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;379                      p_header_changed = 1;
;;;380                    }
;;;381                    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
;;;382                    if (q != NULL) {
;;;383                      err_t err = pbuf_copy(q, p);
;;;384                      if (err == ERR_OK) {
;;;385                        /* move payload to UDP data */
;;;386                        pbuf_header(q, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;387                        mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
;;;388                      }
;;;389                    }
;;;390                  }
;;;391                }
;;;392              }
;;;393            }
;;;394            if (p_header_changed) {
;;;395              /* and move payload to UDP data again */
;;;396              pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;397            }
;;;398          }
;;;399    #endif /* SO_REUSE && SO_REUSE_RXTOALL */
;;;400          /* callback */
;;;401          if (pcb->recv != NULL) {
000240  e594c018          LDR      r12,[r4,#0x18]
000244  e35c0000          CMP      r12,#0
000248  0a00001d          BEQ      |L1.708|
;;;402            /* now the recv function is responsible for freeing p */
;;;403            pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
00024c  e58d7000          STR      r7,[sp,#0]
000250  e59f31b0          LDR      r3,|L1.1032|
000254  e594001c          LDR      r0,[r4,#0x1c]
000258  e1a02005          MOV      r2,r5
00025c  e1a01004          MOV      r1,r4
000260  e12fff3c          BLX      r12
;;;404          } else {
;;;405            /* no recv function registered? then we have to free the pbuf! */
;;;406            pbuf_free(p);
;;;407            goto end;
;;;408          }
;;;409        } else {
;;;410          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
;;;411    
;;;412    #if LWIP_ICMP
;;;413          /* No match was found, send ICMP destination port unreachable unless
;;;414             destination address was broadcast/multicast. */
;;;415          if (!broadcast &&
;;;416              !ip_addr_ismulticast(&current_iphdr_dest)) {
;;;417            /* move payload pointer back to ip header */
;;;418            pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
;;;419            LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
;;;420            icmp_dest_unreach(p, ICMP_DUR_PORT);
;;;421          }
;;;422    #endif /* LWIP_ICMP */
;;;423          UDP_STATS_INC(udp.proterr);
;;;424          UDP_STATS_INC(udp.drop);
;;;425          snmp_inc_udpnoports();
;;;426          pbuf_free(p);
;;;427        }
;;;428      } else {
;;;429        pbuf_free(p);
;;;430      }
;;;431    end:
;;;432      PERF_STOP("udp_input");
;;;433    }
000264  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.616|
000268  e3560000          CMP      r6,#0                 ;415
00026c  1a000014          BNE      |L1.708|
000270  e5db0000          LDRB     r0,[r11,#0]           ;416  ; current_iphdr_dest
000274  e20000f0          AND      r0,r0,#0xf0           ;416
000278  e35000e0          CMP      r0,#0xe0              ;416
00027c  0a000010          BEQ      |L1.708|
000280  e5d80000          LDRB     r0,[r8,#0]            ;418
000284  e200100f          AND      r1,r0,#0xf            ;418
000288  e3a00008          MOV      r0,#8                 ;418
00028c  e0801101          ADD      r1,r0,r1,LSL #2       ;418
000290  e1a00005          MOV      r0,r5                 ;418
000294  ebfffffe          BL       pbuf_header
000298  e5950004          LDR      r0,[r5,#4]            ;419
00029c  e1500008          CMP      r0,r8                 ;419
0002a0  0a000004          BEQ      |L1.696|
0002a4  e59f21b8          LDR      r2,|L1.1124|
0002a8  e28f3f57          ADR      r3,|L1.1036|
0002ac  e28f1f6d          ADR      r1,|L1.1128|
0002b0  e28f0f61          ADR      r0,|L1.1084|
0002b4  ebfffffe          BL       sysprintf
                  |L1.696|
0002b8  e3a01003          MOV      r1,#3                 ;420
0002bc  e1a00005          MOV      r0,r5                 ;420
0002c0  ebfffffe          BL       icmp_dest_unreach
                  |L1.708|
0002c4  e1a00005          MOV      r0,r5                 ;429
0002c8  ebfffffe          BL       pbuf_free
0002cc  e8bd8ff8          POP      {r3-r11,pc}
;;;434    
                          ENDP

                  udp_bind PROC
;;;765    err_t
;;;766    udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
0002d0  e92d47f0          PUSH     {r4-r10,lr}
;;;767    {
;;;768      struct udp_pcb *ipcb;
;;;769      u8_t rebind;
;;;770    
;;;771      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
;;;772      ip_addr_debug_print(UDP_DEBUG, ipaddr);
;;;773      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
;;;774    
;;;775      rebind = 0;
;;;776      /* Check for double bind and rebind of the same pcb */
;;;777      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
0002d4  e59f8128          LDR      r8,|L1.1028|
0002d8  e1a05000          MOV      r5,r0                 ;767
;;;778        /* is this UDP PCB already on active list? */
;;;779        if (pcb == ipcb) {
;;;780          /* pcb may occur at most once in active list */
;;;781          LWIP_ASSERT("rebind == 0", rebind == 0);
0002dc  e5984004          LDR      r4,[r8,#4]  ; udp_pcbs
0002e0  e59f9194          LDR      r9,|L1.1148|
0002e4  e1a06002          MOV      r6,r2                 ;767
0002e8  e1a07001          MOV      r7,r1                 ;767
0002ec  e3a00000          MOV      r0,#0                 ;775
0002f0  ea000017          B        |L1.852|
                  |L1.756|
0002f4  e1550004          CMP      r5,r4                 ;779
0002f8  1a000008          BNE      |L1.800|
0002fc  e3500000          CMP      r0,#0
000300  0a000004          BEQ      |L1.792|
000304  e28f3c01          ADR      r3,|L1.1036|
000308  e1a02009          MOV      r2,r9
00030c  e28f1f5b          ADR      r1,|L1.1152|
000310  e28f0f49          ADR      r0,|L1.1084|
000314  ebfffffe          BL       sysprintf
                  |L1.792|
;;;782          /* pcb already in list, just rebind */
;;;783          rebind = 1;
000318  e3a00001          MOV      r0,#1
00031c  ea00000b          B        |L1.848|
                  |L1.800|
;;;784        }
;;;785    
;;;786        /* By default, we don't allow to bind to a port that any other udp
;;;787           PCB is alread bound to, unless *all* PCBs with that port have tha
;;;788           REUSEADDR flag set. */
;;;789    #if SO_REUSE
;;;790        else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
;;;791                 !ip_get_option(ipcb, SOF_REUSEADDR)) {
;;;792    #else /* SO_REUSE */
;;;793        /* port matches that of PCB in list and REUSEADDR not set -> reject */
;;;794        else {
;;;795    #endif /* SO_REUSE */
;;;796          if ((ipcb->local_port == port) &&
000320  e1d411b2          LDRH     r1,[r4,#0x12]
000324  e1510006          CMP      r1,r6
000328  1a000008          BNE      |L1.848|
;;;797              /* IP address matches, or one is IP_ADDR_ANY? */
;;;798              (ip_addr_isany(&(ipcb->local_ip)) ||
00032c  e3540000          CMP      r4,#0
000330  15941000          LDRNE    r1,[r4,#0]
000334  13510000          CMPNE    r1,#0
000338  0a00002e          BEQ      |L1.1016|
;;;799               ip_addr_isany(ipaddr) ||
00033c  e3570000          CMP      r7,#0
000340  15972000          LDRNE    r2,[r7,#0]
000344  13520000          CMPNE    r2,#0
;;;800               ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
000348  11510002          CMPNE    r1,r2
00034c  0a000029          BEQ      |L1.1016|
                  |L1.848|
000350  e594400c          LDR      r4,[r4,#0xc]          ;777
                  |L1.852|
000354  e3540000          CMP      r4,#0                 ;777
000358  1affffe5          BNE      |L1.756|
;;;801            /* other PCB already binds to this local IP and port */
;;;802            LWIP_DEBUGF(UDP_DEBUG,
;;;803                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
;;;804            return ERR_USE;
;;;805          }
;;;806        }
;;;807      }
;;;808    
;;;809      ip_addr_set(&pcb->local_ip, ipaddr);
00035c  e3570000          CMP      r7,#0
000360  15971000          LDRNE    r1,[r7,#0]
000364  03a01000          MOVEQ    r1,#0
;;;810    
;;;811      /* no port specified? */
;;;812      if (port == 0) {
000368  e3560000          CMP      r6,#0
00036c  e5851000          STR      r1,[r5,#0]
000370  1a000019          BNE      |L1.988|
000374  e59f4110          LDR      r4,|L1.1164|
000378  e598c004          LDR      r12,[r8,#4]           ;777
00037c  e3a03000          MOV      r3,#0                 ;777
000380  e3a06903          MOV      r6,#0xc000            ;777
                  |L1.900|
000384  e1d810b0          LDRH     r1,[r8,#0]            ;777  ; udp_port
000388  e2812001          ADD      r2,r1,#1              ;777
00038c  e1510004          CMP      r1,r4                 ;777
000390  e1c820b0          STRH     r2,[r8,#0]            ;777  ; udp_port
000394  01c860b0          STRHEQ   r6,[r8,#0]            ;777  ; udp_port
000398  e1d820b0          LDRH     r2,[r8,#0]            ;777
00039c  e1a0100c          MOV      r1,r12                ;777
                  |L1.928|
0003a0  e3510000          CMP      r1,#0                 ;777
0003a4  01a06802          LSLEQ    r6,r2,#16             ;777
0003a8  01a06826          LSREQ    r6,r6,#16             ;777
0003ac  0a000008          BEQ      |L1.980|
0003b0  e1d171b2          LDRH     r7,[r1,#0x12]         ;777
0003b4  e1570002          CMP      r7,r2                 ;777
0003b8  1591100c          LDRNE    r1,[r1,#0xc]          ;777
0003bc  1afffff7          BNE      |L1.928|
0003c0  e2831001          ADD      r1,r3,#1              ;777
0003c4  e3c13801          BIC      r3,r1,#0x10000        ;777
0003c8  e3530901          CMP      r3,#0x4000            ;777
0003cc  23a06000          MOVCS    r6,#0                 ;777
0003d0  3affffeb          BCC      |L1.900|
                  |L1.980|
;;;813        port = udp_new_port();
;;;814        if (port == 0) {
0003d4  e3560000          CMP      r6,#0
0003d8  0a000006          BEQ      |L1.1016|
                  |L1.988|
;;;815          /* no more ports available in local range */
;;;816          LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
;;;817          return ERR_USE;
;;;818        }
;;;819      }
;;;820      pcb->local_port = port;
;;;821      snmp_insert_udpidx_tree(pcb);
;;;822      /* pcb not active yet? */
;;;823      if (rebind == 0) {
0003dc  e3500000          CMP      r0,#0
0003e0  e1c561b2          STRH     r6,[r5,#0x12]         ;820
;;;824        /* place the PCB on the active list if not already there */
;;;825        pcb->next = udp_pcbs;
0003e4  05980004          LDREQ    r0,[r8,#4]  ; udp_pcbs
0003e8  0585000c          STREQ    r0,[r5,#0xc]
;;;826        udp_pcbs = pcb;
;;;827      }
;;;828      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;829                  ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
;;;830                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;831                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;832                   pcb->local_port));
;;;833      return ERR_OK;
0003ec  e3a00000          MOV      r0,#0
0003f0  05885004          STREQ    r5,[r8,#4]            ;826  ; udp_pcbs
;;;834    }
0003f4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1016|
0003f8  e3e00007          MVN      r0,#7                 ;817
0003fc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1024|
                          DCD      current_iphdr_dest
                  |L1.1028|
                          DCD      ||.data||
                  |L1.1032|
                          DCD      current_iphdr_src
                  |L1.1036|
00040c  6c776970          DCB      "lwip-1.4.1\\src\\core\\udp.c",0
000410  2d312e34
000414  2e315c73
000418  72635c63
00041c  6f72655c
000420  7564702e
000424  6300    
000426  00                DCB      0
000427  00                DCB      0
                  |L1.1064|
000428  70627566          DCB      "pbuf_header failed\n",0
00042c  5f686561
000430  64657220
000434  6661696c
000438  65640a00
                  |L1.1084|
00043c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000440  7274696f
000444  6e202225
000448  73222066
00044c  61696c65
000450  64206174
000454  206c696e
000458  65202564
00045c  20696e20
000460  25730a00
                  |L1.1124|
                          DCD      0x000001a3
                  |L1.1128|
000468  702d3e70          DCB      "p->payload == iphdr",0
00046c  61796c6f
000470  6164203d
000474  3d206970
000478  68647200
                  |L1.1148|
                          DCD      0x0000030d
                  |L1.1152|
000480  72656269          DCB      "rebind == 0",0
000484  6e64203d
000488  3d203000
                  |L1.1164|
                          DCD      0x0000ffff
                          ENDP

                  udp_sendto_if PROC
;;;548    err_t
;;;549    udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
000490  e92d4ffe          PUSH     {r1-r11,lr}
;;;550      ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
;;;551    {
000494  e1a09002          MOV      r9,r2
;;;552    #if LWIP_CHECKSUM_ON_COPY
;;;553      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
;;;554    }
;;;555    
;;;556    /** Same as udp_sendto_if(), but with checksum */
;;;557    err_t
;;;558    udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;559                         u16_t dst_port, struct netif *netif, u8_t have_chksum,
;;;560                         u16_t chksum)
;;;561    {
;;;562    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;563      struct udp_hdr *udphdr;
;;;564      ip_addr_t *src_ip;
;;;565      err_t err;
;;;566      struct pbuf *q; /* q will be sent down the stack */
;;;567    
;;;568    #if IP_SOF_BROADCAST
;;;569      /* broadcast filter? */
;;;570      if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(dst_ip, netif)) {
;;;571        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;572          ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
;;;573        return ERR_VAL;
;;;574      }
;;;575    #endif /* IP_SOF_BROADCAST */
;;;576    
;;;577      /* if the PCB is not yet bound to a port, bind it here */
;;;578      if (pcb->local_port == 0) {
000498  e1d021b2          LDRH     r2,[r0,#0x12]
00049c  e59d8030          LDR      r8,[sp,#0x30]         ;551
0004a0  e1a0a003          MOV      r10,r3                ;551
0004a4  e3520000          CMP      r2,#0
0004a8  e1a07001          MOV      r7,r1                 ;551
0004ac  e1a05000          MOV      r5,r0                 ;551
0004b0  1a000003          BNE      |L1.1220|
;;;579        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
;;;580        err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
0004b4  e1a01000          MOV      r1,r0
0004b8  ebfffffe          BL       udp_bind
;;;581        if (err != ERR_OK) {
0004bc  e3500000          CMP      r0,#0
0004c0  1a000034          BNE      |L1.1432|
                  |L1.1220|
;;;582          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
;;;583          return err;
;;;584        }
;;;585      }
;;;586    
;;;587      /* not enough space to add an UDP header to first pbuf in given p chain? */
;;;588      if (pbuf_header(p, UDP_HLEN)) {
0004c4  e3a01008          MOV      r1,#8
0004c8  e1a00007          MOV      r0,r7
0004cc  ebfffffe          BL       pbuf_header
0004d0  e3500000          CMP      r0,#0
;;;589        /* allocate header in a separate new pbuf */
;;;590        q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
;;;591        /* new header pbuf could not be allocated? */
;;;592        if (q == NULL) {
;;;593          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
;;;594          return ERR_MEM;
;;;595        }
;;;596        if (p->tot_len != 0) {
;;;597          /* chain header q in front of given pbuf p (only if p contains data) */
;;;598          pbuf_chain(q, p);
;;;599        }
;;;600        /* first pbuf q points to header pbuf */
;;;601        LWIP_DEBUGF(UDP_DEBUG,
;;;602                    ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
;;;603      } else {
;;;604        /* adding space for header within p succeeded */
;;;605        /* first pbuf q equals given pbuf */
;;;606        q = p;
0004d4  01a04007          MOVEQ    r4,r7
0004d8  0a00000b          BEQ      |L1.1292|
0004dc  e3a02000          MOV      r2,#0                 ;590
0004e0  e3a01008          MOV      r1,#8                 ;590
0004e4  e3a00001          MOV      r0,#1                 ;590
0004e8  ebfffffe          BL       pbuf_alloc
0004ec  e1b04000          MOVS     r4,r0                 ;590
0004f0  03e00000          MVNEQ    r0,#0                 ;594
0004f4  0a000027          BEQ      |L1.1432|
0004f8  e1d700b8          LDRH     r0,[r7,#8]            ;596
0004fc  e3500000          CMP      r0,#0                 ;596
000500  11a01007          MOVNE    r1,r7                 ;598
000504  11a00004          MOVNE    r0,r4                 ;598
000508  1bfffffe          BLNE     pbuf_chain
                  |L1.1292|
;;;607        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
;;;608      }
;;;609      LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
00050c  e1d400ba          LDRH     r0,[r4,#0xa]
000510  e3500008          CMP      r0,#8
000514  2a000004          BCS      |L1.1324|
000518  e59f21ec          LDR      r2,|L1.1804|
00051c  e24f3f46          ADR      r3,|L1.1036|
000520  e28f1f7a          ADR      r1,|L1.1808|
000524  e24f00f0          ADR      r0,|L1.1084|
000528  ebfffffe          BL       sysprintf
                  |L1.1324|
;;;610                  (q->len >= sizeof(struct udp_hdr)));
;;;611      /* q now represents the packet to be sent */
;;;612      udphdr = (struct udp_hdr *)q->payload;
00052c  e5946004          LDR      r6,[r4,#4]
;;;613      udphdr->src = htons(pcb->local_port);
000530  e1d501b2          LDRH     r0,[r5,#0x12]
000534  ebfffffe          BL       lwip_htons
000538  e5c60000          STRB     r0,[r6,#0]
00053c  e1a00420          LSR      r0,r0,#8
000540  e5c60001          STRB     r0,[r6,#1]
;;;614      udphdr->dest = htons(dst_port);
000544  e1a0000a          MOV      r0,r10
000548  ebfffffe          BL       lwip_htons
00054c  e5c60002          STRB     r0,[r6,#2]
000550  e1a00420          LSR      r0,r0,#8
000554  e5c60003          STRB     r0,[r6,#3]
;;;615      /* in UDP, 0 checksum means 'no checksum' */
;;;616      udphdr->chksum = 0x0000; 
000558  e3a00000          MOV      r0,#0
00055c  e5c60006          STRB     r0,[r6,#6]
;;;617    
;;;618      /* Multicast Loop? */
;;;619    #if LWIP_IGMP
;;;620      if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
;;;621        q->flags |= PBUF_FLAG_MCASTLOOP;
;;;622      }
;;;623    #endif /* LWIP_IGMP */
;;;624    
;;;625    
;;;626      /* PCB local address is IP_ANY_ADDR? */
;;;627      if (ip_addr_isany(&pcb->local_ip)) {
000560  e3550000          CMP      r5,#0
000564  e5c60007          STRB     r0,[r6,#7]            ;616
000568  15950000          LDRNE    r0,[r5,#0]
00056c  13500000          CMPNE    r0,#0
;;;628        /* use outgoing network interface IP address as source address */
;;;629        src_ip = &(netif->ip_addr);
000570  0288a004          ADDEQ    r10,r8,#4
000574  0a000008          BEQ      |L1.1436|
;;;630      } else {
;;;631        /* check if UDP PCB local IP address is correct
;;;632         * this could be an old address if netif->ip_addr has changed */
;;;633        if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
000578  e5981004          LDR      r1,[r8,#4]
00057c  e1500001          CMP      r0,r1
;;;634          /* local_ip doesn't match, drop the packet */
;;;635          if (q != p) {
;;;636            /* free the header pbuf */
;;;637            pbuf_free(q);
;;;638            q = NULL;
;;;639            /* p is still referenced by the caller, and will live on */
;;;640          }
;;;641          return ERR_VAL;
;;;642        }
;;;643        /* use UDP PCB local IP address as source address */
;;;644        src_ip = &(pcb->local_ip);
000580  01a0a005          MOVEQ    r10,r5
000584  0a000004          BEQ      |L1.1436|
000588  e1540007          CMP      r4,r7                 ;635
00058c  11a00004          MOVNE    r0,r4                 ;637
000590  1bfffffe          BLNE     pbuf_free
000594  e3e00005          MVN      r0,#5                 ;641
                  |L1.1432|
;;;645      }
;;;646    
;;;647      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
;;;648    
;;;649    #if LWIP_UDPLITE
;;;650      /* UDP Lite protocol? */
;;;651      if (pcb->flags & UDP_FLAGS_UDPLITE) {
;;;652        u16_t chklen, chklen_hdr;
;;;653        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE packet length %"U16_F"\n", q->tot_len));
;;;654        /* set UDP message length in UDP header */
;;;655        chklen_hdr = chklen = pcb->chksum_len_tx;
;;;656        if ((chklen < sizeof(struct udp_hdr)) || (chklen > q->tot_len)) {
;;;657          if (chklen != 0) {
;;;658            LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE pcb->chksum_len is illegal: %"U16_F"\n", chklen));
;;;659          }
;;;660          /* For UDP-Lite, checksum length of 0 means checksum
;;;661             over the complete packet. (See RFC 3828 chap. 3.1)
;;;662             At least the UDP-Lite header must be covered by the
;;;663             checksum, therefore, if chksum_len has an illegal
;;;664             value, we generate the checksum over the complete
;;;665             packet to be safe. */
;;;666          chklen_hdr = 0;
;;;667          chklen = q->tot_len;
;;;668        }
;;;669        udphdr->len = htons(chklen_hdr);
;;;670        /* calculate checksum */
;;;671    #if CHECKSUM_GEN_UDP
;;;672        udphdr->chksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip,
;;;673          IP_PROTO_UDPLITE, q->tot_len,
;;;674    #if !LWIP_CHECKSUM_ON_COPY
;;;675          chklen);
;;;676    #else /* !LWIP_CHECKSUM_ON_COPY */
;;;677          (have_chksum ? UDP_HLEN : chklen));
;;;678        if (have_chksum) {
;;;679          u32_t acc;
;;;680          acc = udphdr->chksum + (u16_t)~(chksum);
;;;681          udphdr->chksum = FOLD_U32T(acc);
;;;682        }
;;;683    #endif /* !LWIP_CHECKSUM_ON_COPY */
;;;684    
;;;685        /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;686        if (udphdr->chksum == 0x0000) {
;;;687          udphdr->chksum = 0xffff;
;;;688        }
;;;689    #endif /* CHECKSUM_GEN_UDP */
;;;690        /* output to IP */
;;;691        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
;;;692        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;693        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
;;;694        NETIF_SET_HWADDRHINT(netif, NULL);
;;;695      } else
;;;696    #endif /* LWIP_UDPLITE */
;;;697      {      /* UDP */
;;;698        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
;;;699        udphdr->len = htons(q->tot_len);
;;;700        /* calculate checksum */
;;;701    #if CHECKSUM_GEN_UDP
;;;702        if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
;;;703          u16_t udpchksum;
;;;704    #if LWIP_CHECKSUM_ON_COPY
;;;705          if (have_chksum) {
;;;706            u32_t acc;
;;;707            udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
;;;708              q->tot_len, UDP_HLEN);
;;;709            acc = udpchksum + (u16_t)~(chksum);
;;;710            udpchksum = FOLD_U32T(acc);
;;;711          } else
;;;712    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;713          {
;;;714            udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
;;;715          }
;;;716    
;;;717          /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;718          if (udpchksum == 0x0000) {
;;;719            udpchksum = 0xffff;
;;;720          }
;;;721          udphdr->chksum = udpchksum;
;;;722        }
;;;723    #endif /* CHECKSUM_GEN_UDP */
;;;724        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
;;;725        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
;;;726        /* output to IP */
;;;727        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;728        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
;;;729        NETIF_SET_HWADDRHINT(netif, NULL);
;;;730      }
;;;731      /* TODO: must this be increased even if error occured? */
;;;732      snmp_inc_udpoutdatagrams();
;;;733    
;;;734      /* did we chain a separate header pbuf earlier? */
;;;735      if (q != p) {
;;;736        /* free the header pbuf */
;;;737        pbuf_free(q);
;;;738        q = NULL;
;;;739        /* p is still referenced by the caller, and will live on */
;;;740      }
;;;741    
;;;742      UDP_STATS_INC(udp.xmit);
;;;743      return err;
;;;744    }
000598  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.1436|
00059c  e1d400b8          LDRH     r0,[r4,#8]            ;699
0005a0  ebfffffe          BL       lwip_htons
0005a4  e5c60004          STRB     r0,[r6,#4]            ;699
0005a8  e1a00420          LSR      r0,r0,#8              ;699
0005ac  e5c60005          STRB     r0,[r6,#5]            ;699
0005b0  e5d50010          LDRB     r0,[r5,#0x10]         ;702
0005b4  e3100001          TST      r0,#1                 ;702
0005b8  1a00000b          BNE      |L1.1516|
0005bc  e1d400b8          LDRH     r0,[r4,#8]            ;714
0005c0  e3a03011          MOV      r3,#0x11              ;714
0005c4  e1a02009          MOV      r2,r9                 ;714
0005c8  e58d0000          STR      r0,[sp,#0]            ;714
0005cc  e1a0100a          MOV      r1,r10                ;714
0005d0  e1a00004          MOV      r0,r4                 ;714
0005d4  ebfffffe          BL       inet_chksum_pseudo
0005d8  e3500000          CMP      r0,#0                 ;718
0005dc  051f0158          LDREQ    r0,|L1.1164|
0005e0  e5c60006          STRB     r0,[r6,#6]            ;721
0005e4  e1a00420          LSR      r0,r0,#8              ;721
0005e8  e5c60007          STRB     r0,[r6,#7]            ;721
                  |L1.1516|
0005ec  e5d50009          LDRB     r0,[r5,#9]            ;728
0005f0  e3a01011          MOV      r1,#0x11              ;728
0005f4  e1a02009          MOV      r2,r9                 ;728
0005f8  e88d0103          STM      sp,{r0,r1,r8}         ;728
0005fc  e5d5300a          LDRB     r3,[r5,#0xa]          ;728
000600  e1a0100a          MOV      r1,r10                ;728
000604  e1a00004          MOV      r0,r4                 ;728
000608  ebfffffe          BL       ip_output_if
00060c  e1540007          CMP      r4,r7                 ;735
000610  e1a05000          MOV      r5,r0                 ;728
000614  11a00004          MOVNE    r0,r4                 ;737
000618  1bfffffe          BLNE     pbuf_free
00061c  e1a00005          MOV      r0,r5                 ;743
000620  e8bd8ffe          POP      {r1-r11,pc}
;;;745    
                          ENDP

                  udp_sendto PROC
;;;490    err_t
;;;491    udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
000624  e92d40f8          PUSH     {r3-r7,lr}
;;;492      ip_addr_t *dst_ip, u16_t dst_port)
;;;493    {
000628  e1a07000          MOV      r7,r0
00062c  e1a05003          MOV      r5,r3
000630  e1a06001          MOV      r6,r1
000634  e1a04002          MOV      r4,r2
;;;494    #if LWIP_CHECKSUM_ON_COPY
;;;495      return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
;;;496    }
;;;497    
;;;498    /** Same as udp_sendto(), but with checksum */
;;;499    err_t
;;;500    udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;501                      u16_t dst_port, u8_t have_chksum, u16_t chksum)
;;;502    {
;;;503    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;504      struct netif *netif;
;;;505    
;;;506      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
;;;507    
;;;508      /* find the outgoing network interface for this packet */
;;;509    #if LWIP_IGMP
;;;510      netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
;;;511    #else
;;;512      netif = ip_route(dst_ip);
000638  e1a00002          MOV      r0,r2
00063c  ebfffffe          BL       ip_route
;;;513    #endif /* LWIP_IGMP */
;;;514    
;;;515      /* no outgoing network interface could be found? */
;;;516      if (netif == NULL) {
000640  e3500000          CMP      r0,#0
;;;517        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;518          ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
;;;519        UDP_STATS_INC(udp.rterr);
;;;520        return ERR_RTE;
000644  03e00003          MVNEQ    r0,#3
000648  0a000005          BEQ      |L1.1636|
;;;521      }
;;;522    #if LWIP_CHECKSUM_ON_COPY
;;;523      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
;;;524    #else /* LWIP_CHECKSUM_ON_COPY */
;;;525      return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
00064c  e58d0000          STR      r0,[sp,#0]
000650  e1a03005          MOV      r3,r5
000654  e1a02004          MOV      r2,r4
000658  e1a01006          MOV      r1,r6
00065c  e1a00007          MOV      r0,r7
000660  ebfffffe          BL       udp_sendto_if
                  |L1.1636|
;;;526    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;527    }
000664  e8bd80f8          POP      {r3-r7,pc}
;;;528    
                          ENDP

                  udp_send PROC
;;;453    err_t
;;;454    udp_send(struct udp_pcb *pcb, struct pbuf *p)
000668  e1d031b4          LDRH     r3,[r0,#0x14]
;;;455    {
;;;456      /* send to the packet using remote ip and port stored in the pcb */
;;;457      return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
00066c  e2802004          ADD      r2,r0,#4
000670  eafffffe          B        udp_sendto
;;;458    }
;;;459    
                          ENDP

                  udp_connect PROC
;;;852    err_t
;;;853    udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000674  e92d4070          PUSH     {r4-r6,lr}
;;;854    {
000678  e1a06002          MOV      r6,r2
;;;855      struct udp_pcb *ipcb;
;;;856    
;;;857      if (pcb->local_port == 0) {
00067c  e1d021b2          LDRH     r2,[r0,#0x12]
000680  e1a05001          MOV      r5,r1                 ;854
000684  e1a04000          MOV      r4,r0                 ;854
000688  e3520000          CMP      r2,#0
00068c  1a000003          BNE      |L1.1696|
;;;858        err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
000690  e1a01000          MOV      r1,r0
000694  ebfffffe          BL       udp_bind
;;;859        if (err != ERR_OK) {
000698  e3500000          CMP      r0,#0
;;;860          return err;
;;;861        }
;;;862      }
;;;863    
;;;864      ip_addr_set(&pcb->remote_ip, ipaddr);
;;;865      pcb->remote_port = port;
;;;866      pcb->flags |= UDP_FLAGS_CONNECTED;
;;;867    /** TODO: this functionality belongs in upper layers */
;;;868    #ifdef LWIP_UDP_TODO
;;;869      /* Nail down local IP for netconn_addr()/getsockname() */
;;;870      if (ip_addr_isany(&pcb->local_ip) && !ip_addr_isany(&pcb->remote_ip)) {
;;;871        struct netif *netif;
;;;872    
;;;873        if ((netif = ip_route(&(pcb->remote_ip))) == NULL) {
;;;874          LWIP_DEBUGF(UDP_DEBUG, ("udp_connect: No route to 0x%lx\n", pcb->remote_ip.addr));
;;;875          UDP_STATS_INC(udp.rterr);
;;;876          return ERR_RTE;
;;;877        }
;;;878        /** TODO: this will bind the udp pcb locally, to the interface which
;;;879            is used to route output packets to the remote address. However, we
;;;880            might want to accept incoming packets on any interface! */
;;;881        pcb->local_ip = netif->ip_addr;
;;;882      } else if (ip_addr_isany(&pcb->remote_ip)) {
;;;883        pcb->local_ip.addr = 0;
;;;884      }
;;;885    #endif
;;;886      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;887                  ("udp_connect: connected to %"U16_F".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",
;;;888                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;889                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;890                   pcb->local_port));
;;;891    
;;;892      /* Insert UDP PCB into the list of active UDP PCBs. */
;;;893      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
;;;894        if (pcb == ipcb) {
;;;895          /* already on the list, just return */
;;;896          return ERR_OK;
;;;897        }
;;;898      }
;;;899      /* PCB not yet on the list, add PCB now */
;;;900      pcb->next = udp_pcbs;
;;;901      udp_pcbs = pcb;
;;;902      return ERR_OK;
;;;903    }
00069c  18bd8070          POPNE    {r4-r6,pc}
                  |L1.1696|
0006a0  e3550000          CMP      r5,#0                 ;864
0006a4  15950000          LDRNE    r0,[r5,#0]            ;864
0006a8  03a00000          MOVEQ    r0,#0                 ;864
0006ac  e5840004          STR      r0,[r4,#4]            ;864
0006b0  e1c461b4          STRH     r6,[r4,#0x14]         ;865
0006b4  e5d40010          LDRB     r0,[r4,#0x10]         ;866
0006b8  e51f22bc          LDR      r2,|L1.1028|
0006bc  e3800004          ORR      r0,r0,#4              ;866
0006c0  e5c40010          STRB     r0,[r4,#0x10]         ;866
0006c4  e5920004          LDR      r0,[r2,#4]            ;893  ; udp_pcbs
0006c8  e1a01000          MOV      r1,r0                 ;893
                  |L1.1740|
0006cc  e3500000          CMP      r0,#0                 ;893
0006d0  0584100c          STREQ    r1,[r4,#0xc]          ;900
0006d4  05824004          STREQ    r4,[r2,#4]            ;901  ; udp_pcbs
0006d8  0a000002          BEQ      |L1.1768|
0006dc  e1540000          CMP      r4,r0                 ;894
0006e0  1590000c          LDRNE    r0,[r0,#0xc]          ;893
0006e4  1afffff8          BNE      |L1.1740|
                  |L1.1768|
0006e8  e3a00000          MOV      r0,#0                 ;896
0006ec  e8bd8070          POP      {r4-r6,pc}
;;;904    
                          ENDP

                  udp_disconnect PROC
;;;910    void
;;;911    udp_disconnect(struct udp_pcb *pcb)
0006f0  e3a01000          MOV      r1,#0
;;;912    {
;;;913      /* reset remote address association */
;;;914      ip_addr_set_any(&pcb->remote_ip);
0006f4  e5801004          STR      r1,[r0,#4]
;;;915      pcb->remote_port = 0;
0006f8  e1c011b4          STRH     r1,[r0,#0x14]
;;;916      /* mark PCB as unconnected */
;;;917      pcb->flags &= ~UDP_FLAGS_CONNECTED;
0006fc  e5d01010          LDRB     r1,[r0,#0x10]
000700  e3c11004          BIC      r1,r1,#4
000704  e5c01010          STRB     r1,[r0,#0x10]
;;;918    }
000708  e12fff1e          BX       lr
                  |L1.1804|
                          DCD      0x00000261
                  |L1.1808|
000710  63686563          DCB      "check that first pbuf can hold struct udp_hdr",0
000714  6b207468
000718  61742066
00071c  69727374
000720  20706275
000724  66206361
000728  6e20686f
00072c  6c642073
000730  74727563
000734  74207564
000738  705f6864
00073c  7200    
00073e  00                DCB      0
00073f  00                DCB      0
                          ENDP

                  udp_recv PROC
;;;929    void
;;;930    udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
000740  e5801018          STR      r1,[r0,#0x18]
;;;931    {
;;;932      /* remember recv() callback and user data */
;;;933      pcb->recv = recv;
;;;934      pcb->recv_arg = recv_arg;
000744  e580201c          STR      r2,[r0,#0x1c]
;;;935    }
000748  e12fff1e          BX       lr
;;;936    
                          ENDP

                  udp_remove PROC
;;;945    void
;;;946    udp_remove(struct udp_pcb *pcb)
00074c  e51f1350          LDR      r1,|L1.1028|
;;;947    {
;;;948      struct udp_pcb *pcb2;
;;;949    
;;;950      snmp_delete_udpidx_tree(pcb);
;;;951      /* pcb to be removed is first in list? */
;;;952      if (udp_pcbs == pcb) {
000750  e5912004          LDR      r2,[r1,#4]  ; udp_pcbs
000754  e1520000          CMP      r2,r0
;;;953        /* make list start at 2nd pcb */
;;;954        udp_pcbs = udp_pcbs->next;
000758  0592200c          LDREQ    r2,[r2,#0xc]
00075c  05812004          STREQ    r2,[r1,#4]  ; udp_pcbs
000760  0a000009          BEQ      |L1.1932|
000764  ea000006          B        |L1.1924|
                  |L1.1896|
;;;955        /* pcb not 1st in list */
;;;956      } else {
;;;957        for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
;;;958          /* find pcb in udp_pcbs list */
;;;959          if (pcb2->next != NULL && pcb2->next == pcb) {
000768  e592100c          LDR      r1,[r2,#0xc]
00076c  e3510000          CMP      r1,#0
000770  0a000002          BEQ      |L1.1920|
000774  e1510000          CMP      r1,r0
;;;960            /* remove pcb from list */
;;;961            pcb2->next = pcb->next;
000778  0590100c          LDREQ    r1,[r0,#0xc]
00077c  0582100c          STREQ    r1,[r2,#0xc]
                  |L1.1920|
000780  e1a02001          MOV      r2,r1                 ;957
                  |L1.1924|
000784  e3520000          CMP      r2,#0                 ;957
000788  1afffff6          BNE      |L1.1896|
                  |L1.1932|
;;;962          }
;;;963        }
;;;964      }
;;;965      memp_free(MEMP_UDP_PCB, pcb);
00078c  e1a01000          MOV      r1,r0
000790  e3a00000          MOV      r0,#0
000794  eafffffe          B        memp_free
;;;966    }
;;;967    
                          ENDP

                  udp_new PROC
;;;976    struct udp_pcb *
;;;977    udp_new(void)
000798  e92d4010          PUSH     {r4,lr}
;;;978    {
;;;979      struct udp_pcb *pcb;
;;;980      pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
00079c  e3a00000          MOV      r0,#0
0007a0  ebfffffe          BL       memp_malloc
0007a4  e1b04000          MOVS     r4,r0
;;;981      /* could allocate UDP PCB? */
;;;982      if (pcb != NULL) {
0007a8  0a000003          BEQ      |L1.1980|
;;;983        /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
;;;984         * which means checksum is generated over the whole datagram per default
;;;985         * (recommended as default by RFC 3828). */
;;;986        /* initialize PCB to all zeroes */
;;;987        memset(pcb, 0, sizeof(struct udp_pcb));
0007ac  e3a01020          MOV      r1,#0x20
0007b0  ebfffffe          BL       __aeabi_memclr4
;;;988        pcb->ttl = UDP_TTL;
0007b4  e3a000ff          MOV      r0,#0xff
0007b8  e5c4000a          STRB     r0,[r4,#0xa]
                  |L1.1980|
;;;989      }
;;;990      return pcb;
0007bc  e1a00004          MOV      r0,r4
;;;991    }
0007c0  e8bd8010          POP      {r4,pc}
;;;992    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  udp_port
000000  c000              DCW      0xc000
000002  0000              DCB      0x00,0x00
                  udp_pcbs
                          DCD      0x00000000
