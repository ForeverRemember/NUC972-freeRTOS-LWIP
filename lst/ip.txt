; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\ip.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ip.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\ip.crf lwip-1.4.1\src\core\ipv4\ip.c]
                          ARM

                          AREA ||i.ip_input||, CODE, READONLY, ALIGN=2

                  ip_input PROC
;;;304    err_t
;;;305    ip_input(struct pbuf *p, struct netif *inp)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;306    {
000004  e1a06000          MOV      r6,r0
000008  e1a07001          MOV      r7,r1
;;;307      struct ip_hdr *iphdr;
;;;308      struct netif *netif;
;;;309      u16_t iphdr_hlen;
;;;310      u16_t iphdr_len;
;;;311    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;312      int check_ip_src=1;
00000c  e3a0a001          MOV      r10,#1
;;;313    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;314    
;;;315      IP_STATS_INC(ip.recv);
;;;316      snmp_inc_ipinreceives();
;;;317    
;;;318      /* identify the IP header */
;;;319      iphdr = (struct ip_hdr *)p->payload;
000010  e5964004          LDR      r4,[r6,#4]
;;;320      if (IPH_V(iphdr) != 4) {
000014  e5d40000          LDRB     r0,[r4,#0]
000018  e3a01004          MOV      r1,#4
00001c  e1510240          CMP      r1,r0,ASR #4
000020  0a000003          BEQ      |L1.52|
;;;321        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
;;;322        ip_debug_print(p);
;;;323        pbuf_free(p);
000024  e1a00006          MOV      r0,r6
000028  ebfffffe          BL       pbuf_free
;;;324        IP_STATS_INC(ip.err);
;;;325        IP_STATS_INC(ip.drop);
;;;326        snmp_inc_ipinhdrerrors();
;;;327        return ERR_OK;
00002c  e3a00000          MOV      r0,#0
                  |L1.48|
;;;328      }
;;;329    
;;;330    #ifdef LWIP_HOOK_IP4_INPUT
;;;331      if (LWIP_HOOK_IP4_INPUT(p, inp)) {
;;;332        /* the packet has been eaten */
;;;333        return ERR_OK;
;;;334      }
;;;335    #endif
;;;336    
;;;337      /* obtain IP header length in number of 32-bit words */
;;;338      iphdr_hlen = IPH_HL(iphdr);
;;;339      /* calculate IP header length in bytes */
;;;340      iphdr_hlen *= 4;
;;;341      /* obtain ip length in bytes */
;;;342      iphdr_len = ntohs(IPH_LEN(iphdr));
;;;343    
;;;344      /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
;;;345      if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
;;;346        if (iphdr_hlen > p->len) {
;;;347          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;348            ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
;;;349            iphdr_hlen, p->len));
;;;350        }
;;;351        if (iphdr_len > p->tot_len) {
;;;352          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;353            ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
;;;354            iphdr_len, p->tot_len));
;;;355        }
;;;356        /* free (drop) packet pbufs */
;;;357        pbuf_free(p);
;;;358        IP_STATS_INC(ip.lenerr);
;;;359        IP_STATS_INC(ip.drop);
;;;360        snmp_inc_ipindiscards();
;;;361        return ERR_OK;
;;;362      }
;;;363    
;;;364      /* verify checksum */
;;;365    #if CHECKSUM_CHECK_IP
;;;366      if (inet_chksum(iphdr, iphdr_hlen) != 0) {
;;;367    
;;;368        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;369          ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
;;;370        ip_debug_print(p);
;;;371        pbuf_free(p);
;;;372        IP_STATS_INC(ip.chkerr);
;;;373        IP_STATS_INC(ip.drop);
;;;374        snmp_inc_ipinhdrerrors();
;;;375        return ERR_OK;
;;;376      }
;;;377    #endif
;;;378    
;;;379      /* Trim pbuf. This should have been done at the netif layer,
;;;380       * but we'll do it anyway just to be sure that its done. */
;;;381      pbuf_realloc(p, iphdr_len);
;;;382    
;;;383      /* copy IP addresses to aligned ip_addr_t */
;;;384      ip_addr_copy(current_iphdr_dest, iphdr->dest);
;;;385      ip_addr_copy(current_iphdr_src, iphdr->src);
;;;386    
;;;387      /* match packet against an interface, i.e. is this packet for us? */
;;;388    #if LWIP_IGMP
;;;389      if (ip_addr_ismulticast(&current_iphdr_dest)) {
;;;390        if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
;;;391          netif = inp;
;;;392        } else {
;;;393          netif = NULL;
;;;394        }
;;;395      } else
;;;396    #endif /* LWIP_IGMP */
;;;397      {
;;;398        /* start trying with inp. if that's not acceptable, start walking the
;;;399           list of configured netifs.
;;;400           'first' is used as a boolean to mark whether we started walking the list */
;;;401        int first = 1;
;;;402        netif = inp;
;;;403        do {
;;;404          LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
;;;405              ip4_addr_get_u32(&iphdr->dest), ip4_addr_get_u32(&netif->ip_addr),
;;;406              ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
;;;407              ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
;;;408              ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));
;;;409    
;;;410          /* interface is up and configured? */
;;;411          if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
;;;412            /* unicast to this interface address? */
;;;413            if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
;;;414                /* or broadcast on this interface network address? */
;;;415                ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
;;;416              LWIP_DEBUGF(IP_DEBUG, ("ip_input: packet accepted on interface %c%c\n",
;;;417                  netif->name[0], netif->name[1]));
;;;418              /* break out of for loop */
;;;419              break;
;;;420            }
;;;421    #if LWIP_AUTOIP
;;;422            /* connections to link-local addresses must persist after changing
;;;423               the netif's address (RFC3927 ch. 1.9) */
;;;424            if ((netif->autoip != NULL) &&
;;;425                ip_addr_cmp(&current_iphdr_dest, &(netif->autoip->llipaddr))) {
;;;426              LWIP_DEBUGF(IP_DEBUG, ("ip_input: LLA packet accepted on interface %c%c\n",
;;;427                  netif->name[0], netif->name[1]));
;;;428              /* break out of for loop */
;;;429              break;
;;;430            }
;;;431    #endif /* LWIP_AUTOIP */
;;;432          }
;;;433          if (first) {
;;;434            first = 0;
;;;435            netif = netif_list;
;;;436          } else {
;;;437            netif = netif->next;
;;;438          }
;;;439          if (netif == inp) {
;;;440            netif = netif->next;
;;;441          }
;;;442        } while(netif != NULL);
;;;443      }
;;;444    
;;;445    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;446      /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
;;;447       * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
;;;448       * According to RFC 1542 section 3.1.1, referred by RFC 2131).
;;;449       *
;;;450       * If you want to accept private broadcast communication while a netif is down,
;;;451       * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
;;;452       *
;;;453       * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
;;;454       */
;;;455      if (netif == NULL) {
;;;456        /* remote port is DHCP server? */
;;;457        if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
;;;458          struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
;;;459          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
;;;460            ntohs(udphdr->dest)));
;;;461          if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
;;;462            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
;;;463            netif = inp;
;;;464            check_ip_src = 0;
;;;465          }
;;;466        }
;;;467      }
;;;468    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;469    
;;;470      /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
;;;471    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;472      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
;;;473      if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
;;;474    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;475      {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
;;;476             (ip_addr_ismulticast(&current_iphdr_src))) {
;;;477          /* packet source is not valid */
;;;478          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
;;;479          /* free (drop) packet pbufs */
;;;480          pbuf_free(p);
;;;481          IP_STATS_INC(ip.drop);
;;;482          snmp_inc_ipinaddrerrors();
;;;483          snmp_inc_ipindiscards();
;;;484          return ERR_OK;
;;;485        }
;;;486      }
;;;487    
;;;488      /* packet not for us? */
;;;489      if (netif == NULL) {
;;;490        /* packet not for us, route or discard */
;;;491        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: packet not for us.\n"));
;;;492    #if IP_FORWARD
;;;493        /* non-broadcast packet? */
;;;494        if (!ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
;;;495          /* try to forward IP packet on (other) interfaces */
;;;496          ip_forward(p, iphdr, inp);
;;;497        } else
;;;498    #endif /* IP_FORWARD */
;;;499        {
;;;500          snmp_inc_ipinaddrerrors();
;;;501          snmp_inc_ipindiscards();
;;;502        }
;;;503        pbuf_free(p);
;;;504        return ERR_OK;
;;;505      }
;;;506      /* packet consists of multiple fragments? */
;;;507      if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
;;;508    #if IP_REASSEMBLY /* packet fragment reassembly code present? */
;;;509        LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
;;;510          ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
;;;511        /* reassemble the packet*/
;;;512        p = ip_reass(p);
;;;513        /* packet not fully reassembled yet? */
;;;514        if (p == NULL) {
;;;515          return ERR_OK;
;;;516        }
;;;517        iphdr = (struct ip_hdr *)p->payload;
;;;518    #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
;;;519        pbuf_free(p);
;;;520        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
;;;521          ntohs(IPH_OFFSET(iphdr))));
;;;522        IP_STATS_INC(ip.opterr);
;;;523        IP_STATS_INC(ip.drop);
;;;524        /* unsupported protocol feature */
;;;525        snmp_inc_ipinunknownprotos();
;;;526        return ERR_OK;
;;;527    #endif /* IP_REASSEMBLY */
;;;528      }
;;;529    
;;;530    #if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
;;;531    
;;;532    #if LWIP_IGMP
;;;533      /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
;;;534      if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
;;;535    #else
;;;536      if (iphdr_hlen > IP_HLEN) {
;;;537    #endif /* LWIP_IGMP */
;;;538        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
;;;539        pbuf_free(p);
;;;540        IP_STATS_INC(ip.opterr);
;;;541        IP_STATS_INC(ip.drop);
;;;542        /* unsupported protocol feature */
;;;543        snmp_inc_ipinunknownprotos();
;;;544        return ERR_OK;
;;;545      }
;;;546    #endif /* IP_OPTIONS_ALLOWED == 0 */
;;;547    
;;;548      /* send to upper layers */
;;;549      LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
;;;550      ip_debug_print(p);
;;;551      LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
;;;552    
;;;553      current_netif = inp;
;;;554      current_header = iphdr;
;;;555    
;;;556    #if LWIP_RAW
;;;557      /* raw input did not eat the packet? */
;;;558      if (raw_input(p, inp) == 0)
;;;559    #endif /* LWIP_RAW */
;;;560      {
;;;561        switch (IPH_PROTO(iphdr)) {
;;;562    #if LWIP_UDP
;;;563        case IP_PROTO_UDP:
;;;564    #if LWIP_UDPLITE
;;;565        case IP_PROTO_UDPLITE:
;;;566    #endif /* LWIP_UDPLITE */
;;;567          snmp_inc_ipindelivers();
;;;568          udp_input(p, inp);
;;;569          break;
;;;570    #endif /* LWIP_UDP */
;;;571    #if LWIP_TCP
;;;572        case IP_PROTO_TCP:
;;;573          snmp_inc_ipindelivers();
;;;574          tcp_input(p, inp);
;;;575          break;
;;;576    #endif /* LWIP_TCP */
;;;577    #if LWIP_ICMP
;;;578        case IP_PROTO_ICMP:
;;;579          snmp_inc_ipindelivers();
;;;580          icmp_input(p, inp);
;;;581          break;
;;;582    #endif /* LWIP_ICMP */
;;;583    #if LWIP_IGMP
;;;584        case IP_PROTO_IGMP:
;;;585          igmp_input(p, inp, &current_iphdr_dest);
;;;586          break;
;;;587    #endif /* LWIP_IGMP */
;;;588        default:
;;;589    #if LWIP_ICMP
;;;590          /* send ICMP destination protocol unreachable unless is was a broadcast */
;;;591          if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
;;;592              !ip_addr_ismulticast(&current_iphdr_dest)) {
;;;593            p->payload = iphdr;
;;;594            icmp_dest_unreach(p, ICMP_DUR_PROTO);
;;;595          }
;;;596    #endif /* LWIP_ICMP */
;;;597          pbuf_free(p);
;;;598    
;;;599          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));
;;;600    
;;;601          IP_STATS_INC(ip.proterr);
;;;602          IP_STATS_INC(ip.drop);
;;;603          snmp_inc_ipinunknownprotos();
;;;604        }
;;;605      }
;;;606    
;;;607      current_netif = NULL;
;;;608      current_header = NULL;
;;;609      ip_addr_set_any(&current_iphdr_src);
;;;610      ip_addr_set_any(&current_iphdr_dest);
;;;611    
;;;612      return ERR_OK;
;;;613    }
000030  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.52|
000034  e5d40000          LDRB     r0,[r4,#0]            ;338
000038  e200800f          AND      r8,r0,#0xf            ;338
00003c  e59f12e4          LDR      r1,|L1.808|
000040  e0018108          AND      r8,r1,r8,LSL #2       ;340
000044  e5d41003          LDRB     r1,[r4,#3]            ;342
000048  e5d42002          LDRB     r2,[r4,#2]            ;342
00004c  e1820401          ORR      r0,r2,r1,LSL #8       ;342
000050  ebfffffe          BL       lwip_ntohs
000054  e1a09000          MOV      r9,r0                 ;342
000058  e1d600ba          LDRH     r0,[r6,#0xa]          ;345
00005c  e1500008          CMP      r0,r8                 ;345
000060  ba000002          BLT      |L1.112|
000064  e1d600b8          LDRH     r0,[r6,#8]            ;345
000068  e1500009          CMP      r0,r9                 ;345
00006c  aa000003          BGE      |L1.128|
                  |L1.112|
000070  e1a00006          MOV      r0,r6                 ;357
000074  ebfffffe          BL       pbuf_free
000078  e3a00000          MOV      r0,#0                 ;361
00007c  eaffffeb          B        |L1.48|
                  |L1.128|
000080  e1a01008          MOV      r1,r8                 ;366
000084  e1a00004          MOV      r0,r4                 ;366
000088  ebfffffe          BL       inet_chksum
00008c  e3500000          CMP      r0,#0                 ;366
000090  0a000003          BEQ      |L1.164|
000094  e1a00006          MOV      r0,r6                 ;371
000098  ebfffffe          BL       pbuf_free
00009c  e3a00000          MOV      r0,#0                 ;375
0000a0  eaffffe2          B        |L1.48|
                  |L1.164|
0000a4  e1a01009          MOV      r1,r9                 ;381
0000a8  e1a00006          MOV      r0,r6                 ;381
0000ac  ebfffffe          BL       pbuf_realloc
0000b0  e2840010          ADD      r0,r4,#0x10           ;384
0000b4  ebfffffe          BL       __aeabi_uread4
0000b8  e59f126c          LDR      r1,|L1.812|
0000bc  e5810000          STR      r0,[r1,#0]            ;384  ; current_iphdr_dest
0000c0  e284000c          ADD      r0,r4,#0xc            ;385
0000c4  ebfffffe          BL       __aeabi_uread4
0000c8  e59f1260          LDR      r1,|L1.816|
0000cc  e5810000          STR      r0,[r1,#0]            ;385  ; current_iphdr_src
0000d0  e3a0b001          MOV      r11,#1                ;401
0000d4  e1a05007          MOV      r5,r7                 ;402
0000d8  e1a00000          MOV      r0,r0                 ;403
                  |L1.220|
0000dc  e5d5002d          LDRB     r0,[r5,#0x2d]         ;411
0000e0  e2000001          AND      r0,r0,#1              ;411
0000e4  e3500000          CMP      r0,#0                 ;411
0000e8  0a000011          BEQ      |L1.308|
0000ec  e2850004          ADD      r0,r5,#4              ;411
0000f0  e3500000          CMP      r0,#0                 ;411
0000f4  0a00000e          BEQ      |L1.308|
0000f8  e5950004          LDR      r0,[r5,#4]            ;411
0000fc  e3500000          CMP      r0,#0                 ;411
000100  0a00000b          BEQ      |L1.308|
000104  e59f0220          LDR      r0,|L1.812|
000108  e5900000          LDR      r0,[r0,#0]            ;413  ; current_iphdr_dest
00010c  e5951004          LDR      r1,[r5,#4]            ;413
000110  e1500001          CMP      r0,r1                 ;413
000114  0a000005          BEQ      |L1.304|
000118  e59f120c          LDR      r1,|L1.812|
00011c  e5910000          LDR      r0,[r1,#0]            ;415  ; current_iphdr_dest
000120  e1a01005          MOV      r1,r5                 ;415
000124  ebfffffe          BL       ip4_addr_isbroadcast
000128  e3500000          CMP      r0,#0                 ;415
00012c  0a000000          BEQ      |L1.308|
                  |L1.304|
000130  ea00000b          B        |L1.356|
                  |L1.308|
000134  e35b0000          CMP      r11,#0                ;433
000138  0a000003          BEQ      |L1.332|
00013c  e3a0b000          MOV      r11,#0                ;434
000140  e59f01ec          LDR      r0,|L1.820|
000144  e5905000          LDR      r5,[r0,#0]            ;435  ; netif_list
000148  ea000000          B        |L1.336|
                  |L1.332|
00014c  e5955000          LDR      r5,[r5,#0]            ;437
                  |L1.336|
000150  e1550007          CMP      r5,r7                 ;439
000154  1a000000          BNE      |L1.348|
000158  e5955000          LDR      r5,[r5,#0]            ;440
                  |L1.348|
00015c  e3550000          CMP      r5,#0                 ;442
000160  1affffdd          BNE      |L1.220|
                  |L1.356|
000164  e1a00000          MOV      r0,r0                 ;419
000168  e3550000          CMP      r5,#0                 ;455
00016c  1a00000b          BNE      |L1.416|
000170  e5d40009          LDRB     r0,[r4,#9]            ;457
000174  e3500011          CMP      r0,#0x11              ;457
000178  1a000008          BNE      |L1.416|
00017c  e0840008          ADD      r0,r4,r8              ;458
000180  e5d01003          LDRB     r1,[r0,#3]            ;461
000184  e5d02002          LDRB     r2,[r0,#2]            ;461
000188  e1821401          ORR      r1,r2,r1,LSL #8       ;461
00018c  e3510b11          CMP      r1,#0x4400            ;461
000190  1a000001          BNE      |L1.412|
000194  e1a05007          MOV      r5,r7                 ;463
000198  e3a0a000          MOV      r10,#0                ;464
                  |L1.412|
00019c  e1a00000          MOV      r0,r0                 ;466
                  |L1.416|
0001a0  e35a0000          CMP      r10,#0                ;473
0001a4  0a000012          BEQ      |L1.500|
0001a8  e59f0180          LDR      r0,|L1.816|
0001ac  e5900000          LDR      r0,[r0,#0]            ;473  ; current_iphdr_src
0001b0  e3500000          CMP      r0,#0                 ;473
0001b4  0a00000e          BEQ      |L1.500|
0001b8  e59f1170          LDR      r1,|L1.816|
0001bc  e5910000          LDR      r0,[r1,#0]            ;475  ; current_iphdr_src
0001c0  e1a01007          MOV      r1,r7                 ;475
0001c4  ebfffffe          BL       ip4_addr_isbroadcast
0001c8  e3500000          CMP      r0,#0                 ;475
0001cc  1a000004          BNE      |L1.484|
0001d0  e59f0158          LDR      r0,|L1.816|
0001d4  e5d00000          LDRB     r0,[r0,#0]            ;476  ; current_iphdr_src
0001d8  e20000f0          AND      r0,r0,#0xf0           ;476
0001dc  e35000e0          CMP      r0,#0xe0              ;476
0001e0  1a000003          BNE      |L1.500|
                  |L1.484|
0001e4  e1a00006          MOV      r0,r6                 ;480
0001e8  ebfffffe          BL       pbuf_free
0001ec  e3a00000          MOV      r0,#0                 ;484
0001f0  eaffff8e          B        |L1.48|
                  |L1.500|
0001f4  e3550000          CMP      r5,#0                 ;489
0001f8  1a000003          BNE      |L1.524|
0001fc  e1a00006          MOV      r0,r6                 ;503
000200  ebfffffe          BL       pbuf_free
000204  e3a00000          MOV      r0,#0                 ;504
000208  eaffff88          B        |L1.48|
                  |L1.524|
00020c  e5d40007          LDRB     r0,[r4,#7]            ;507
000210  e5d41006          LDRB     r1,[r4,#6]            ;507
000214  e1810400          ORR      r0,r1,r0,LSL #8       ;507
000218  e59f1118          LDR      r1,|L1.824|
00021c  e0000001          AND      r0,r0,r1              ;507
000220  e3500000          CMP      r0,#0                 ;507
000224  0a000007          BEQ      |L1.584|
000228  e1a00006          MOV      r0,r6                 ;512
00022c  ebfffffe          BL       ip_reass
000230  e1a06000          MOV      r6,r0                 ;512
000234  e3560000          CMP      r6,#0                 ;514
000238  1a000001          BNE      |L1.580|
00023c  e3a00000          MOV      r0,#0                 ;515
000240  eaffff7a          B        |L1.48|
                  |L1.580|
000244  e5964004          LDR      r4,[r6,#4]            ;517
                  |L1.584|
000248  e59f00ec          LDR      r0,|L1.828|
00024c  e5807000          STR      r7,[r0,#0]            ;553  ; current_netif
000250  e59f00e8          LDR      r0,|L1.832|
000254  e5804000          STR      r4,[r0,#0]            ;554  ; current_header
000258  e5d40009          LDRB     r0,[r4,#9]            ;561
00025c  e3500001          CMP      r0,#1                 ;561
000260  0a00000c          BEQ      |L1.664|
000264  e3500006          CMP      r0,#6                 ;561
000268  0a000005          BEQ      |L1.644|
00026c  e3500011          CMP      r0,#0x11              ;561
000270  1a00000d          BNE      |L1.684|
000274  e1a01007          MOV      r1,r7                 ;568
000278  e1a00006          MOV      r0,r6                 ;568
00027c  ebfffffe          BL       udp_input
000280  ea00001c          B        |L1.760|
                  |L1.644|
000284  e1a00000          MOV      r0,r0                 ;572
000288  e1a01007          MOV      r1,r7                 ;574
00028c  e1a00006          MOV      r0,r6                 ;574
000290  ebfffffe          BL       tcp_input
000294  ea000017          B        |L1.760|
                  |L1.664|
000298  e1a00000          MOV      r0,r0                 ;578
00029c  e1a01007          MOV      r1,r7                 ;580
0002a0  e1a00006          MOV      r0,r6                 ;580
0002a4  ebfffffe          BL       icmp_input
0002a8  ea000012          B        |L1.760|
                  |L1.684|
0002ac  e1a00000          MOV      r0,r0                 ;588
0002b0  e59f1074          LDR      r1,|L1.812|
0002b4  e5910000          LDR      r0,[r1,#0]            ;591  ; current_iphdr_dest
0002b8  e1a01007          MOV      r1,r7                 ;591
0002bc  ebfffffe          BL       ip4_addr_isbroadcast
0002c0  e3500000          CMP      r0,#0                 ;591
0002c4  1a000008          BNE      |L1.748|
0002c8  e59f005c          LDR      r0,|L1.812|
0002cc  e5d00000          LDRB     r0,[r0,#0]            ;592  ; current_iphdr_dest
0002d0  e20000f0          AND      r0,r0,#0xf0           ;592
0002d4  e35000e0          CMP      r0,#0xe0              ;592
0002d8  0a000003          BEQ      |L1.748|
0002dc  e5864004          STR      r4,[r6,#4]            ;593
0002e0  e3a01002          MOV      r1,#2                 ;594
0002e4  e1a00006          MOV      r0,r6                 ;594
0002e8  ebfffffe          BL       icmp_dest_unreach
                  |L1.748|
0002ec  e1a00006          MOV      r0,r6                 ;597
0002f0  ebfffffe          BL       pbuf_free
0002f4  e1a00000          MOV      r0,r0                 ;561
                  |L1.760|
0002f8  e1a00000          MOV      r0,r0                 ;569
0002fc  e3a00000          MOV      r0,#0                 ;607
000300  e59f1034          LDR      r1,|L1.828|
000304  e5810000          STR      r0,[r1,#0]            ;607  ; current_netif
000308  e59f1030          LDR      r1,|L1.832|
00030c  e5810000          STR      r0,[r1,#0]            ;608  ; current_header
000310  e59f1018          LDR      r1,|L1.816|
000314  e5810000          STR      r0,[r1,#0]            ;609  ; current_iphdr_src
000318  e59f100c          LDR      r1,|L1.812|
00031c  e5810000          STR      r0,[r1,#0]            ;610  ; current_iphdr_dest
000320  e1a00000          MOV      r0,r0                 ;612
000324  eaffff41          B        |L1.48|
;;;614    
                          ENDP

                  |L1.808|
                          DCD      0x0000ffff
                  |L1.812|
                          DCD      current_iphdr_dest
                  |L1.816|
                          DCD      current_iphdr_src
                  |L1.820|
                          DCD      netif_list
                  |L1.824|
                          DCD      0x0000ff3f
                  |L1.828|
                          DCD      current_netif
                  |L1.832|
                          DCD      current_header

                          AREA ||i.ip_output||, CODE, READONLY, ALIGN=2

                  ip_output PROC
;;;817    err_t
;;;818    ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;819              u8_t ttl, u8_t tos, u8_t proto)
;;;820    {
000004  e1a05000          MOV      r5,r0
000008  e1a07001          MOV      r7,r1
00000c  e1a06002          MOV      r6,r2
000010  e1a08003          MOV      r8,r3
000014  e59d9030          LDR      r9,[sp,#0x30]
000018  e59da034          LDR      r10,[sp,#0x34]
;;;821      struct netif *netif;
;;;822    
;;;823      /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
;;;824         gets altered as the packet is passed down the stack */
;;;825      LWIP_ASSERT("p->ref == 1", p->ref == 1);
00001c  e1a00000          MOV      r0,r0
000020  e1d500be          LDRH     r0,[r5,#0xe]
000024  e3500001          CMP      r0,#1
000028  0a000006          BEQ      |L2.72|
00002c  e1a00000          MOV      r0,r0
000030  e28f304c          ADR      r3,|L2.132|
000034  e59f2068          LDR      r2,|L2.164|
000038  e28f1068          ADR      r1,|L2.168|
00003c  e28f0070          ADR      r0,|L2.180|
000040  ebfffffe          BL       sysprintf
000044  e1a00000          MOV      r0,r0
                  |L2.72|
000048  e1a00000          MOV      r0,r0
;;;826    
;;;827      if ((netif = ip_route(dest)) == NULL) {
00004c  e1a00006          MOV      r0,r6
000050  ebfffffe          BL       ip_route
000054  e2504000          SUBS     r4,r0,#0
000058  1a000001          BNE      |L2.100|
;;;828        LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;829          ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
;;;830        IP_STATS_INC(ip.rterr);
;;;831        return ERR_RTE;
00005c  e3e00003          MVN      r0,#3
                  |L2.96|
;;;832      }
;;;833    
;;;834      return ip_output_if(p, src, dest, ttl, tos, proto, netif);
;;;835    }
000060  e8bd8ffe          POP      {r1-r11,pc}
                  |L2.100|
000064  e1a03008          MOV      r3,r8                 ;834
000068  e1a02006          MOV      r2,r6                 ;834
00006c  e1a01007          MOV      r1,r7                 ;834
000070  e1a00005          MOV      r0,r5                 ;834
000074  e58d4008          STR      r4,[sp,#8]            ;834
000078  e88d0600          STM      sp,{r9,r10}           ;834
00007c  ebfffffe          BL       ip_output_if
000080  eafffff6          B        |L2.96|
;;;836    
                          ENDP

                  |L2.132|
000084  6c776970          DCB      "lwip-1.4.1\\src\\core\\ipv4\\ip.c",0
000088  2d312e34
00008c  2e315c73
000090  72635c63
000094  6f72655c
000098  69707634
00009c  5c69702e
0000a0  6300    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L2.164|
                          DCD      0x00000339
                  |L2.168|
0000a8  702d3e72          DCB      "p->ref == 1",0
0000ac  6566203d
0000b0  3d203100
                  |L2.180|
0000b4  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000b8  7274696f
0000bc  6e202225
0000c0  73222066
0000c4  61696c65
0000c8  64206174
0000cc  206c696e
0000d0  65202564
0000d4  20696e20
0000d8  25730a00

                          AREA ||i.ip_output_if||, CODE, READONLY, ALIGN=2

                  ip_output_if PROC
;;;640    err_t
;;;641    ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;642                 u8_t ttl, u8_t tos,
;;;643                 u8_t proto, struct netif *netif)
;;;644    {
000004  e1a06000          MOV      r6,r0
000008  e1a07001          MOV      r7,r1
00000c  e1a08002          MOV      r8,r2
000010  e1a09003          MOV      r9,r3
000014  e59da030          LDR      r10,[sp,#0x30]
;;;645    #if IP_OPTIONS_SEND
;;;646      return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
;;;647    }
;;;648    
;;;649    /**
;;;650     * Same as ip_output_if() but with the possibility to include IP options:
;;;651     *
;;;652     * @ param ip_options pointer to the IP options, copied into the IP header
;;;653     * @ param optlen length of ip_options
;;;654     */
;;;655    err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
;;;656           u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
;;;657           u16_t optlen)
;;;658    {
;;;659    #endif /* IP_OPTIONS_SEND */
;;;660      struct ip_hdr *iphdr;
;;;661      ip_addr_t dest_addr;
;;;662    #if CHECKSUM_GEN_IP_INLINE
;;;663      u32_t chk_sum = 0;
000018  e3a05000          MOV      r5,#0
;;;664    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;665    
;;;666      /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
;;;667         gets altered as the packet is passed down the stack */
;;;668      LWIP_ASSERT("p->ref == 1", p->ref == 1);
00001c  e1a00000          MOV      r0,r0
000020  e1d600be          LDRH     r0,[r6,#0xe]
000024  e3500001          CMP      r0,#1
000028  0a000006          BEQ      |L3.72|
00002c  e1a00000          MOV      r0,r0
000030  e28f3f7f          ADR      r3,|L3.564|
000034  e3a02fa7          MOV      r2,#0x29c
000038  e28f1f85          ADR      r1,|L3.596|
00003c  e28f0f87          ADR      r0,|L3.608|
000040  ebfffffe          BL       sysprintf
000044  e1a00000          MOV      r0,r0
                  |L3.72|
000048  e1a00000          MOV      r0,r0
;;;669    
;;;670      snmp_inc_ipoutrequests();
;;;671    
;;;672      /* Should the IP header be generated or is it already included in p? */
;;;673      if (dest != IP_HDRINCL) {
00004c  e3580000          CMP      r8,#0
000050  0a00006c          BEQ      |L3.520|
;;;674        u16_t ip_hlen = IP_HLEN;
000054  e3a0b014          MOV      r11,#0x14
;;;675    #if IP_OPTIONS_SEND
;;;676        u16_t optlen_aligned = 0;
;;;677        if (optlen != 0) {
;;;678    #if CHECKSUM_GEN_IP_INLINE
;;;679          int i;
;;;680    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;681          /* round up to a multiple of 4 */
;;;682          optlen_aligned = ((optlen + 3) & ~3);
;;;683          ip_hlen += optlen_aligned;
;;;684          /* First write in the IP options */
;;;685          if (pbuf_header(p, optlen_aligned)) {
;;;686            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
;;;687            IP_STATS_INC(ip.err);
;;;688            snmp_inc_ipoutdiscards();
;;;689            return ERR_BUF;
;;;690          }
;;;691          MEMCPY(p->payload, ip_options, optlen);
;;;692          if (optlen < optlen_aligned) {
;;;693            /* zero the remaining bytes */
;;;694            memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
;;;695          }
;;;696    #if CHECKSUM_GEN_IP_INLINE
;;;697          for (i = 0; i < optlen_aligned/2; i++) {
;;;698            chk_sum += ((u16_t*)p->payload)[i];
;;;699          }
;;;700    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;701        }
;;;702    #endif /* IP_OPTIONS_SEND */
;;;703        /* generate IP header */
;;;704        if (pbuf_header(p, IP_HLEN)) {
000058  e3a01014          MOV      r1,#0x14
00005c  e1a00006          MOV      r0,r6
000060  ebfffffe          BL       pbuf_header
000064  e3500000          CMP      r0,#0
000068  0a000001          BEQ      |L3.116|
;;;705          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));
;;;706    
;;;707          IP_STATS_INC(ip.err);
;;;708          snmp_inc_ipoutdiscards();
;;;709          return ERR_BUF;
00006c  e3e00001          MVN      r0,#1
                  |L3.112|
;;;710        }
;;;711    
;;;712        iphdr = (struct ip_hdr *)p->payload;
;;;713        LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
;;;714                   (p->len >= sizeof(struct ip_hdr)));
;;;715    
;;;716        IPH_TTL_SET(iphdr, ttl);
;;;717        IPH_PROTO_SET(iphdr, proto);
;;;718    #if CHECKSUM_GEN_IP_INLINE
;;;719        chk_sum += LWIP_MAKE_U16(proto, ttl);
;;;720    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;721    
;;;722        /* dest cannot be NULL here */
;;;723        ip_addr_copy(iphdr->dest, *dest);
;;;724    #if CHECKSUM_GEN_IP_INLINE
;;;725        chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
;;;726        chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
;;;727    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;728    
;;;729        IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
;;;730        IPH_TOS_SET(iphdr, tos);
;;;731    #if CHECKSUM_GEN_IP_INLINE
;;;732        chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
;;;733    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;734        IPH_LEN_SET(iphdr, htons(p->tot_len));
;;;735    #if CHECKSUM_GEN_IP_INLINE
;;;736        chk_sum += iphdr->_len;
;;;737    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;738        IPH_OFFSET_SET(iphdr, 0);
;;;739        IPH_ID_SET(iphdr, htons(ip_id));
;;;740    #if CHECKSUM_GEN_IP_INLINE
;;;741        chk_sum += iphdr->_id;
;;;742    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;743        ++ip_id;
;;;744    
;;;745        if (ip_addr_isany(src)) {
;;;746          ip_addr_copy(iphdr->src, netif->ip_addr);
;;;747        } else {
;;;748          /* src cannot be NULL here */
;;;749          ip_addr_copy(iphdr->src, *src);
;;;750        }
;;;751    
;;;752    #if CHECKSUM_GEN_IP_INLINE
;;;753        chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
;;;754        chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
;;;755        chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
;;;756        chk_sum = (chk_sum >> 16) + chk_sum;
;;;757        chk_sum = ~chk_sum;
;;;758        iphdr->_chksum = chk_sum; /* network order */
;;;759    #else /* CHECKSUM_GEN_IP_INLINE */
;;;760        IPH_CHKSUM_SET(iphdr, 0);
;;;761    #if CHECKSUM_GEN_IP
;;;762        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
;;;763    #endif
;;;764    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;765      } else {
;;;766        /* IP header already included in p */
;;;767        iphdr = (struct ip_hdr *)p->payload;
;;;768        ip_addr_copy(dest_addr, iphdr->dest);
;;;769        dest = &dest_addr;
;;;770      }
;;;771    
;;;772      IP_STATS_INC(ip.xmit);
;;;773    
;;;774      LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
;;;775      ip_debug_print(p);
;;;776    
;;;777    #if ENABLE_LOOPBACK
;;;778      if (ip_addr_cmp(dest, &netif->ip_addr)) {
;;;779        /* Packet to self, enqueue it for loopback */
;;;780        LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
;;;781        return netif_loop_output(netif, p, dest);
;;;782      }
;;;783    #if LWIP_IGMP
;;;784      if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
;;;785        netif_loop_output(netif, p, dest);
;;;786      }
;;;787    #endif /* LWIP_IGMP */
;;;788    #endif /* ENABLE_LOOPBACK */
;;;789    #if IP_FRAG
;;;790      /* don't fragment if interface has mtu set to 0 [loopif] */
;;;791      if (netif->mtu && (p->tot_len > netif->mtu)) {
;;;792        return ip_frag(p, netif, dest);
;;;793      }
;;;794    #endif /* IP_FRAG */
;;;795    
;;;796      LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
;;;797      return netif->output(netif, p, dest);
;;;798    }
000070  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.116|
000074  e5964004          LDR      r4,[r6,#4]            ;712
000078  e1a00000          MOV      r0,r0                 ;713
00007c  e1d600ba          LDRH     r0,[r6,#0xa]          ;713
000080  e3500014          CMP      r0,#0x14              ;713
000084  2a000006          BCS      |L3.164|
000088  e1a00000          MOV      r0,r0                 ;713
00008c  e28f3e1a          ADR      r3,|L3.564|
000090  e59f21f0          LDR      r2,|L3.648|
000094  e28f1e1f          ADR      r1,|L3.652|
000098  e28f0d07          ADR      r0,|L3.608|
00009c  ebfffffe          BL       sysprintf
0000a0  e1a00000          MOV      r0,r0                 ;713
                  |L3.164|
0000a4  e1a00000          MOV      r0,r0                 ;713
0000a8  e5c49008          STRB     r9,[r4,#8]            ;716
0000ac  e59d002c          LDR      r0,[sp,#0x2c]         ;717
0000b0  e5c40009          STRB     r0,[r4,#9]            ;717
0000b4  e59d002c          LDR      r0,[sp,#0x2c]         ;719
0000b8  e1890400          ORR      r0,r9,r0,LSL #8       ;719
0000bc  e0855000          ADD      r5,r5,r0              ;719
0000c0  e2841010          ADD      r1,r4,#0x10           ;723
0000c4  e5980000          LDR      r0,[r8,#0]            ;723
0000c8  ebfffffe          BL       __aeabi_uwrite4
0000cc  e2840010          ADD      r0,r4,#0x10           ;725
0000d0  ebfffffe          BL       __aeabi_uread4
0000d4  e1a00800          LSL      r0,r0,#16             ;725
0000d8  e1a00820          LSR      r0,r0,#16             ;725
0000dc  e0855000          ADD      r5,r5,r0              ;725
0000e0  e2840010          ADD      r0,r4,#0x10           ;726
0000e4  ebfffffe          BL       __aeabi_uread4
0000e8  e0855820          ADD      r5,r5,r0,LSR #16      ;726
0000ec  e1a01fcb          ASR      r1,r11,#31            ;729
0000f0  e08b1f21          ADD      r1,r11,r1,LSR #30     ;729
0000f4  e1a01b01          LSL      r1,r1,#22             ;729
0000f8  e1a01c21          LSR      r1,r1,#24             ;729
0000fc  e3811040          ORR      r1,r1,#0x40           ;729
000100  e5c41000          STRB     r1,[r4,#0]            ;729
000104  e59d0028          LDR      r0,[sp,#0x28]         ;730
000108  e5c40001          STRB     r0,[r4,#1]            ;730
00010c  e5d41000          LDRB     r1,[r4,#0]            ;732
000110  e59d0028          LDR      r0,[sp,#0x28]         ;732
000114  e1810400          ORR      r0,r1,r0,LSL #8       ;732
000118  e0855000          ADD      r5,r5,r0              ;732
00011c  e1d600b8          LDRH     r0,[r6,#8]            ;734
000120  ebfffffe          BL       lwip_htons
000124  e5c40002          STRB     r0,[r4,#2]            ;734
000128  e1a00420          LSR      r0,r0,#8              ;734
00012c  e5c40003          STRB     r0,[r4,#3]            ;734
000130  e5d40003          LDRB     r0,[r4,#3]            ;736
000134  e5d41002          LDRB     r1,[r4,#2]            ;736
000138  e1810400          ORR      r0,r1,r0,LSL #8       ;736
00013c  e0855000          ADD      r5,r5,r0              ;736
000140  e3a00000          MOV      r0,#0                 ;738
000144  e5c40006          STRB     r0,[r4,#6]            ;738
000148  e5c40007          STRB     r0,[r4,#7]            ;738
00014c  e59f0168          LDR      r0,|L3.700|
000150  e1d000b0          LDRH     r0,[r0,#0]            ;739  ; ip_id
000154  ebfffffe          BL       lwip_htons
000158  e5c40004          STRB     r0,[r4,#4]            ;739
00015c  e1a00420          LSR      r0,r0,#8              ;739
000160  e5c40005          STRB     r0,[r4,#5]            ;739
000164  e5d40005          LDRB     r0,[r4,#5]            ;741
000168  e5d41004          LDRB     r1,[r4,#4]            ;741
00016c  e1810400          ORR      r0,r1,r0,LSL #8       ;741
000170  e0855000          ADD      r5,r5,r0              ;741
000174  e59f0140          LDR      r0,|L3.700|
000178  e1d000b0          LDRH     r0,[r0,#0]            ;743  ; ip_id
00017c  e2800001          ADD      r0,r0,#1              ;743
000180  e3c00801          BIC      r0,r0,#0x10000        ;743
000184  e59f1130          LDR      r1,|L3.700|
000188  e1c100b0          STRH     r0,[r1,#0]            ;743  ; ip_id
00018c  e3570000          CMP      r7,#0                 ;745
000190  0a000002          BEQ      |L3.416|
000194  e5970000          LDR      r0,[r7,#0]            ;745
000198  e3500000          CMP      r0,#0                 ;745
00019c  1a000003          BNE      |L3.432|
                  |L3.416|
0001a0  e284100c          ADD      r1,r4,#0xc            ;746
0001a4  e59a0004          LDR      r0,[r10,#4]           ;746
0001a8  ebfffffe          BL       __aeabi_uwrite4
0001ac  ea000002          B        |L3.444|
                  |L3.432|
0001b0  e284100c          ADD      r1,r4,#0xc            ;749
0001b4  e5970000          LDR      r0,[r7,#0]            ;749
0001b8  ebfffffe          BL       __aeabi_uwrite4
                  |L3.444|
0001bc  e284000c          ADD      r0,r4,#0xc            ;753
0001c0  ebfffffe          BL       __aeabi_uread4
0001c4  e1a00800          LSL      r0,r0,#16             ;753
0001c8  e1a00820          LSR      r0,r0,#16             ;753
0001cc  e0855000          ADD      r5,r5,r0              ;753
0001d0  e284000c          ADD      r0,r4,#0xc            ;754
0001d4  ebfffffe          BL       __aeabi_uread4
0001d8  e0855820          ADD      r5,r5,r0,LSR #16      ;754
0001dc  e1a00805          LSL      r0,r5,#16             ;755
0001e0  e1a00820          LSR      r0,r0,#16             ;755
0001e4  e0805825          ADD      r5,r0,r5,LSR #16      ;755
0001e8  e0855825          ADD      r5,r5,r5,LSR #16      ;756
0001ec  e1e05005          MVN      r5,r5                 ;757
0001f0  e1a00805          LSL      r0,r5,#16             ;758
0001f4  e1a00820          LSR      r0,r0,#16             ;758
0001f8  e5c4000a          STRB     r0,[r4,#0xa]          ;758
0001fc  e1a00420          LSR      r0,r0,#8              ;758
000200  e5c4000b          STRB     r0,[r4,#0xb]          ;758
000204  ea000004          B        |L3.540|
                  |L3.520|
000208  e5964004          LDR      r4,[r6,#4]            ;767
00020c  e2840010          ADD      r0,r4,#0x10           ;768
000210  ebfffffe          BL       __aeabi_uread4
000214  e58d0000          STR      r0,[sp,#0]            ;768
000218  e1a0800d          MOV      r8,sp                 ;769
                  |L3.540|
00021c  e1a02008          MOV      r2,r8                 ;797
000220  e1a01006          MOV      r1,r6                 ;797
000224  e59a3014          LDR      r3,[r10,#0x14]        ;797
000228  e1a0000a          MOV      r0,r10                ;797
00022c  e12fff33          BLX      r3                    ;797
000230  eaffff8e          B        |L3.112|
                  |L3.564|
000234  6c776970          DCB      "lwip-1.4.1\\src\\core\\ipv4\\ip.c",0
000238  2d312e34
00023c  2e315c73
000240  72635c63
000244  6f72655c
000248  69707634
00024c  5c69702e
000250  6300    
000252  00                DCB      0
000253  00                DCB      0
                  |L3.596|
000254  702d3e72          DCB      "p->ref == 1",0
000258  6566203d
00025c  3d203100
                  |L3.608|
000260  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000264  7274696f
000268  6e202225
00026c  73222066
000270  61696c65
000274  64206174
000278  206c696e
00027c  65202564
000280  20696e20
000284  25730a00
                  |L3.648|
                          DCD      0x000002c9
                  |L3.652|
00028c  63686563          DCB      "check that first pbuf can hold struct ip_hdr",0
000290  6b207468
000294  61742066
000298  69727374
00029c  20706275
0002a0  66206361
0002a4  6e20686f
0002a8  6c642073
0002ac  74727563
0002b0  74206970
0002b4  5f686472
0002b8  00      
0002b9  00                DCB      0
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L3.700|
                          DCD      ip_id
                          ENDP


                          AREA ||i.ip_route||, CODE, READONLY, ALIGN=2

                  ip_route PROC
;;;123    struct netif *
;;;124    ip_route(ip_addr_t *dest)
000000  e1a02000          MOV      r2,r0
;;;125    {
;;;126      struct netif *netif;
;;;127    
;;;128    #ifdef LWIP_HOOK_IP4_ROUTE
;;;129      netif = LWIP_HOOK_IP4_ROUTE(dest);
;;;130      if (netif != NULL) {
;;;131        return netif;
;;;132      }
;;;133    #endif
;;;134    
;;;135      /* iterate through netifs */
;;;136      for (netif = netif_list; netif != NULL; netif = netif->next) {
000004  e59f0080          LDR      r0,|L4.140|
000008  e5901000          LDR      r1,[r0,#0]  ; netif_list
00000c  ea00000d          B        |L4.72|
                  |L4.16|
;;;137        /* network mask matches? */
;;;138        if (netif_is_up(netif)) {
000010  e5d1002d          LDRB     r0,[r1,#0x2d]
000014  e2000001          AND      r0,r0,#1
000018  e3500000          CMP      r0,#0
00001c  0a000008          BEQ      |L4.68|
;;;139          if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
000020  e5920000          LDR      r0,[r2,#0]
000024  e5913008          LDR      r3,[r1,#8]
000028  e0000003          AND      r0,r0,r3
00002c  e9911008          LDMIB    r1,{r3,r12}
000030  e003300c          AND      r3,r3,r12
000034  e1500003          CMP      r0,r3
000038  1a000001          BNE      |L4.68|
;;;140            /* return netif on which to forward IP packet */
;;;141            return netif;
00003c  e1a00001          MOV      r0,r1
                  |L4.64|
;;;142          }
;;;143        }
;;;144      }
;;;145      if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
;;;146        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;147          ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
;;;148        IP_STATS_INC(ip.rterr);
;;;149        snmp_inc_ipoutnoroutes();
;;;150        return NULL;
;;;151      }
;;;152      /* no matching netif found, use default netif */
;;;153      return netif_default;
;;;154    }
000040  e12fff1e          BX       lr
                  |L4.68|
000044  e5911000          LDR      r1,[r1,#0]            ;136
                  |L4.72|
000048  e3510000          CMP      r1,#0                 ;136
00004c  1affffef          BNE      |L4.16|
000050  e59f0038          LDR      r0,|L4.144|
000054  e5900000          LDR      r0,[r0,#0]            ;145  ; netif_default
000058  e3500000          CMP      r0,#0                 ;145
00005c  0a000005          BEQ      |L4.120|
000060  e59f0028          LDR      r0,|L4.144|
000064  e5900000          LDR      r0,[r0,#0]            ;145  ; netif_default
000068  e5d0002d          LDRB     r0,[r0,#0x2d]         ;145
00006c  e2000001          AND      r0,r0,#1              ;145
000070  e3500000          CMP      r0,#0                 ;145
000074  1a000001          BNE      |L4.128|
                  |L4.120|
000078  e3a00000          MOV      r0,#0                 ;150
00007c  eaffffef          B        |L4.64|
                  |L4.128|
000080  e59f0008          LDR      r0,|L4.144|
000084  e5900000          LDR      r0,[r0,#0]            ;153  ; netif_default
000088  eaffffec          B        |L4.64|
;;;155    
                          ENDP

                  |L4.140|
                          DCD      netif_list
                  |L4.144|
                          DCD      netif_default

                          AREA ||.data||, DATA, ALIGN=2

                  current_netif
                          DCD      0x00000000
                  current_header
                          DCD      0x00000000
                  current_iphdr_src
                          DCD      0x00000000
                  current_iphdr_dest
                          DCD      0x00000000
                  ip_id
000010  0000              DCB      0x00,0x00
