; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=ARM926EJ-S --apcs=interwork -O0 --diag_suppress=9931,1295,177,550 -I.\Driver\Include -I.\lwip-1.4.1\include -I.\lwip-1.4.1\src\include\ipv4 -I.\lwip-1.4.1\src\include\ -I.\FreeRTOS\Source\include -I.\FreeRTOS\Source\portable\MemMang -I.\FreeRTOS\Source\portable\RVDS\ARM9_NUC970 -I.\lwip-1.4.1 -I"C:\Program Study\Keil5\ARM\RV31\INC" -I"C:\Program Study\Keil5\ARM\CMSIS\Include" -I"C:\Program Study\Keil5\ARM\INC\Toshiba" -D__UVISION_VERSION=524 --omf_browse=.\obj\main.crf main.c]
                          ARM

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;327    
;;;328    int main(void)
000000  e92d401c          PUSH     {r2-r4,lr}
;;;329    {
;;;330        sysDisableCache();
000004  ebfffffe          BL       sysDisableCache
;;;331        sysFlushCache(I_D_CACHE);
000008  e3a00008          MOV      r0,#8
00000c  ebfffffe          BL       sysFlushCache
;;;332        sysEnableCache(CACHE_WRITE_BACK);
000010  e3a00000          MOV      r0,#0
000014  ebfffffe          BL       sysEnableCache
;;;333        sysInitializeUART();
000018  ebfffffe          BL       sysInitializeUART
;;;334        
;;;335        sysprintf("system setup\n");
00001c  e28f0030          ADR      r0,|L1.84|
000020  ebfffffe          BL       sysprintf
;;;336        
;;;337    
;;;338        xTaskCreate( tcp_client_task, "tcp_client_task", 512, NULL, configMAX_PRIORITIES-3, NULL );
000024  e3a00000          MOV      r0,#0
000028  e3a0101d          MOV      r1,#0x1d
00002c  e58d0004          STR      r0,[sp,#4]
000030  e1a03000          MOV      r3,r0
000034  e3a02c02          MOV      r2,#0x200
000038  e58d1000          STR      r1,[sp,#0]
00003c  e28f1020          ADR      r1,|L1.100|
000040  e59f002c          LDR      r0,|L1.116|
000044  ebfffffe          BL       xTaskCreate
;;;339    
;;;340    		//系统启动
;;;341        vTaskStartScheduler();
000048  ebfffffe          BL       vTaskStartScheduler
;;;342    
;;;343        while(1);
00004c  e1a00000          MOV      r0,r0
                  |L1.80|
000050  eafffffe          B        |L1.80|
;;;344    }
;;;345    
                          ENDP

                  |L1.84|
000054  73797374          DCB      "system setup\n",0
000058  656d2073
00005c  65747570
000060  0a00    
000062  00                DCB      0
000063  00                DCB      0
                  |L1.100|
000064  7463705f          DCB      "tcp_client_task",0
000068  636c6965
00006c  6e745f74
000070  61736b00
                  |L1.116|
                          DCD      tcp_client_task

                          AREA ||i.server_progress||, CODE, READONLY, ALIGN=2

                  server_progress PROC
;;;151    
;;;152    void server_progress(int sock)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;153    {
000004  e24dd094          SUB      sp,sp,#0x94
000008  e1a04000          MOV      r4,r0
;;;154        char *welcom="welcome to connect\n";
00000c  e28f5f6a          ADR      r5,|L2.444|
;;;155        fd_set rfds;
;;;156        struct timeval tv;
;;;157        int recvLen=0;
000010  e3a06000          MOV      r6,#0
;;;158        char recvBuff[128];
;;;159        
;;;160        tv.tv_sec = 3;
000014  e3a00003          MOV      r0,#3
000018  e58d0088          STR      r0,[sp,#0x88]
;;;161        tv.tv_usec = 0;
00001c  e3a00000          MOV      r0,#0
000020  e58d008c          STR      r0,[sp,#0x8c]
;;;162        sysprintf("sock%d:new connect\n", sock);
000024  e1a01004          MOV      r1,r4
000028  e28f0e1a          ADR      r0,|L2.464|
00002c  ebfffffe          BL       sysprintf
;;;163        if (write(sock, welcom, strlen(welcom)) <= 0)
000030  e1a00005          MOV      r0,r5
000034  ebfffffe          BL       strlen
000038  e1a07000          MOV      r7,r0
00003c  e1a02007          MOV      r2,r7
000040  e1a01005          MOV      r1,r5
000044  e1a00004          MOV      r0,r4
000048  ebfffffe          BL       lwip_write
00004c  e3500000          CMP      r0,#0
000050  ca000003          BGT      |L2.100|
;;;164        {
;;;165            sysprintf("sock%d:send error\n", sock);
000054  e1a01004          MOV      r1,r4
000058  e28f0f61          ADR      r0,|L2.484|
00005c  ebfffffe          BL       sysprintf
;;;166            goto SOCKET_END;
000060  ea00004d          B        |L2.412|
                  |L2.100|
;;;167        }
;;;168        while (1)
000064  ea00004b          B        |L2.408|
                  |L2.104|
;;;169        {
;;;170            FD_ZERO(&rfds);
000068  e3a00000          MOV      r0,#0
00006c  e58d0090          STR      r0,[sp,#0x90]
;;;171            FD_SET(sock, &rfds);
000070  e1a01fc4          ASR      r1,r4,#31
000074  e0841ea1          ADD      r1,r4,r1,LSR #29
000078  e28d2090          ADD      r2,sp,#0x90
00007c  e7d211c1          LDRB     r1,[r2,r1,ASR #3]
000080  e2042007          AND      r2,r4,#7
000084  e3a03001          MOV      r3,#1
000088  e1811213          ORR      r1,r1,r3,LSL r2
00008c  e1a00004          MOV      r0,r4
000090  e1a02fc4          ASR      r2,r4,#31
000094  e0842ea2          ADD      r2,r4,r2,LSR #29
000098  e28d3090          ADD      r3,sp,#0x90
00009c  e7c311c2          STRB     r1,[r3,r2,ASR #3]
;;;172            int selres = select(sock + 1, &rfds, NULL, NULL, &tv);
0000a0  e28d0088          ADD      r0,sp,#0x88
0000a4  e3a03000          MOV      r3,#0
0000a8  e1a02003          MOV      r2,r3
0000ac  e58d0000          STR      r0,[sp,#0]
0000b0  e28d1090          ADD      r1,sp,#0x90
0000b4  e2840001          ADD      r0,r4,#1
0000b8  ebfffffe          BL       lwip_select
0000bc  e1a07000          MOV      r7,r0
;;;173            switch (selres)
0000c0  e3770001          CMN      r7,#1
0000c4  0a000002          BEQ      |L2.212|
0000c8  e3570000          CMP      r7,#0
0000cc  1a00000a          BNE      |L2.252|
0000d0  ea000004          B        |L2.232|
                  |L2.212|
;;;174            {
;;;175            case -1:
0000d4  e1a00000          MOV      r0,r0
;;;176                    sysprintf("sock%d:select error\n", sock);
0000d8  e1a01004          MOV      r1,r4
0000dc  e28f0f45          ADR      r0,|L2.504|
0000e0  ebfffffe          BL       sysprintf
;;;177                    goto SOCKET_END;
0000e4  ea00002c          B        |L2.412|
                  |L2.232|
;;;178            case 0:sysprintf("sock%d:select time out\n", sock);
0000e8  e1a00000          MOV      r0,r0
0000ec  e1a01004          MOV      r1,r4
0000f0  e28f0f46          ADR      r0,|L2.528|
0000f4  ebfffffe          BL       sysprintf
;;;179                    break;
0000f8  ea000024          B        |L2.400|
                  |L2.252|
;;;180            default:
0000fc  e1a00000          MOV      r0,r0
;;;181                if (FD_ISSET(sock, &rfds))
000100  e1a01fc4          ASR      r1,r4,#31
000104  e0841ea1          ADD      r1,r4,r1,LSR #29
000108  e28d2090          ADD      r2,sp,#0x90
00010c  e7d211c1          LDRB     r1,[r2,r1,ASR #3]
000110  e2042007          AND      r2,r4,#7
000114  e3a03001          MOV      r3,#1
000118  e0011213          AND      r1,r1,r3,LSL r2
00011c  e3510000          CMP      r1,#0
000120  0a000019          BEQ      |L2.396|
;;;182                {
;;;183                    recvLen = recv(sock, recvBuff, sizeof(recvBuff), 0);
000124  e3a03000          MOV      r3,#0
000128  e3a02080          MOV      r2,#0x80
00012c  e28d1008          ADD      r1,sp,#8
000130  e1a00004          MOV      r0,r4
000134  ebfffffe          BL       lwip_recv
000138  e1a06000          MOV      r6,r0
;;;184                    if (recvLen<=0)
00013c  e3560000          CMP      r6,#0
000140  ca000003          BGT      |L2.340|
;;;185                    {
;;;186                        sysprintf("sock%d:recv error!\n", sock);
000144  e1a01004          MOV      r1,r4
000148  e28f00d8          ADR      r0,|L2.552|
00014c  ebfffffe          BL       sysprintf
;;;187                        goto SOCKET_END;
000150  ea000011          B        |L2.412|
                  |L2.340|
;;;188                    }
;;;189                    else
;;;190                    {
;;;191                        sysprintf("sock%d:recv %d\n", sock, recvLen);
000154  e1a02006          MOV      r2,r6
000158  e1a01004          MOV      r1,r4
00015c  e28f00d8          ADR      r0,|L2.572|
000160  ebfffffe          BL       sysprintf
;;;192                        if (write(sock, recvBuff, recvLen) <= 0)
000164  e1a02006          MOV      r2,r6
000168  e28d1008          ADD      r1,sp,#8
00016c  e1a00004          MOV      r0,r4
000170  ebfffffe          BL       lwip_write
000174  e3500000          CMP      r0,#0
000178  ca000003          BGT      |L2.396|
;;;193                        {
;;;194                            sysprintf("sock%d:send error\n", sock);
00017c  e1a01004          MOV      r1,r4
000180  e28f005c          ADR      r0,|L2.484|
000184  ebfffffe          BL       sysprintf
;;;195                            goto SOCKET_END;
000188  ea000003          B        |L2.412|
                  |L2.396|
00018c  e1a00000          MOV      r0,r0                 ;173
                  |L2.400|
000190  e1a00000          MOV      r0,r0                 ;179
;;;196                        }
;;;197                    }
;;;198                }
;;;199            }
;;;200        }
000194  e1a00000          MOV      r0,r0
                  |L2.408|
000198  eaffffb2          B        |L2.104|
                  |L2.412|
;;;201    SOCKET_END:
00019c  e1a00000          MOV      r0,r0
;;;202        close(sock);//关闭
0001a0  e1a00004          MOV      r0,r4
0001a4  ebfffffe          BL       lwip_close
;;;203        sysprintf("close the socket%d!\n",sock);
0001a8  e1a01004          MOV      r1,r4
0001ac  e28f0098          ADR      r0,|L2.588|
0001b0  ebfffffe          BL       sysprintf
;;;204    }
0001b4  e28dd094          ADD      sp,sp,#0x94
0001b8  e8bd80f0          POP      {r4-r7,pc}
;;;205    
                          ENDP

                  |L2.444|
0001bc  77656c63          DCB      "welcome to connect\n",0
0001c0  6f6d6520
0001c4  746f2063
0001c8  6f6e6e65
0001cc  63740a00
                  |L2.464|
0001d0  736f636b          DCB      "sock%d:new connect\n",0
0001d4  25643a6e
0001d8  65772063
0001dc  6f6e6e65
0001e0  63740a00
                  |L2.484|
0001e4  736f636b          DCB      "sock%d:send error\n",0
0001e8  25643a73
0001ec  656e6420
0001f0  6572726f
0001f4  720a00  
0001f7  00                DCB      0
                  |L2.504|
0001f8  736f636b          DCB      "sock%d:select error\n",0
0001fc  25643a73
000200  656c6563
000204  74206572
000208  726f720a
00020c  00      
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0
                  |L2.528|
000210  736f636b          DCB      "sock%d:select time out\n",0
000214  25643a73
000218  656c6563
00021c  74207469
000220  6d65206f
000224  75740a00
                  |L2.552|
000228  736f636b          DCB      "sock%d:recv error!\n",0
00022c  25643a72
000230  65637620
000234  6572726f
000238  72210a00
                  |L2.572|
00023c  736f636b          DCB      "sock%d:recv %d\n",0
000240  25643a72
000244  65637620
000248  25640a00
                  |L2.588|
00024c  636c6f73          DCB      "close the socket%d!\n",0
000250  65207468
000254  6520736f
000258  636b6574
00025c  2564210a
000260  00      
000261  00                DCB      0
000262  00                DCB      0
000263  00                DCB      0

                          AREA ||i.socket_test||, CODE, READONLY, ALIGN=2

                  socket_test PROC
;;;249    
;;;250    void socket_test(void)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;251    {
000004  e24dd094          SUB      sp,sp,#0x94
;;;252        int sock;
;;;253        fd_set rfds;
;;;254        struct timeval tv;
;;;255        int recvLen=0;
000008  e3a04000          MOV      r4,#0
;;;256        char recvBuff[128];
;;;257        sysprintf("start connect!\n");
00000c  e28f0e1a          ADR      r0,|L3.436|
000010  ebfffffe          BL       sysprintf
;;;258        if (transport_open(&sock, "192.168.1.22", 9001) > 0)
000014  e59f21a8          LDR      r2,|L3.452|
000018  e28f1f6a          ADR      r1,|L3.456|
00001c  e28d0090          ADD      r0,sp,#0x90
000020  ebfffffe          BL       transport_open
000024  e3500000          CMP      r0,#0
000028  da00005d          BLE      |L3.420|
;;;259        {
;;;260            sysprintf("sock%d:connect OK!\n",sock);
00002c  e28f0f69          ADR      r0,|L3.472|
000030  e59d1090          LDR      r1,[sp,#0x90]
000034  ebfffffe          BL       sysprintf
;;;261            tv.tv_sec = 3;
000038  e3a00003          MOV      r0,#3
00003c  e58d0084          STR      r0,[sp,#0x84]
;;;262            tv.tv_usec = 0;
000040  e3a00000          MOV      r0,#0
000044  e58d0088          STR      r0,[sp,#0x88]
;;;263            while (1)
000048  ea00004d          B        |L3.388|
                  |L3.76|
;;;264            {
;;;265                FD_ZERO(&rfds);
00004c  e3a00000          MOV      r0,#0
000050  e58d008c          STR      r0,[sp,#0x8c]
;;;266                FD_SET(sock, &rfds);
000054  e59d0090          LDR      r0,[sp,#0x90]
000058  e1a01fc0          ASR      r1,r0,#31
00005c  e0801ea1          ADD      r1,r0,r1,LSR #29
000060  e28d208c          ADD      r2,sp,#0x8c
000064  e7d211c1          LDRB     r1,[r2,r1,ASR #3]
000068  e2002007          AND      r2,r0,#7
00006c  e3a03001          MOV      r3,#1
000070  e1811213          ORR      r1,r1,r3,LSL r2
000074  e1a02fc0          ASR      r2,r0,#31
000078  e0802ea2          ADD      r2,r0,r2,LSR #29
00007c  e28d308c          ADD      r3,sp,#0x8c
000080  e7c311c2          STRB     r1,[r3,r2,ASR #3]
;;;267                int selres = select(sock + 1, &rfds, NULL, NULL, &tv);
000084  e28d0084          ADD      r0,sp,#0x84
000088  e3a03000          MOV      r3,#0
00008c  e1a02003          MOV      r2,r3
000090  e58d0000          STR      r0,[sp,#0]
000094  e28d108c          ADD      r1,sp,#0x8c
000098  e59d0090          LDR      r0,[sp,#0x90]
00009c  e2800001          ADD      r0,r0,#1
0000a0  ebfffffe          BL       lwip_select
0000a4  e1a05000          MOV      r5,r0
;;;268                switch (selres)
0000a8  e3750001          CMN      r5,#1
0000ac  0a000002          BEQ      |L3.188|
0000b0  e3550000          CMP      r5,#0
0000b4  1a00000a          BNE      |L3.228|
0000b8  ea000004          B        |L3.208|
                  |L3.188|
;;;269                {
;;;270                case -1:
0000bc  e1a00000          MOV      r0,r0
;;;271                        sysprintf("sockt%d:select error\n",sock);
0000c0  e28f0f49          ADR      r0,|L3.492|
0000c4  e59d1090          LDR      r1,[sp,#0x90]
0000c8  ebfffffe          BL       sysprintf
;;;272                        goto SOCKET_END;
0000cc  ea00002d          B        |L3.392|
                  |L3.208|
;;;273                case 0:sysprintf("sockt%d:select time out\n",sock);
0000d0  e1a00000          MOV      r0,r0
0000d4  e28f0f4a          ADR      r0,|L3.516|
0000d8  e59d1090          LDR      r1,[sp,#0x90]
0000dc  ebfffffe          BL       sysprintf
;;;274                        break;
0000e0  ea000025          B        |L3.380|
                  |L3.228|
;;;275                default:
0000e4  e1a00000          MOV      r0,r0
;;;276                    if (FD_ISSET(sock, &rfds))
0000e8  e59d0090          LDR      r0,[sp,#0x90]
0000ec  e1a01fc0          ASR      r1,r0,#31
0000f0  e0801ea1          ADD      r1,r0,r1,LSR #29
0000f4  e28d208c          ADD      r2,sp,#0x8c
0000f8  e7d211c1          LDRB     r1,[r2,r1,ASR #3]
0000fc  e2002007          AND      r2,r0,#7
000100  e3a03001          MOV      r3,#1
000104  e0011213          AND      r1,r1,r3,LSL r2
000108  e3510000          CMP      r1,#0
00010c  0a000019          BEQ      |L3.376|
;;;277                    {
;;;278                        recvLen = recv(sock, recvBuff, sizeof(recvBuff), 0);
000110  e3a03000          MOV      r3,#0
000114  e3a02080          MOV      r2,#0x80
000118  e28d1004          ADD      r1,sp,#4
00011c  e59d0090          LDR      r0,[sp,#0x90]
000120  ebfffffe          BL       lwip_recv
000124  e1a04000          MOV      r4,r0
;;;279                        if (recvLen<=0)
000128  e3540000          CMP      r4,#0
00012c  ca000003          BGT      |L3.320|
;;;280                        {
;;;281                            sysprintf("sockt%d:recv error!\n",sock);
000130  e28f00e8          ADR      r0,|L3.544|
000134  e59d1090          LDR      r1,[sp,#0x90]
000138  ebfffffe          BL       sysprintf
;;;282                            goto SOCKET_END;
00013c  ea000011          B        |L3.392|
                  |L3.320|
;;;283                        }
;;;284                        else
;;;285                        {
;;;286                            sysprintf("sockt%d recv %d!\n",sock, recvLen);
000140  e1a02004          MOV      r2,r4
000144  e28f00ec          ADR      r0,|L3.568|
000148  e59d1090          LDR      r1,[sp,#0x90]
00014c  ebfffffe          BL       sysprintf
;;;287                            if (write(sock, recvBuff, recvLen) <= 0)
000150  e1a02004          MOV      r2,r4
000154  e28d1004          ADD      r1,sp,#4
000158  e59d0090          LDR      r0,[sp,#0x90]
00015c  ebfffffe          BL       lwip_write
000160  e3500000          CMP      r0,#0
000164  ca000003          BGT      |L3.376|
;;;288                            {
;;;289                                sysprintf("sockt%d:send error\n",sock);
000168  e28f00dc          ADR      r0,|L3.588|
00016c  e59d1090          LDR      r1,[sp,#0x90]
000170  ebfffffe          BL       sysprintf
;;;290                                goto SOCKET_END;
000174  ea000003          B        |L3.392|
                  |L3.376|
000178  e1a00000          MOV      r0,r0                 ;268
                  |L3.380|
00017c  e1a00000          MOV      r0,r0                 ;274
;;;291                            }
;;;292                        }
;;;293                    }
;;;294                }
;;;295            }
000180  e1a00000          MOV      r0,r0
                  |L3.388|
000184  eaffffb0          B        |L3.76|
                  |L3.392|
;;;296    SOCKET_END:
000188  e1a00000          MOV      r0,r0
;;;297            close(sock);//关闭
00018c  e59d0090          LDR      r0,[sp,#0x90]
000190  ebfffffe          BL       lwip_close
;;;298            sysprintf("close the socket%d!\n", sock);
000194  e28f00c4          ADR      r0,|L3.608|
000198  e59d1090          LDR      r1,[sp,#0x90]
00019c  ebfffffe          BL       sysprintf
0001a0  ea000001          B        |L3.428|
                  |L3.420|
;;;299        }
;;;300        else
;;;301        {
;;;302            sysprintf("connect error!\n");
0001a4  e28f00cc          ADR      r0,|L3.632|
0001a8  ebfffffe          BL       sysprintf
                  |L3.428|
;;;303        }
;;;304    }
0001ac  e28dd094          ADD      sp,sp,#0x94
0001b0  e8bd8030          POP      {r4,r5,pc}
;;;305    static void tcp_client_task( void *pvParameters )
                          ENDP

                  |L3.436|
0001b4  73746172          DCB      "start connect!\n",0
0001b8  7420636f
0001bc  6e6e6563
0001c0  74210a00
                  |L3.452|
                          DCD      0x00002329
                  |L3.456|
0001c8  3139322e          DCB      "192.168.1.22",0
0001cc  3136382e
0001d0  312e3232
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L3.472|
0001d8  736f636b          DCB      "sock%d:connect OK!\n",0
0001dc  25643a63
0001e0  6f6e6e65
0001e4  6374204f
0001e8  4b210a00
                  |L3.492|
0001ec  736f636b          DCB      "sockt%d:select error\n",0
0001f0  7425643a
0001f4  73656c65
0001f8  63742065
0001fc  72726f72
000200  0a00    
000202  00                DCB      0
000203  00                DCB      0
                  |L3.516|
000204  736f636b          DCB      "sockt%d:select time out\n",0
000208  7425643a
00020c  73656c65
000210  63742074
000214  696d6520
000218  6f75740a
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L3.544|
000220  736f636b          DCB      "sockt%d:recv error!\n",0
000224  7425643a
000228  72656376
00022c  20657272
000230  6f72210a
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
                  |L3.568|
000238  736f636b          DCB      "sockt%d recv %d!\n",0
00023c  74256420
000240  72656376
000244  20256421
000248  0a00    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L3.588|
00024c  736f636b          DCB      "sockt%d:send error\n",0
000250  7425643a
000254  73656e64
000258  20657272
00025c  6f720a00
                  |L3.608|
000260  636c6f73          DCB      "close the socket%d!\n",0
000264  65207468
000268  6520736f
00026c  636b6574
000270  2564210a
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L3.632|
000278  636f6e6e          DCB      "connect error!\n",0
00027c  65637420
000280  6572726f
000284  72210a00

                          AREA ||i.tcp_client_task||, CODE, READONLY, ALIGN=2

                  tcp_client_task PROC
;;;304    }
;;;305    static void tcp_client_task( void *pvParameters )
000000  e92d401c          PUSH     {r2-r4,lr}
;;;306    {
;;;307        int cnt = 0;
000004  e1a00000          MOV      r0,r0
;;;308        LwIP_Init();
000008  ebfffffe          BL       LwIP_Init
;;;309        while (1)
00000c  ea000006          B        |L4.44|
                  |L4.16|
;;;310        {
;;;311            LwIP_DHCP_task(NULL);
000010  e3a00000          MOV      r0,#0
000014  ebfffffe          BL       LwIP_DHCP_task
;;;312            if (DHCP_ADDRESS_ASSIGNED == g_eDHCPState)
000018  e59f0054          LDR      r0,|L4.116|
00001c  e5d00000          LDRB     r0,[r0,#0]  ; g_eDHCPState
000020  e3500002          CMP      r0,#2
000024  1a000000          BNE      |L4.44|
;;;313                break;
000028  ea000000          B        |L4.48|
                  |L4.44|
00002c  eafffff7          B        |L4.16|
                  |L4.48|
000030  e1a00000          MOV      r0,r0
;;;314        }
;;;315        vTaskDelay( 2000/portTICK_PERIOD_MS );
000034  e3a00e7d          MOV      r0,#0x7d0
000038  ebfffffe          BL       vTaskDelay
;;;316        
;;;317        xTaskCreate( tcp_server_task, "tcp_server_task", 512, NULL, configMAX_PRIORITIES-3, NULL );
00003c  e3a00000          MOV      r0,#0
000040  e3a0101d          MOV      r1,#0x1d
000044  e58d0004          STR      r0,[sp,#4]
000048  e1a03000          MOV      r3,r0
00004c  e3a02c02          MOV      r2,#0x200
000050  e58d1000          STR      r1,[sp,#0]
000054  e28f101c          ADR      r1,|L4.120|
000058  e59f0028          LDR      r0,|L4.136|
00005c  ebfffffe          BL       xTaskCreate
;;;318    
;;;319        while (1)
000060  ea000002          B        |L4.112|
                  |L4.100|
;;;320        {
;;;321            socket_test();
000064  ebfffffe          BL       socket_test
;;;322            vTaskDelay( 1000/portTICK_PERIOD_MS );
000068  e3a00ffa          MOV      r0,#0x3e8
00006c  ebfffffe          BL       vTaskDelay
                  |L4.112|
000070  eafffffb          B        |L4.100|
;;;323        }
;;;324    }
;;;325    
                          ENDP

                  |L4.116|
                          DCD      g_eDHCPState
                  |L4.120|
000078  7463705f          DCB      "tcp_server_task",0
00007c  73657276
000080  65725f74
000084  61736b00
                  |L4.136|
                          DCD      tcp_server_task

                          AREA ||i.tcp_server_task||, CODE, READONLY, ALIGN=2

                  tcp_server_task PROC
;;;205    
;;;206    static void tcp_server_task( void *pvParameters )
000000  e24dd030          SUB      sp,sp,#0x30
;;;207    {
;;;208        int bReuseaddr=1;
000004  e3a00001          MOV      r0,#1
000008  e58d002c          STR      r0,[sp,#0x2c]
;;;209    
;;;210        int sock, newconn, size;
;;;211        struct sockaddr_in address, remotehost;
;;;212        
;;;213        while(1)
00000c  ea000036          B        |L5.236|
                  |L5.16|
;;;214        {
;;;215            if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
000010  e3a02000          MOV      r2,#0
000014  e3a01001          MOV      r1,#1
000018  e3a00002          MOV      r0,#2
00001c  ebfffffe          BL       lwip_socket
000020  e2505000          SUBS     r5,r0,#0
000024  aa000004          BGE      |L5.60|
;;;216            {
;;;217                sysprintf("can not creat socket\r\n");
000028  e28f00c0          ADR      r0,|L5.240|
00002c  ebfffffe          BL       sysprintf
;;;218                vTaskDelay( 1000/portTICK_PERIOD_MS );
000030  e3a00ffa          MOV      r0,#0x3e8
000034  ebfffffe          BL       vTaskDelay
;;;219                continue;
000038  ea00002b          B        |L5.236|
                  |L5.60|
;;;220            }
;;;221    
;;;222            address.sin_family = AF_INET;
00003c  e3a00002          MOV      r0,#2
000040  e5cd0019          STRB     r0,[sp,#0x19]
;;;223            address.sin_port = htons(6000);   // mosbus tcp port
000044  e59f00bc          LDR      r0,|L5.264|
000048  ebfffffe          BL       lwip_htons
00004c  e1cd01ba          STRH     r0,[sp,#0x1a]
;;;224            address.sin_addr.s_addr = INADDR_ANY;
000050  e3a00000          MOV      r0,#0
000054  e58d001c          STR      r0,[sp,#0x1c]
;;;225    
;;;226            if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
000058  e3a02010          MOV      r2,#0x10
00005c  e28d1018          ADD      r1,sp,#0x18
000060  e1a00005          MOV      r0,r5
000064  ebfffffe          BL       lwip_bind
000068  e3500000          CMP      r0,#0
00006c  aa000006          BGE      |L5.140|
;;;227            {
;;;228                sysprintf("can not bind socket\r\n");
000070  e28f0094          ADR      r0,|L5.268|
000074  ebfffffe          BL       sysprintf
;;;229                close(sock);
000078  e1a00005          MOV      r0,r5
00007c  ebfffffe          BL       lwip_close
;;;230                vTaskDelay( 2000/portTICK_PERIOD_MS );
000080  e3a00e7d          MOV      r0,#0x7d0
000084  ebfffffe          BL       vTaskDelay
;;;231                continue;
000088  ea000017          B        |L5.236|
                  |L5.140|
;;;232            }
;;;233    
;;;234        /* listen for incoming connections (TCP listen backlog = 1) */
;;;235            listen(sock, 1);
00008c  e3a01001          MOV      r1,#1
000090  e1a00005          MOV      r0,r5
000094  ebfffffe          BL       lwip_listen
;;;236            size = sizeof(remotehost);
000098  e3a00010          MOV      r0,#0x10
00009c  e58d0028          STR      r0,[sp,#0x28]
;;;237            newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
0000a0  e28d2028          ADD      r2,sp,#0x28
0000a4  e28d1008          ADD      r1,sp,#8
0000a8  e1a00005          MOV      r0,r5
0000ac  ebfffffe          BL       lwip_accept
0000b0  e1a04000          MOV      r4,r0
;;;238    
;;;239            setsockopt(sock,SOL_SOCKET ,SO_REUSEADDR,(const char*)&bReuseaddr,sizeof(int));
0000b4  e3a00004          MOV      r0,#4
0000b8  e58d0000          STR      r0,[sp,#0]
0000bc  e28d302c          ADD      r3,sp,#0x2c
0000c0  e1a02000          MOV      r2,r0
0000c4  e59f1058          LDR      r1,|L5.292|
0000c8  e1a00005          MOV      r0,r5
0000cc  ebfffffe          BL       lwip_setsockopt
;;;240            close(sock);  //一次只接受一个连接
0000d0  e1a00005          MOV      r0,r5
0000d4  ebfffffe          BL       lwip_close
;;;241            if (newconn >= 0)
0000d8  e3540000          CMP      r4,#0
0000dc  ba000001          BLT      |L5.232|
;;;242            {
;;;243                server_progress(newconn);
0000e0  e1a00004          MOV      r0,r4
0000e4  ebfffffe          BL       server_progress
                  |L5.232|
0000e8  e1a00000          MOV      r0,r0                 ;219
                  |L5.236|
0000ec  eaffffc7          B        |L5.16|
;;;244            }
;;;245        }
;;;246    }
;;;247    
                          ENDP

                  |L5.240|
0000f0  63616e20          DCB      "can not creat socket\r\n",0
0000f4  6e6f7420
0000f8  63726561
0000fc  7420736f
000100  636b6574
000104  0d0a00  
000107  00                DCB      0
                  |L5.264|
                          DCD      0x00001770
                  |L5.268|
00010c  63616e20          DCB      "can not bind socket\r\n",0
000110  6e6f7420
000114  62696e64
000118  20736f63
00011c  6b65740d
000120  0a00    
000122  00                DCB      0
000123  00                DCB      0
                  |L5.292|
                          DCD      0x00000fff

                          AREA ||i.transport_open||, CODE, READONLY, ALIGN=2

                  transport_open PROC
;;;21     extern int inHandlerMode (void);
;;;22     int transport_open(int *sock, char* servip, int port)//0：连接失败，1：连接成功
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;23     {
000004  e24dd034          SUB      sp,sp,#0x34
000008  e1a04000          MOV      r4,r0
00000c  e1a07001          MOV      r7,r1
000010  e1a06002          MOV      r6,r2
;;;24     //    s32 *sock;
;;;25     //    int errno;
;;;26     	int ret;
;;;27     	int opt;
;;;28     	struct sockaddr_in addr;
;;;29     	
;;;30         struct timeval tm;
;;;31         int error=-1,len;
000014  e3e09000          MVN      r9,#0
;;;32     //    int errinfo, errlen;
;;;33         int ul=1;
000018  e3a00001          MOV      r0,#1
00001c  e58d001c          STR      r0,[sp,#0x1c]
;;;34         
;;;35         
;;;36     	//初始换服务器信息
;;;37     	memset(&addr,0,sizeof(addr));
000020  e3a00000          MOV      r0,#0
000024  e58d0020          STR      r0,[sp,#0x20]
000028  e58d0024          STR      r0,[sp,#0x24]
00002c  e58d0028          STR      r0,[sp,#0x28]
000030  e58d002c          STR      r0,[sp,#0x2c]
;;;38     	addr.sin_len = sizeof(addr);
000034  e3a00010          MOV      r0,#0x10
000038  e5cd0020          STRB     r0,[sp,#0x20]
;;;39     	addr.sin_family = AF_INET;
00003c  e3a00002          MOV      r0,#2
000040  e5cd0021          STRB     r0,[sp,#0x21]
;;;40     	//填写服务器端口号
;;;41     	addr.sin_port = PP_HTONS(port);
000044  e1a00c06          LSL      r0,r6,#24
000048  e1a00820          LSR      r0,r0,#16
00004c  e2061cff          AND      r1,r6,#0xff00
000050  e1800441          ORR      r0,r0,r1,ASR #8
000054  e1cd02b2          STRH     r0,[sp,#0x22]
;;;42     	//填写服务器IP地址
;;;43     	addr.sin_addr.s_addr = inet_addr((const char*)servip);
000058  e1a00007          MOV      r0,r7
00005c  ebfffffe          BL       ipaddr_addr
000060  e58d0024          STR      r0,[sp,#0x24]
;;;44     	
;;;45     	//创建SOCK
;;;46     	*sock = socket(AF_INET,SOCK_STREAM,0);
000064  e3a02000          MOV      r2,#0
000068  e3a01001          MOV      r1,#1
00006c  e3a00002          MOV      r0,#2
000070  ebfffffe          BL       lwip_socket
000074  e5840000          STR      r0,[r4,#0]
;;;47         if (*sock < 0)
000078  e5940000          LDR      r0,[r4,#0]
00007c  e3500000          CMP      r0,#0
000080  aa000002          BGE      |L6.144|
;;;48             return 0;
000084  e3a00000          MOV      r0,#0
                  |L6.136|
000088  e28dd034          ADD      sp,sp,#0x34
;;;49         
;;;50         ioctlsocket(*sock, FIONBIO, &ul); //设置为非阻塞模式
;;;51     	//连接服务器
;;;52     	ret = connect(*sock,(struct sockaddr*)&addr,sizeof(addr));
;;;53         if (0 == ret)
;;;54         {
;;;55     //        sysprintf("socket connect succeed immediately.\n");
;;;56         }
;;;57         else
;;;58         {
;;;59     //        sysprintf("get the connect result by select().\n");
;;;60             fd_set rfds, wfds;
;;;61             struct timeval tv;
;;;62     //        sysprintf("errno = %d\n", errno);
;;;63             FD_ZERO(&rfds);
;;;64             FD_ZERO(&wfds);
;;;65             FD_SET(*sock, &rfds);
;;;66             FD_SET(*sock, &wfds);
;;;67             /* set select() time out */
;;;68             tv.tv_sec = 3;
;;;69             tv.tv_usec = 0;
;;;70             int selres = select(*sock + 1, &rfds, &wfds, NULL, &tv);
;;;71             switch (selres)
;;;72             {
;;;73                 case -1:
;;;74     //                sysprintf("select error\n");
;;;75                     ret = -1;
;;;76                     break;
;;;77                 case 0:
;;;78     //                sysprintf("select time out\n");
;;;79                         ret = -1;
;;;80                         break;
;;;81                 default:
;;;82                     if (FD_ISSET(*sock, &rfds) || FD_ISSET(*sock, &wfds))
;;;83                     {
;;;84                     #if 1 // not useable in linux environment, suggested in <<Unix network programming>>
;;;85                         int errinfo;
;;;86                         socklen_t errlen = sizeof(errinfo);
;;;87                         if (-1 == getsockopt(*sock, SOL_SOCKET, SO_ERROR, &errinfo, &errlen))//任务优先级必须低于网络接收任务优先级
;;;88                         {
;;;89     //                        sysprintf("getsockopt return -1.\n");
;;;90                             ret = -1;
;;;91                             break;
;;;92                         }
;;;93                         else if (0 != errinfo)
;;;94                         {
;;;95     //                        sysprintf("getsockopt return errinfo = %d.\n", errinfo);
;;;96                             ret = -1;
;;;97                             break;
;;;98                         }
;;;99                         ret = 0;
;;;100    //                    sysprintf("connect ok \n");
;;;101                    #else
;;;102                    #if 0
;;;103                        connect(*sock, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
;;;104                        int err = errno;
;;;105                        if (err == EISCONN)
;;;106                        {
;;;107                            sysprintf("connect finished 111.\n");
;;;108                            ret = 0;
;;;109                        }
;;;110                        else
;;;111                        {
;;;112                            sysprintf("connect failed. errno = %d\n", errno);
;;;113                            sysprintf("FD_ISSET(sock_fd, &rfds): %d\n FD_ISSET(sock_fd, &wfds): %d\n", FD_ISSET(*sock, &rfds) , FD_ISSET(*sock, &wfds));
;;;114                            ret = errno;
;;;115                        }
;;;116                    #else
;;;117                        char buff[2];
;;;118                        if (read(*sock, buff, 0) < 0)
;;;119                        {
;;;120                            sysprintf("connect failed. errno = %d\n", errno);
;;;121                            ret = errno;
;;;122                        }
;;;123                        else
;;;124                        {
;;;125                            sysprintf("connect finished.\n");
;;;126                            ret = 0;
;;;127                        }
;;;128                    #endif
;;;129                    #endif
;;;130                    }
;;;131                    else
;;;132                    {
;;;133                        sysprintf("haha\n");
;;;134                    }break;
;;;135            }
;;;136        }
;;;137        if (ret == 0)
;;;138        {
;;;139            ul = 1;
;;;140            ioctlsocket(*sock, FIONBIO, &ul); //设置为非阻塞模式
;;;141            opt = 3000;
;;;142            setsockopt(*sock,SOL_SOCKET,SO_RCVTIMEO,&opt,sizeof(int));
;;;143            return 1;
;;;144        }
;;;145        else
;;;146        {
;;;147            close(*sock);
;;;148            return 0;
;;;149        }
;;;150    }
00008c  e8bd83f0          POP      {r4-r9,pc}
                  |L6.144|
000090  e28d201c          ADD      r2,sp,#0x1c           ;50
000094  e5940000          LDR      r0,[r4,#0]            ;50
000098  e59f1208          LDR      r1,|L6.680|
00009c  ebfffffe          BL       lwip_ioctl
0000a0  e3a02010          MOV      r2,#0x10              ;52
0000a4  e28d1020          ADD      r1,sp,#0x20           ;52
0000a8  e5940000          LDR      r0,[r4,#0]            ;52
0000ac  ebfffffe          BL       lwip_connect
0000b0  e1a05000          MOV      r5,r0                 ;52
0000b4  e3550000          CMP      r5,#0                 ;53
0000b8  0a000063          BEQ      |L6.588|
0000bc  e3a00000          MOV      r0,#0                 ;63
0000c0  e58d0018          STR      r0,[sp,#0x18]         ;63
0000c4  e58d0014          STR      r0,[sp,#0x14]         ;64
0000c8  e5940000          LDR      r0,[r4,#0]            ;65
0000cc  e1a01fc0          ASR      r1,r0,#31             ;65
0000d0  e0801ea1          ADD      r1,r0,r1,LSR #29      ;65
0000d4  e28d2018          ADD      r2,sp,#0x18           ;65
0000d8  e7d211c1          LDRB     r1,[r2,r1,ASR #3]     ;65
0000dc  e5d42000          LDRB     r2,[r4,#0]            ;65
0000e0  e2022007          AND      r2,r2,#7              ;65
0000e4  e3a03001          MOV      r3,#1                 ;65
0000e8  e1811213          ORR      r1,r1,r3,LSL r2       ;65
0000ec  e1a02fc0          ASR      r2,r0,#31             ;65
0000f0  e0802ea2          ADD      r2,r0,r2,LSR #29      ;65
0000f4  e28d3018          ADD      r3,sp,#0x18           ;65
0000f8  e7c311c2          STRB     r1,[r3,r2,ASR #3]     ;65
0000fc  e5940000          LDR      r0,[r4,#0]            ;66
000100  e1a01fc0          ASR      r1,r0,#31             ;66
000104  e0801ea1          ADD      r1,r0,r1,LSR #29      ;66
000108  e28d2014          ADD      r2,sp,#0x14           ;66
00010c  e7d211c1          LDRB     r1,[r2,r1,ASR #3]     ;66
000110  e5d42000          LDRB     r2,[r4,#0]            ;66
000114  e2022007          AND      r2,r2,#7              ;66
000118  e3a03001          MOV      r3,#1                 ;66
00011c  e1811213          ORR      r1,r1,r3,LSL r2       ;66
000120  e1a02fc0          ASR      r2,r0,#31             ;66
000124  e0802ea2          ADD      r2,r0,r2,LSR #29      ;66
000128  e28d3014          ADD      r3,sp,#0x14           ;66
00012c  e7c311c2          STRB     r1,[r3,r2,ASR #3]     ;66
000130  e3a00003          MOV      r0,#3                 ;68
000134  e58d000c          STR      r0,[sp,#0xc]          ;68
000138  e3a00000          MOV      r0,#0                 ;69
00013c  e58d0010          STR      r0,[sp,#0x10]         ;69
000140  e28d000c          ADD      r0,sp,#0xc            ;70
000144  e58d0000          STR      r0,[sp,#0]            ;70
000148  e5941000          LDR      r1,[r4,#0]            ;70
00014c  e2810001          ADD      r0,r1,#1              ;70
000150  e3a03000          MOV      r3,#0                 ;70
000154  e28d2014          ADD      r2,sp,#0x14           ;70
000158  e28d1018          ADD      r1,sp,#0x18           ;70
00015c  ebfffffe          BL       lwip_select
000160  e1a08000          MOV      r8,r0                 ;70
000164  e3780001          CMN      r8,#1                 ;71
000168  0a000002          BEQ      |L6.376|
00016c  e3580000          CMP      r8,#0                 ;71
000170  1a000006          BNE      |L6.400|
000174  ea000002          B        |L6.388|
                  |L6.376|
000178  e1a00000          MOV      r0,r0                 ;73
00017c  e3e05000          MVN      r5,#0                 ;75
000180  ea00002f          B        |L6.580|
                  |L6.388|
000184  e1a00000          MOV      r0,r0                 ;77
000188  e3e05000          MVN      r5,#0                 ;79
00018c  ea00002c          B        |L6.580|
                  |L6.400|
000190  e1a00000          MOV      r0,r0                 ;81
000194  e5941000          LDR      r1,[r4,#0]            ;82
000198  e1a02fc1          ASR      r2,r1,#31             ;82
00019c  e0812ea2          ADD      r2,r1,r2,LSR #29      ;82
0001a0  e28d3018          ADD      r3,sp,#0x18           ;82
0001a4  e7d321c2          LDRB     r2,[r3,r2,ASR #3]     ;82
0001a8  e5d43000          LDRB     r3,[r4,#0]            ;82
0001ac  e2033007          AND      r3,r3,#7              ;82
0001b0  e3a0c001          MOV      r12,#1                ;82
0001b4  e002231c          AND      r2,r2,r12,LSL r3      ;82
0001b8  e3520000          CMP      r2,#0                 ;82
0001bc  1a000009          BNE      |L6.488|
0001c0  e5940000          LDR      r0,[r4,#0]            ;82
0001c4  e1a02fc0          ASR      r2,r0,#31             ;82
0001c8  e0802ea2          ADD      r2,r0,r2,LSR #29      ;82
0001cc  e28d3014          ADD      r3,sp,#0x14           ;82
0001d0  e7d321c2          LDRB     r2,[r3,r2,ASR #3]     ;82
0001d4  e5d43000          LDRB     r3,[r4,#0]            ;82
0001d8  e2033007          AND      r3,r3,#7              ;82
0001dc  e002231c          AND      r2,r2,r12,LSL r3      ;82
0001e0  e3520000          CMP      r2,#0                 ;82
0001e4  0a000013          BEQ      |L6.568|
                  |L6.488|
0001e8  e3a00004          MOV      r0,#4                 ;86
0001ec  e58d0004          STR      r0,[sp,#4]            ;86
0001f0  e28d0004          ADD      r0,sp,#4              ;87
0001f4  e58d0000          STR      r0,[sp,#0]            ;87
0001f8  e28d3008          ADD      r3,sp,#8              ;87
0001fc  e5940000          LDR      r0,[r4,#0]            ;87
000200  e59f20a4          LDR      r2,|L6.684|
000204  e2421008          SUB      r1,r2,#8              ;87
000208  ebfffffe          BL       lwip_getsockopt
00020c  e3700001          CMN      r0,#1                 ;87
000210  1a000001          BNE      |L6.540|
000214  e3e05000          MVN      r5,#0                 ;90
000218  ea000009          B        |L6.580|
                  |L6.540|
00021c  e59d0008          LDR      r0,[sp,#8]            ;93
000220  e3500000          CMP      r0,#0                 ;93
000224  0a000001          BEQ      |L6.560|
000228  e3e05000          MVN      r5,#0                 ;96
00022c  ea000004          B        |L6.580|
                  |L6.560|
000230  e3a05000          MOV      r5,#0                 ;99
000234  ea000001          B        |L6.576|
                  |L6.568|
000238  e28f0070          ADR      r0,|L6.688|
00023c  ebfffffe          BL       sysprintf
                  |L6.576|
000240  e1a00000          MOV      r0,r0                 ;134
                  |L6.580|
000244  e1a00000          MOV      r0,r0                 ;76
000248  e1a00000          MOV      r0,r0                 ;136
                  |L6.588|
00024c  e3550000          CMP      r5,#0                 ;137
000250  1a000010          BNE      |L6.664|
000254  e3a00001          MOV      r0,#1                 ;139
000258  e58d001c          STR      r0,[sp,#0x1c]         ;139
00025c  e28d201c          ADD      r2,sp,#0x1c           ;140
000260  e5940000          LDR      r0,[r4,#0]            ;140
000264  e59f103c          LDR      r1,|L6.680|
000268  ebfffffe          BL       lwip_ioctl
00026c  e59f0044          LDR      r0,|L6.696|
000270  e58d0030          STR      r0,[sp,#0x30]         ;141
000274  e3a00004          MOV      r0,#4                 ;142
000278  e58d0000          STR      r0,[sp,#0]            ;142
00027c  e28d3030          ADD      r3,sp,#0x30           ;142
000280  e5940000          LDR      r0,[r4,#0]            ;142
000284  e59f2030          LDR      r2,|L6.700|
000288  e2421007          SUB      r1,r2,#7              ;142
00028c  ebfffffe          BL       lwip_setsockopt
000290  e3a00001          MOV      r0,#1                 ;143
000294  eaffff7b          B        |L6.136|
                  |L6.664|
000298  e5940000          LDR      r0,[r4,#0]            ;147
00029c  ebfffffe          BL       lwip_close
0002a0  e3a00000          MOV      r0,#0                 ;148
0002a4  eaffff77          B        |L6.136|
;;;151    
                          ENDP

                  |L6.680|
                          DCD      0x8004667e
                  |L6.684|
                          DCD      0x00001007
                  |L6.688|
0002b0  68616861          DCB      "haha\n",0
0002b4  0a00    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L6.696|
                          DCD      0x00000bb8
                  |L6.700|
                          DCD      0x00001006

                  __ARM_use_no_argv EQU 0
